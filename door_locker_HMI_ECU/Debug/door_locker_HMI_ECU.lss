
door_locker_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00002cce  00002d62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800106  00800106  00002e08  2**0
                  ALLOC
  3 .stab         00002b44  00000000  00000000  00002e08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000128a  00000000  00000000  0000594c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006d36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a00b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000af90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b110  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b3d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bc60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 df 13 	jmp	0x27be	; 0x27be <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 31       	cpi	r26, 0x13	; 19
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d6 09 	call	0x13ac	; 0x13ac <main>
      8a:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ef       	ldi	r26, 0xF8	; 248
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 ef       	ldi	r24, 0xF8	; 248
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 ef       	ldi	r22, 0xF8	; 248
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <BUZZER_INIT>:

/*******************************************************************************
 *							function Definition							   *
 ******************************************************************************/
void BUZZER_INIT(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN, PIN_OUTPUT);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN, LOGIC_LOW);
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	67 e0       	ldi	r22, 0x07	; 7
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>

}
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <BUZZER_on>:
void BUZZER_on(void)
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN, LOGIC_HIGH);
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	67 e0       	ldi	r22, 0x07	; 7
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
}
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <BUZZER_off>:
void BUZZER_off(void)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN, LOGIC_LOW);
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	67 e0       	ldi	r22, 0x07	; 7
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
}
     cea:	cf 91       	pop	r28
     cec:	df 91       	pop	r29
     cee:	08 95       	ret

00000cf0 <GPIO_setupPinDirection>:

/*
function to setup the dirction on specified pin Input/output
if pin number or port number ar invalid, function will not handle it
*/
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
     cf0:	df 93       	push	r29
     cf2:	cf 93       	push	r28
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <GPIO_setupPinDirection+0x6>
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <GPIO_setupPinDirection+0x8>
     cf8:	0f 92       	push	r0
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	6a 83       	std	Y+2, r22	; 0x02
     d02:	4b 83       	std	Y+3, r20	; 0x03
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	85 30       	cpi	r24, 0x05	; 5
     d08:	08 f0       	brcs	.+2      	; 0xd0c <GPIO_setupPinDirection+0x1c>
     d0a:	e4 c0       	rjmp	.+456    	; 0xed4 <GPIO_setupPinDirection+0x1e4>
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	89 30       	cpi	r24, 0x09	; 9
     d10:	08 f0       	brcs	.+2      	; 0xd14 <GPIO_setupPinDirection+0x24>
     d12:	e0 c0       	rjmp	.+448    	; 0xed4 <GPIO_setupPinDirection+0x1e4>

    }
    else{
        switch (port_num)
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	3d 83       	std	Y+5, r19	; 0x05
     d1c:	2c 83       	std	Y+4, r18	; 0x04
     d1e:	8c 81       	ldd	r24, Y+4	; 0x04
     d20:	9d 81       	ldd	r25, Y+5	; 0x05
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <GPIO_setupPinDirection+0x3a>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <GPIO_setupPinDirection+0xc8>
     d2a:	2c 81       	ldd	r18, Y+4	; 0x04
     d2c:	3d 81       	ldd	r19, Y+5	; 0x05
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	31 05       	cpc	r19, r1
     d32:	2c f4       	brge	.+10     	; 0xd3e <GPIO_setupPinDirection+0x4e>
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	9d 81       	ldd	r25, Y+5	; 0x05
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	71 f0       	breq	.+28     	; 0xd58 <GPIO_setupPinDirection+0x68>
     d3c:	cb c0       	rjmp	.+406    	; 0xed4 <GPIO_setupPinDirection+0x1e4>
     d3e:	2c 81       	ldd	r18, Y+4	; 0x04
     d40:	3d 81       	ldd	r19, Y+5	; 0x05
     d42:	22 30       	cpi	r18, 0x02	; 2
     d44:	31 05       	cpc	r19, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <GPIO_setupPinDirection+0x5a>
     d48:	67 c0       	rjmp	.+206    	; 0xe18 <GPIO_setupPinDirection+0x128>
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	83 30       	cpi	r24, 0x03	; 3
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_setupPinDirection+0x66>
     d54:	91 c0       	rjmp	.+290    	; 0xe78 <GPIO_setupPinDirection+0x188>
     d56:	be c0       	rjmp	.+380    	; 0xed4 <GPIO_setupPinDirection+0x1e4>
        {
        case PORTA_ID:
            if(PIN_OUTPUT == direction){
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	a1 f4       	brne	.+40     	; 0xd86 <GPIO_setupPinDirection+0x96>
                SET_BIT(DDRA, pin_num);
     d5e:	aa e3       	ldi	r26, 0x3A	; 58
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	ea e3       	ldi	r30, 0x3A	; 58
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <GPIO_setupPinDirection+0x8c>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <GPIO_setupPinDirection+0x88>
     d80:	84 2b       	or	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	a7 c0       	rjmp	.+334    	; 0xed4 <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	88 23       	and	r24, r24
     d8a:	09 f0       	breq	.+2      	; 0xd8e <GPIO_setupPinDirection+0x9e>
     d8c:	a3 c0       	rjmp	.+326    	; 0xed4 <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRA, pin_num);
     d8e:	aa e3       	ldi	r26, 0x3A	; 58
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ea e3       	ldi	r30, 0x3A	; 58
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <GPIO_setupPinDirection+0xbc>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <GPIO_setupPinDirection+0xb8>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	8e c0       	rjmp	.+284    	; 0xed4 <GPIO_setupPinDirection+0x1e4>

            }
            break;
        case PORTB_ID:
            if(PIN_OUTPUT == direction){
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	a1 f4       	brne	.+40     	; 0xde6 <GPIO_setupPinDirection+0xf6>
                SET_BIT(DDRB, pin_num);
     dbe:	a7 e3       	ldi	r26, 0x37	; 55
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e7 e3       	ldi	r30, 0x37	; 55
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <GPIO_setupPinDirection+0xec>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <GPIO_setupPinDirection+0xe8>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	77 c0       	rjmp	.+238    	; 0xed4 <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	88 23       	and	r24, r24
     dea:	09 f0       	breq	.+2      	; 0xdee <GPIO_setupPinDirection+0xfe>
     dec:	73 c0       	rjmp	.+230    	; 0xed4 <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRB, pin_num);
     dee:	a7 e3       	ldi	r26, 0x37	; 55
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e7 e3       	ldi	r30, 0x37	; 55
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <GPIO_setupPinDirection+0x11c>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <GPIO_setupPinDirection+0x118>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	5e c0       	rjmp	.+188    	; 0xed4 <GPIO_setupPinDirection+0x1e4>

            }
            break;
        case PORTC_ID:
            if(PIN_OUTPUT == direction){
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	a1 f4       	brne	.+40     	; 0xe46 <GPIO_setupPinDirection+0x156>
                SET_BIT(DDRC, pin_num);
     e1e:	a4 e3       	ldi	r26, 0x34	; 52
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e4 e3       	ldi	r30, 0x34	; 52
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <GPIO_setupPinDirection+0x14c>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <GPIO_setupPinDirection+0x148>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	88 23       	and	r24, r24
     e4a:	09 f0       	breq	.+2      	; 0xe4e <GPIO_setupPinDirection+0x15e>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRC, pin_num);
     e4e:	a4 e3       	ldi	r26, 0x34	; 52
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e4 e3       	ldi	r30, 0x34	; 52
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <GPIO_setupPinDirection+0x17c>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <GPIO_setupPinDirection+0x178>
     e70:	80 95       	com	r24
     e72:	84 23       	and	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	2e c0       	rjmp	.+92     	; 0xed4 <GPIO_setupPinDirection+0x1e4>


            }
            break;
        case PORTD_ID:
            if(PIN_OUTPUT == direction){
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	a1 f4       	brne	.+40     	; 0xea6 <GPIO_setupPinDirection+0x1b6>
                SET_BIT(DDRD, pin_num);
     e7e:	a1 e3       	ldi	r26, 0x31	; 49
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e1 e3       	ldi	r30, 0x31	; 49
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <GPIO_setupPinDirection+0x1ac>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <GPIO_setupPinDirection+0x1a8>
     ea0:	84 2b       	or	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	17 c0       	rjmp	.+46     	; 0xed4 <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	88 23       	and	r24, r24
     eaa:	a1 f4       	brne	.+40     	; 0xed4 <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRD, pin_num);
     eac:	a1 e3       	ldi	r26, 0x31	; 49
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e1 e3       	ldi	r30, 0x31	; 49
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <GPIO_setupPinDirection+0x1da>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <GPIO_setupPinDirection+0x1d6>
     ece:	80 95       	com	r24
     ed0:	84 23       	and	r24, r20
     ed2:	8c 93       	st	X, r24
            }
            break;

        }
    }
}
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * if pin number or port number ar invalid, function will not handle it
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	00 d0       	rcall	.+0      	; 0xeea <GPIO_writePin+0x6>
     eea:	00 d0       	rcall	.+0      	; 0xeec <GPIO_writePin+0x8>
     eec:	0f 92       	push	r0
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	6a 83       	std	Y+2, r22	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){}
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	85 30       	cpi	r24, 0x05	; 5
     efc:	08 f0       	brcs	.+2      	; 0xf00 <GPIO_writePin+0x1c>
     efe:	e4 c0       	rjmp	.+456    	; 0x10c8 <GPIO_writePin+0x1e4>
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	89 30       	cpi	r24, 0x09	; 9
     f04:	08 f0       	brcs	.+2      	; 0xf08 <GPIO_writePin+0x24>
     f06:	e0 c0       	rjmp	.+448    	; 0x10c8 <GPIO_writePin+0x1e4>
    else{
        switch (port_num)
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	3d 83       	std	Y+5, r19	; 0x05
     f10:	2c 83       	std	Y+4, r18	; 0x04
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	91 05       	cpc	r25, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <GPIO_writePin+0x3a>
     f1c:	47 c0       	rjmp	.+142    	; 0xfac <GPIO_writePin+0xc8>
     f1e:	2c 81       	ldd	r18, Y+4	; 0x04
     f20:	3d 81       	ldd	r19, Y+5	; 0x05
     f22:	22 30       	cpi	r18, 0x02	; 2
     f24:	31 05       	cpc	r19, r1
     f26:	2c f4       	brge	.+10     	; 0xf32 <GPIO_writePin+0x4e>
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	71 f0       	breq	.+28     	; 0xf4c <GPIO_writePin+0x68>
     f30:	cb c0       	rjmp	.+406    	; 0x10c8 <GPIO_writePin+0x1e4>
     f32:	2c 81       	ldd	r18, Y+4	; 0x04
     f34:	3d 81       	ldd	r19, Y+5	; 0x05
     f36:	22 30       	cpi	r18, 0x02	; 2
     f38:	31 05       	cpc	r19, r1
     f3a:	09 f4       	brne	.+2      	; 0xf3e <GPIO_writePin+0x5a>
     f3c:	67 c0       	rjmp	.+206    	; 0x100c <GPIO_writePin+0x128>
     f3e:	8c 81       	ldd	r24, Y+4	; 0x04
     f40:	9d 81       	ldd	r25, Y+5	; 0x05
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	91 05       	cpc	r25, r1
     f46:	09 f4       	brne	.+2      	; 0xf4a <GPIO_writePin+0x66>
     f48:	91 c0       	rjmp	.+290    	; 0x106c <GPIO_writePin+0x188>
     f4a:	be c0       	rjmp	.+380    	; 0x10c8 <GPIO_writePin+0x1e4>
        {
        case PORTA_ID:

            if(LOGIC_HIGH == value){
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	a1 f4       	brne	.+40     	; 0xf7a <GPIO_writePin+0x96>
                SET_BIT(PORTA, pin_num);
     f52:	ab e3       	ldi	r26, 0x3B	; 59
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e3       	ldi	r30, 0x3B	; 59
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	48 2f       	mov	r20, r24
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 2e       	mov	r0, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_writePin+0x8c>
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_writePin+0x88>
     f74:	84 2b       	or	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	a7 c0       	rjmp	.+334    	; 0x10c8 <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	88 23       	and	r24, r24
     f7e:	09 f0       	breq	.+2      	; 0xf82 <GPIO_writePin+0x9e>
     f80:	a3 c0       	rjmp	.+326    	; 0x10c8 <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTA, pin_num);
     f82:	ab e3       	ldi	r26, 0x3B	; 59
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	eb e3       	ldi	r30, 0x3B	; 59
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_writePin+0xbc>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_writePin+0xb8>
     fa4:	80 95       	com	r24
     fa6:	84 23       	and	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	8e c0       	rjmp	.+284    	; 0x10c8 <GPIO_writePin+0x1e4>

            }
            break;
        case PORTB_ID:

            if(LOGIC_HIGH == value){
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	a1 f4       	brne	.+40     	; 0xfda <GPIO_writePin+0xf6>
                SET_BIT(PORTB, pin_num);
     fb2:	a8 e3       	ldi	r26, 0x38	; 56
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e8 e3       	ldi	r30, 0x38	; 56
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_writePin+0xec>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_writePin+0xe8>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	77 c0       	rjmp	.+238    	; 0x10c8 <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	88 23       	and	r24, r24
     fde:	09 f0       	breq	.+2      	; 0xfe2 <GPIO_writePin+0xfe>
     fe0:	73 c0       	rjmp	.+230    	; 0x10c8 <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTB, pin_num);
     fe2:	a8 e3       	ldi	r26, 0x38	; 56
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e8 e3       	ldi	r30, 0x38	; 56
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_writePin+0x11c>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_writePin+0x118>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	5e c0       	rjmp	.+188    	; 0x10c8 <GPIO_writePin+0x1e4>
            }
            break;
        case PORTC_ID:

            if(LOGIC_HIGH == value){
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	a1 f4       	brne	.+40     	; 0x103a <GPIO_writePin+0x156>
                SET_BIT(PORTC, pin_num);
    1012:	a5 e3       	ldi	r26, 0x35	; 53
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e5 e3       	ldi	r30, 0x35	; 53
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <GPIO_writePin+0x14c>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <GPIO_writePin+0x148>
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	47 c0       	rjmp	.+142    	; 0x10c8 <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	88 23       	and	r24, r24
    103e:	09 f0       	breq	.+2      	; 0x1042 <GPIO_writePin+0x15e>
    1040:	43 c0       	rjmp	.+134    	; 0x10c8 <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTC, pin_num);
    1042:	a5 e3       	ldi	r26, 0x35	; 53
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e5 e3       	ldi	r30, 0x35	; 53
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	48 2f       	mov	r20, r24
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 2e       	mov	r0, r18
    105a:	02 c0       	rjmp	.+4      	; 0x1060 <GPIO_writePin+0x17c>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	0a 94       	dec	r0
    1062:	e2 f7       	brpl	.-8      	; 0x105c <GPIO_writePin+0x178>
    1064:	80 95       	com	r24
    1066:	84 23       	and	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	2e c0       	rjmp	.+92     	; 0x10c8 <GPIO_writePin+0x1e4>
            }
            break;
        case PORTD_ID:

            if(LOGIC_HIGH == value){
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	a1 f4       	brne	.+40     	; 0x109a <GPIO_writePin+0x1b6>
                SET_BIT(PORTD, pin_num);
    1072:	a2 e3       	ldi	r26, 0x32	; 50
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e2 e3       	ldi	r30, 0x32	; 50
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	48 2f       	mov	r20, r24
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 2e       	mov	r0, r18
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <GPIO_writePin+0x1ac>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	0a 94       	dec	r0
    1092:	e2 f7       	brpl	.-8      	; 0x108c <GPIO_writePin+0x1a8>
    1094:	84 2b       	or	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	17 c0       	rjmp	.+46     	; 0x10c8 <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 23       	and	r24, r24
    109e:	a1 f4       	brne	.+40     	; 0x10c8 <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTD, pin_num);
    10a0:	a2 e3       	ldi	r26, 0x32	; 50
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e2 e3       	ldi	r30, 0x32	; 50
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	48 2f       	mov	r20, r24
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	02 2e       	mov	r0, r18
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <GPIO_writePin+0x1da>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <GPIO_writePin+0x1d6>
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	8c 93       	st	X, r24
            }
            break;
        }
    }    
    
}
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	cf 91       	pop	r28
    10d4:	df 91       	pop	r29
    10d6:	08 95       	ret

000010d8 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    10d8:	df 93       	push	r29
    10da:	cf 93       	push	r28
    10dc:	00 d0       	rcall	.+0      	; 0x10de <GPIO_readPin+0x6>
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <GPIO_readPin+0x8>
    10e0:	0f 92       	push	r0
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){}
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	85 30       	cpi	r24, 0x05	; 5
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <GPIO_readPin+0x1a>
    10f0:	85 c0       	rjmp	.+266    	; 0x11fc <GPIO_readPin+0x124>
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	89 30       	cpi	r24, 0x09	; 9
    10f6:	08 f0       	brcs	.+2      	; 0x10fa <GPIO_readPin+0x22>
    10f8:	81 c0       	rjmp	.+258    	; 0x11fc <GPIO_readPin+0x124>
    else{
        switch (port_num)
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3d 83       	std	Y+5, r19	; 0x05
    1102:	2c 83       	std	Y+4, r18	; 0x04
    1104:	4c 81       	ldd	r20, Y+4	; 0x04
    1106:	5d 81       	ldd	r21, Y+5	; 0x05
    1108:	41 30       	cpi	r20, 0x01	; 1
    110a:	51 05       	cpc	r21, r1
    110c:	79 f1       	breq	.+94     	; 0x116c <GPIO_readPin+0x94>
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	9d 81       	ldd	r25, Y+5	; 0x05
    1112:	82 30       	cpi	r24, 0x02	; 2
    1114:	91 05       	cpc	r25, r1
    1116:	34 f4       	brge	.+12     	; 0x1124 <GPIO_readPin+0x4c>
    1118:	2c 81       	ldd	r18, Y+4	; 0x04
    111a:	3d 81       	ldd	r19, Y+5	; 0x05
    111c:	21 15       	cp	r18, r1
    111e:	31 05       	cpc	r19, r1
    1120:	69 f0       	breq	.+26     	; 0x113c <GPIO_readPin+0x64>
    1122:	6c c0       	rjmp	.+216    	; 0x11fc <GPIO_readPin+0x124>
    1124:	4c 81       	ldd	r20, Y+4	; 0x04
    1126:	5d 81       	ldd	r21, Y+5	; 0x05
    1128:	42 30       	cpi	r20, 0x02	; 2
    112a:	51 05       	cpc	r21, r1
    112c:	b9 f1       	breq	.+110    	; 0x119c <GPIO_readPin+0xc4>
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	9d 81       	ldd	r25, Y+5	; 0x05
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	91 05       	cpc	r25, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <GPIO_readPin+0x62>
    1138:	49 c0       	rjmp	.+146    	; 0x11cc <GPIO_readPin+0xf4>
    113a:	60 c0       	rjmp	.+192    	; 0x11fc <GPIO_readPin+0x124>
        {
        case PORTA_ID:

            if(BIT_IS_SET(PINA, pin_num)){
    113c:	e9 e3       	ldi	r30, 0x39	; 57
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a9 01       	movw	r20, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <GPIO_readPin+0x7c>
    1150:	55 95       	asr	r21
    1152:	47 95       	ror	r20
    1154:	8a 95       	dec	r24
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <GPIO_readPin+0x78>
    1158:	ca 01       	movw	r24, r20
    115a:	81 70       	andi	r24, 0x01	; 1
    115c:	90 70       	andi	r25, 0x00	; 0
    115e:	88 23       	and	r24, r24
    1160:	19 f0       	breq	.+6      	; 0x1168 <GPIO_readPin+0x90>
                return 1;
    1162:	51 e0       	ldi	r21, 0x01	; 1
    1164:	5b 83       	std	Y+3, r21	; 0x03
    1166:	4b c0       	rjmp	.+150    	; 0x11fe <GPIO_readPin+0x126>
            }
            else{
                return 0;
    1168:	1b 82       	std	Y+3, r1	; 0x03
    116a:	49 c0       	rjmp	.+146    	; 0x11fe <GPIO_readPin+0x126>

            }
            break;
        case PORTB_ID:

            if(BIT_IS_SET(PINB, pin_num)){
    116c:	e6 e3       	ldi	r30, 0x36	; 54
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	a9 01       	movw	r20, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <GPIO_readPin+0xac>
    1180:	55 95       	asr	r21
    1182:	47 95       	ror	r20
    1184:	8a 95       	dec	r24
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <GPIO_readPin+0xa8>
    1188:	ca 01       	movw	r24, r20
    118a:	81 70       	andi	r24, 0x01	; 1
    118c:	90 70       	andi	r25, 0x00	; 0
    118e:	88 23       	and	r24, r24
    1190:	19 f0       	breq	.+6      	; 0x1198 <GPIO_readPin+0xc0>
                return 1;
    1192:	51 e0       	ldi	r21, 0x01	; 1
    1194:	5b 83       	std	Y+3, r21	; 0x03
    1196:	33 c0       	rjmp	.+102    	; 0x11fe <GPIO_readPin+0x126>
            }
            else{
                return 0;
    1198:	1b 82       	std	Y+3, r1	; 0x03
    119a:	31 c0       	rjmp	.+98     	; 0x11fe <GPIO_readPin+0x126>
            }
            break;
        case PORTC_ID:

            if(BIT_IS_SET(PINC, pin_num)){
    119c:	e3 e3       	ldi	r30, 0x33	; 51
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	a9 01       	movw	r20, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <GPIO_readPin+0xdc>
    11b0:	55 95       	asr	r21
    11b2:	47 95       	ror	r20
    11b4:	8a 95       	dec	r24
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <GPIO_readPin+0xd8>
    11b8:	ca 01       	movw	r24, r20
    11ba:	81 70       	andi	r24, 0x01	; 1
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	88 23       	and	r24, r24
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <GPIO_readPin+0xf0>
                return 1;
    11c2:	51 e0       	ldi	r21, 0x01	; 1
    11c4:	5b 83       	std	Y+3, r21	; 0x03
    11c6:	1b c0       	rjmp	.+54     	; 0x11fe <GPIO_readPin+0x126>
            }
            else{
                return 0;
    11c8:	1b 82       	std	Y+3, r1	; 0x03
    11ca:	19 c0       	rjmp	.+50     	; 0x11fe <GPIO_readPin+0x126>
            }
            break;
        case PORTD_ID:

            if(BIT_IS_SET(PIND, pin_num)){
    11cc:	e0 e3       	ldi	r30, 0x30	; 48
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <GPIO_readPin+0x10c>
    11e0:	55 95       	asr	r21
    11e2:	47 95       	ror	r20
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <GPIO_readPin+0x108>
    11e8:	ca 01       	movw	r24, r20
    11ea:	81 70       	andi	r24, 0x01	; 1
    11ec:	90 70       	andi	r25, 0x00	; 0
    11ee:	88 23       	and	r24, r24
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <GPIO_readPin+0x120>
                return 1;
    11f2:	51 e0       	ldi	r21, 0x01	; 1
    11f4:	5b 83       	std	Y+3, r21	; 0x03
    11f6:	03 c0       	rjmp	.+6      	; 0x11fe <GPIO_readPin+0x126>
            }
            else{
                return 0;
    11f8:	1b 82       	std	Y+3, r1	; 0x03
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <GPIO_readPin+0x126>
            }
            break;
        }
    }
    return '\0';
    11fc:	1b 82       	std	Y+3, r1	; 0x03
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * PORT_INPUT = 0x00, PORT_OUTPUT = 0xFF
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <GPIO_setupPortDirection+0x6>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <GPIO_setupPortDirection+0x8>
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	89 83       	std	Y+1, r24	; 0x01
    121e:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS){}
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	85 30       	cpi	r24, 0x05	; 5
    1224:	90 f5       	brcc	.+100    	; 0x128a <GPIO_setupPortDirection+0x7a>
    else{
        switch (port_num)
    1226:	89 81       	ldd	r24, Y+1	; 0x01
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	3c 83       	std	Y+4, r19	; 0x04
    122e:	2b 83       	std	Y+3, r18	; 0x03
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	91 05       	cpc	r25, r1
    1238:	d1 f0       	breq	.+52     	; 0x126e <GPIO_setupPortDirection+0x5e>
    123a:	2b 81       	ldd	r18, Y+3	; 0x03
    123c:	3c 81       	ldd	r19, Y+4	; 0x04
    123e:	22 30       	cpi	r18, 0x02	; 2
    1240:	31 05       	cpc	r19, r1
    1242:	2c f4       	brge	.+10     	; 0x124e <GPIO_setupPortDirection+0x3e>
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	61 f0       	breq	.+24     	; 0x1264 <GPIO_setupPortDirection+0x54>
    124c:	1e c0       	rjmp	.+60     	; 0x128a <GPIO_setupPortDirection+0x7a>
    124e:	2b 81       	ldd	r18, Y+3	; 0x03
    1250:	3c 81       	ldd	r19, Y+4	; 0x04
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	81 f0       	breq	.+32     	; 0x1278 <GPIO_setupPortDirection+0x68>
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	83 30       	cpi	r24, 0x03	; 3
    125e:	91 05       	cpc	r25, r1
    1260:	81 f0       	breq	.+32     	; 0x1282 <GPIO_setupPortDirection+0x72>
    1262:	13 c0       	rjmp	.+38     	; 0x128a <GPIO_setupPortDirection+0x7a>
        {
        case PORTA_ID:
            DDRA = direction;
    1264:	ea e3       	ldi	r30, 0x3A	; 58
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	80 83       	st	Z, r24
    126c:	0e c0       	rjmp	.+28     	; 0x128a <GPIO_setupPortDirection+0x7a>
            break;
        case PORTB_ID:
            DDRB = direction;
    126e:	e7 e3       	ldi	r30, 0x37	; 55
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	80 83       	st	Z, r24
    1276:	09 c0       	rjmp	.+18     	; 0x128a <GPIO_setupPortDirection+0x7a>
            break;
        case PORTC_ID:
            DDRC = direction;
    1278:	e4 e3       	ldi	r30, 0x34	; 52
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	80 83       	st	Z, r24
    1280:	04 c0       	rjmp	.+8      	; 0x128a <GPIO_setupPortDirection+0x7a>
            break;
        case PORTD_ID:
            DDRD = direction;
    1282:	e1 e3       	ldi	r30, 0x31	; 49
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 83       	st	Z, r24
            break;
        }
    }
}
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value){
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <GPIO_writePort+0x6>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <GPIO_writePort+0x8>
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS){}
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	85 30       	cpi	r24, 0x05	; 5
    12ac:	90 f5       	brcc	.+100    	; 0x1312 <GPIO_writePort+0x7a>
    else{
        switch (port_num)
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3c 83       	std	Y+4, r19	; 0x04
    12b6:	2b 83       	std	Y+3, r18	; 0x03
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	81 30       	cpi	r24, 0x01	; 1
    12be:	91 05       	cpc	r25, r1
    12c0:	d1 f0       	breq	.+52     	; 0x12f6 <GPIO_writePort+0x5e>
    12c2:	2b 81       	ldd	r18, Y+3	; 0x03
    12c4:	3c 81       	ldd	r19, Y+4	; 0x04
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	2c f4       	brge	.+10     	; 0x12d6 <GPIO_writePort+0x3e>
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	61 f0       	breq	.+24     	; 0x12ec <GPIO_writePort+0x54>
    12d4:	1e c0       	rjmp	.+60     	; 0x1312 <GPIO_writePort+0x7a>
    12d6:	2b 81       	ldd	r18, Y+3	; 0x03
    12d8:	3c 81       	ldd	r19, Y+4	; 0x04
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	81 f0       	breq	.+32     	; 0x1300 <GPIO_writePort+0x68>
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	83 30       	cpi	r24, 0x03	; 3
    12e6:	91 05       	cpc	r25, r1
    12e8:	81 f0       	breq	.+32     	; 0x130a <GPIO_writePort+0x72>
    12ea:	13 c0       	rjmp	.+38     	; 0x1312 <GPIO_writePort+0x7a>
        {
        case PORTA_ID:
            PORTA = value;
    12ec:	eb e3       	ldi	r30, 0x3B	; 59
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	80 83       	st	Z, r24
    12f4:	0e c0       	rjmp	.+28     	; 0x1312 <GPIO_writePort+0x7a>
            break;
        case PORTB_ID:
            PORTB = value;
    12f6:	e8 e3       	ldi	r30, 0x38	; 56
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	80 83       	st	Z, r24
    12fe:	09 c0       	rjmp	.+18     	; 0x1312 <GPIO_writePort+0x7a>
            break;
        case PORTC_ID:
            PORTC = value;
    1300:	e5 e3       	ldi	r30, 0x35	; 53
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	80 83       	st	Z, r24
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <GPIO_writePort+0x7a>
            break;
        case PORTD_ID:
            PORTD = value;
    130a:	e2 e3       	ldi	r30, 0x32	; 50
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	80 83       	st	Z, r24
            break;
        }
    }

}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <GPIO_readPort+0x6>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <GPIO_readPort+0x8>
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	89 83       	std	Y+1, r24	; 0x01
    if(port_num>NUM_OF_PORTS){
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	85 30       	cpi	r24, 0x05	; 5
    1332:	98 f5       	brcc	.+102    	; 0x139a <GPIO_readPort+0x7a>
    }
    else{
        switch (port_num)
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3c 83       	std	Y+4, r19	; 0x04
    133c:	2b 83       	std	Y+3, r18	; 0x03
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	91 05       	cpc	r25, r1
    1346:	d1 f0       	breq	.+52     	; 0x137c <GPIO_readPort+0x5c>
    1348:	2b 81       	ldd	r18, Y+3	; 0x03
    134a:	3c 81       	ldd	r19, Y+4	; 0x04
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	2c f4       	brge	.+10     	; 0x135c <GPIO_readPort+0x3c>
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	61 f0       	breq	.+24     	; 0x1372 <GPIO_readPort+0x52>
    135a:	1f c0       	rjmp	.+62     	; 0x139a <GPIO_readPort+0x7a>
    135c:	2b 81       	ldd	r18, Y+3	; 0x03
    135e:	3c 81       	ldd	r19, Y+4	; 0x04
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	81 f0       	breq	.+32     	; 0x1386 <GPIO_readPort+0x66>
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	91 05       	cpc	r25, r1
    136e:	81 f0       	breq	.+32     	; 0x1390 <GPIO_readPort+0x70>
    1370:	14 c0       	rjmp	.+40     	; 0x139a <GPIO_readPort+0x7a>
        {
        case PORTA_ID:
            return PINA;
    1372:	e9 e3       	ldi	r30, 0x39	; 57
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	90 81       	ld	r25, Z
    1378:	9a 83       	std	Y+2, r25	; 0x02
    137a:	10 c0       	rjmp	.+32     	; 0x139c <GPIO_readPort+0x7c>
            break;
        case PORTB_ID:
            return PINB;
    137c:	e6 e3       	ldi	r30, 0x36	; 54
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	20 81       	ld	r18, Z
    1382:	2a 83       	std	Y+2, r18	; 0x02
    1384:	0b c0       	rjmp	.+22     	; 0x139c <GPIO_readPort+0x7c>
            break;
        case PORTC_ID:
            return PINC;
    1386:	e3 e3       	ldi	r30, 0x33	; 51
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	30 81       	ld	r19, Z
    138c:	3a 83       	std	Y+2, r19	; 0x02
    138e:	06 c0       	rjmp	.+12     	; 0x139c <GPIO_readPort+0x7c>
            break;
        case PORTD_ID:
            return PIND;
    1390:	e0 e3       	ldi	r30, 0x30	; 48
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8a 83       	std	Y+2, r24	; 0x02
    1398:	01 c0       	rjmp	.+2      	; 0x139c <GPIO_readPort+0x7c>
            break;
        }
    }
    return '\0';
    139a:	1a 82       	std	Y+2, r1	; 0x02
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <main>:
uint8 g_timer0_ticks = 0;



int main(void)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	e8 97       	sbiw	r28, 0x38	; 56
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
	 * receivedByte     -> variable to hold byte that received from master throw UART
	 * userInput		-> variable to get user input + or -
	 * passwordCounter	-> variable to store numbers of wrong entered
	 *
	 */
	uint8 password[PASSCODE_SIZE] = {'\0'};
    13c0:	86 e0       	ldi	r24, 0x06	; 6
    13c2:	fe 01       	movw	r30, r28
    13c4:	b0 96       	adiw	r30, 0x20	; 32
    13c6:	df 01       	movw	r26, r30
    13c8:	28 2f       	mov	r18, r24
    13ca:	1d 92       	st	X+, r1
    13cc:	2a 95       	dec	r18
    13ce:	e9 f7       	brne	.-6      	; 0x13ca <main+0x1e>
	uint8 confirmPassword[PASSCODE_SIZE] = {'\0'};
    13d0:	86 e0       	ldi	r24, 0x06	; 6
    13d2:	fe 01       	movw	r30, r28
    13d4:	b6 96       	adiw	r30, 0x26	; 38
    13d6:	df 01       	movw	r26, r30
    13d8:	28 2f       	mov	r18, r24
    13da:	1d 92       	st	X+, r1
    13dc:	2a 95       	dec	r18
    13de:	e9 f7       	brne	.-6      	; 0x13da <main+0x2e>
	uint8 receivedByte = DUMMY_CHAR;
    13e0:	84 e4       	ldi	r24, 0x44	; 68
    13e2:	8f 8f       	std	Y+31, r24	; 0x1f
	uint8 userInput = DUMMY_CHAR;
    13e4:	84 e4       	ldi	r24, 0x44	; 68
    13e6:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 passwordCounter = 0;
    13e8:	1d 8e       	std	Y+29, r1	; 0x1d

	/*initialize the LCD*/
	LCD_init();
    13ea:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <LCD_init>
	/*initialize UART with baud rate 9600*/
	UART_init(9600);
    13ee:	60 e8       	ldi	r22, 0x80	; 128
    13f0:	75 e2       	ldi	r23, 0x25	; 37
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <UART_init>
	/*initialize buzzer*/
	BUZZER_INIT();
    13fa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <BUZZER_INIT>

	/*send check setting status command*/
	UART_sendByte(CHECK_PASSWORD_SETTING);
    13fe:	83 e5       	ldi	r24, 0x53	; 83
    1400:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_sendByte>

	/*enable i-bit*/
	SREG |= (1<<7);
    1404:	af e5       	ldi	r26, 0x5F	; 95
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ef e5       	ldi	r30, 0x5F	; 95
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	80 68       	ori	r24, 0x80	; 128
    1410:	8c 93       	st	X, r24
	/*Configuration structure for timer0 CTC mode*/
	TIMERS_ConfigType timer0_overflow_config = {F_CPU_1024, OVERFLOW_MODE, 5, NO_COMP_VALUE};
    1412:	ce 01       	movw	r24, r28
    1414:	8c 96       	adiw	r24, 0x2c	; 44
    1416:	9d ab       	std	Y+53, r25	; 0x35
    1418:	8c ab       	std	Y+52, r24	; 0x34
    141a:	a0 e0       	ldi	r26, 0x00	; 0
    141c:	b1 e0       	ldi	r27, 0x01	; 1
    141e:	bf ab       	std	Y+55, r27	; 0x37
    1420:	ae ab       	std	Y+54, r26	; 0x36
    1422:	b6 e0       	ldi	r27, 0x06	; 6
    1424:	b8 af       	std	Y+56, r27	; 0x38
    1426:	ee a9       	ldd	r30, Y+54	; 0x36
    1428:	ff a9       	ldd	r31, Y+55	; 0x37
    142a:	00 80       	ld	r0, Z
    142c:	2e a9       	ldd	r18, Y+54	; 0x36
    142e:	3f a9       	ldd	r19, Y+55	; 0x37
    1430:	2f 5f       	subi	r18, 0xFF	; 255
    1432:	3f 4f       	sbci	r19, 0xFF	; 255
    1434:	3f ab       	std	Y+55, r19	; 0x37
    1436:	2e ab       	std	Y+54, r18	; 0x36
    1438:	ac a9       	ldd	r26, Y+52	; 0x34
    143a:	bd a9       	ldd	r27, Y+53	; 0x35
    143c:	0c 92       	st	X, r0
    143e:	ec a9       	ldd	r30, Y+52	; 0x34
    1440:	fd a9       	ldd	r31, Y+53	; 0x35
    1442:	31 96       	adiw	r30, 0x01	; 1
    1444:	fd ab       	std	Y+53, r31	; 0x35
    1446:	ec ab       	std	Y+52, r30	; 0x34
    1448:	f8 ad       	ldd	r31, Y+56	; 0x38
    144a:	f1 50       	subi	r31, 0x01	; 1
    144c:	f8 af       	std	Y+56, r31	; 0x38
    144e:	28 ad       	ldd	r18, Y+56	; 0x38
    1450:	22 23       	and	r18, r18
    1452:	49 f7       	brne	.-46     	; 0x1426 <main+0x7a>
	/*initialize timer */
	TIMERS_init(&timer0_overflow_config, TIMER0_ID);
    1454:	ce 01       	movw	r24, r28
    1456:	8c 96       	adiw	r24, 0x2c	; 44
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	0e 94 45 14 	call	0x288a	; 0x288a <TIMERS_init>
	/*set call back function for timer0*/
	TIMERS_setCallBack(timer0_handler, TIMER0_ID);
    145e:	89 ea       	ldi	r24, 0xA9	; 169
    1460:	9d e0       	ldi	r25, 0x0D	; 13
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	0e 94 a2 14 	call	0x2944	; 0x2944 <TIMERS_setCallBack>

	/*receive if password set or not*/
	receivedByte = UART_recieveByte();
    1468:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_recieveByte>
    146c:	8f 8f       	std	Y+31, r24	; 0x1f
	/*if not set then, set password*/
	if(receivedByte == PASSWORD_NOT_SET)
    146e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1470:	8e 34       	cpi	r24, 0x4E	; 78
    1472:	49 f5       	brne	.+82     	; 0x14c6 <main+0x11a>
	{
		/*repeat entering password until user enter 2 identical passwords*/
		receivedByte = PASSWORD_NOT_IDENTICAL;
    1474:	88 e2       	ldi	r24, 0x28	; 40
    1476:	8f 8f       	std	Y+31, r24	; 0x1f

		do{
			/*********************setting password*********************/
			/*enter password by user and store it in an array*/
			enter_passcode(password);
    1478:	ce 01       	movw	r24, r28
    147a:	80 96       	adiw	r24, 0x20	; 32
    147c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <enter_passcode>
			/*confirm password by user and store it in an array*/
			enter_passcode(confirmPassword);
    1480:	ce 01       	movw	r24, r28
    1482:	86 96       	adiw	r24, 0x26	; 38
    1484:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <enter_passcode>
			/******* SEND passwords to control ECU *******/
			/*send set password command to control ECU*/
			UART_sendByte(SET_PASSWORD);
    1488:	8d e2       	ldi	r24, 0x2D	; 45
    148a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_sendByte>
			/***wait to control ECU to be ready***/
			while(!(UART_recieveByte() == EUC2_READY));
    148e:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_recieveByte>
    1492:	80 34       	cpi	r24, 0x40	; 64
    1494:	e1 f7       	brne	.-8      	; 0x148e <main+0xe2>
			/*send password to control ECU*/
			send_password_to_control_ECU(password);
    1496:	ce 01       	movw	r24, r28
    1498:	80 96       	adiw	r24, 0x20	; 32
    149a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <send_password_to_control_ECU>
			/***wait to control ECU to be ready***/
			while(!(UART_recieveByte() == EUC2_READY));
    149e:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_recieveByte>
    14a2:	80 34       	cpi	r24, 0x40	; 64
    14a4:	e1 f7       	brne	.-8      	; 0x149e <main+0xf2>
			/*send password to control ECU*/
			send_password_to_control_ECU(confirmPassword);
    14a6:	ce 01       	movw	r24, r28
    14a8:	86 96       	adiw	r24, 0x26	; 38
    14aa:	0e 94 a8 0c 	call	0x1950	; 0x1950 <send_password_to_control_ECU>
			receivedByte = UART_recieveByte();
    14ae:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_recieveByte>
    14b2:	8f 8f       	std	Y+31, r24	; 0x1f
#ifdef TESTING_PAHSE
			LCD_clearScreen();
    14b4:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_clearScreen>
			LCD_displayString("PASSWORD NOT IDENTICAL!");
    14b8:	80 e6       	ldi	r24, 0x60	; 96
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>
#endif
		}
		while(receivedByte == PASSWORD_NOT_IDENTICAL);
    14c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14c2:	88 32       	cpi	r24, 0x28	; 40
    14c4:	c9 f2       	breq	.-78     	; 0x1478 <main+0xcc>
	}
#ifdef TESTING_PAHSE
	LCD_clearScreen();
    14c6:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_clearScreen>
	LCD_displayString("hello visitor!");
    14ca:	88 e7       	ldi	r24, 0x78	; 120
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>


	while(1)
	{
		/*clear receivedByte variable*/
		receivedByte = DUMMY_CHAR;
    14d2:	84 e4       	ldi	r24, 0x44	; 68
    14d4:	8f 8f       	std	Y+31, r24	; 0x1f
		 * check the password
		 * count wrong entered password
		 * serve the user if correct password was entered
		 * **** the user if wrong password was entered
		 */
		LCD_clearScreen();
    14d6:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_clearScreen>
		LCD_displayString("+Open Door");
    14da:	87 e8       	ldi	r24, 0x87	; 135
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>
		LCD_moveCursor(1, 0);
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_moveCursor>
		LCD_displayString("-Change Password");
    14ea:	82 e9       	ldi	r24, 0x92	; 146
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>
		/*get user input using
		 *KEYPAD_getPressedKey() function containing a tight polling
		 */
		userInput = KEYPAD_getPressedKey();
    14f2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <KEYPAD_getPressedKey>
    14f6:	8e 8f       	std	Y+30, r24	; 0x1e

		/************************* serve user request ******************************/
		if(userInput == OPEN_DOOR || userInput == SET_PASSWORD)
    14f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14fa:	8b 32       	cpi	r24, 0x2B	; 43
    14fc:	09 f4       	brne	.+2      	; 0x1500 <main+0x154>
    14fe:	4d c1       	rjmp	.+666    	; 0x179a <main+0x3ee>
    1500:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1502:	8d 32       	cpi	r24, 0x2D	; 45
    1504:	09 f0       	breq	.+2      	; 0x1508 <main+0x15c>
    1506:	4d c1       	rjmp	.+666    	; 0x17a2 <main+0x3f6>
    1508:	48 c1       	rjmp	.+656    	; 0x179a <main+0x3ee>
		{
			while(passwordCounter < 3)
			{
				/*enter password by user and store it in an array*/
				enter_passcode(password);
    150a:	ce 01       	movw	r24, r28
    150c:	80 96       	adiw	r24, 0x20	; 32
    150e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <enter_passcode>
				UART_sendByte(CHECK_PASSWORD_MATCH);
    1512:	8d e4       	ldi	r24, 0x4D	; 77
    1514:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_sendByte>
				/***wait to control ECU to be ready***/
				while(!(UART_recieveByte() == EUC2_READY));
    1518:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_recieveByte>
    151c:	80 34       	cpi	r24, 0x40	; 64
    151e:	e1 f7       	brne	.-8      	; 0x1518 <main+0x16c>
				/*send password to control ECU*/
				send_password_to_control_ECU(password);
    1520:	ce 01       	movw	r24, r28
    1522:	80 96       	adiw	r24, 0x20	; 32
    1524:	0e 94 a8 0c 	call	0x1950	; 0x1950 <send_password_to_control_ECU>
				/*receive byte */
				receivedByte = UART_recieveByte();
    1528:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_recieveByte>
    152c:	8f 8f       	std	Y+31, r24	; 0x1f
				/*if password match serve the user*/
				if(receivedByte == PASSWORD_MATCH)
    152e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1530:	89 37       	cpi	r24, 0x79	; 121
    1532:	09 f0       	breq	.+2      	; 0x1536 <main+0x18a>
    1534:	2f c1       	rjmp	.+606    	; 0x1794 <main+0x3e8>
				{

					switch(userInput)
    1536:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1538:	a8 2f       	mov	r26, r24
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	bb ab       	std	Y+51, r27	; 0x33
    153e:	aa ab       	std	Y+50, r26	; 0x32
    1540:	ea a9       	ldd	r30, Y+50	; 0x32
    1542:	fb a9       	ldd	r31, Y+51	; 0x33
    1544:	eb 32       	cpi	r30, 0x2B	; 43
    1546:	f1 05       	cpc	r31, r1
    1548:	39 f0       	breq	.+14     	; 0x1558 <main+0x1ac>
    154a:	2a a9       	ldd	r18, Y+50	; 0x32
    154c:	3b a9       	ldd	r19, Y+51	; 0x33
    154e:	2d 32       	cpi	r18, 0x2D	; 45
    1550:	31 05       	cpc	r19, r1
    1552:	09 f4       	brne	.+2      	; 0x1556 <main+0x1aa>
    1554:	7d c0       	rjmp	.+250    	; 0x1650 <main+0x2a4>
    1556:	25 c1       	rjmp	.+586    	; 0x17a2 <main+0x3f6>
					{
					case OPEN_DOOR:
						/*send open_door command throw UART*/
						UART_sendByte(OPEN_DOOR);
    1558:	8b e2       	ldi	r24, 0x2B	; 43
    155a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_sendByte>
						LCD_clearScreen();
    155e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_clearScreen>
						LCD_displayString("Opening the door");
    1562:	83 ea       	ldi	r24, 0xA3	; 163
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	98 ec       	ldi	r25, 0xC8	; 200
    156e:	af ea       	ldi	r26, 0xAF	; 175
    1570:	b7 e4       	ldi	r27, 0x47	; 71
    1572:	89 8f       	std	Y+25, r24	; 0x19
    1574:	9a 8f       	std	Y+26, r25	; 0x1a
    1576:	ab 8f       	std	Y+27, r26	; 0x1b
    1578:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    157a:	69 8d       	ldd	r22, Y+25	; 0x19
    157c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    157e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1580:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	4a e7       	ldi	r20, 0x7A	; 122
    1588:	53 e4       	ldi	r21, 0x43	; 67
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	8d 8b       	std	Y+21, r24	; 0x15
    1594:	9e 8b       	std	Y+22, r25	; 0x16
    1596:	af 8b       	std	Y+23, r26	; 0x17
    1598:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    159a:	6d 89       	ldd	r22, Y+21	; 0x15
    159c:	7e 89       	ldd	r23, Y+22	; 0x16
    159e:	8f 89       	ldd	r24, Y+23	; 0x17
    15a0:	98 8d       	ldd	r25, Y+24	; 0x18
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e8       	ldi	r20, 0x80	; 128
    15a8:	5f e3       	ldi	r21, 0x3F	; 63
    15aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15ae:	88 23       	and	r24, r24
    15b0:	2c f4       	brge	.+10     	; 0x15bc <main+0x210>
		__ticks = 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9c 8b       	std	Y+20, r25	; 0x14
    15b8:	8b 8b       	std	Y+19, r24	; 0x13
    15ba:	3f c0       	rjmp	.+126    	; 0x163a <main+0x28e>
	else if (__tmp > 65535)
    15bc:	6d 89       	ldd	r22, Y+21	; 0x15
    15be:	7e 89       	ldd	r23, Y+22	; 0x16
    15c0:	8f 89       	ldd	r24, Y+23	; 0x17
    15c2:	98 8d       	ldd	r25, Y+24	; 0x18
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f e7       	ldi	r20, 0x7F	; 127
    15ca:	57 e4       	ldi	r21, 0x47	; 71
    15cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15d0:	18 16       	cp	r1, r24
    15d2:	4c f5       	brge	.+82     	; 0x1626 <main+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d4:	69 8d       	ldd	r22, Y+25	; 0x19
    15d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	51 e4       	ldi	r21, 0x41	; 65
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9c 8b       	std	Y+20, r25	; 0x14
    15fa:	8b 8b       	std	Y+19, r24	; 0x13
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <main+0x270>
    15fe:	89 e1       	ldi	r24, 0x19	; 25
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9a 8b       	std	Y+18, r25	; 0x12
    1604:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1606:	89 89       	ldd	r24, Y+17	; 0x11
    1608:	9a 89       	ldd	r25, Y+18	; 0x12
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <main+0x25e>
    160e:	9a 8b       	std	Y+18, r25	; 0x12
    1610:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	8b 89       	ldd	r24, Y+19	; 0x13
    1614:	9c 89       	ldd	r25, Y+20	; 0x14
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	9c 8b       	std	Y+20, r25	; 0x14
    161a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	8b 89       	ldd	r24, Y+19	; 0x13
    161e:	9c 89       	ldd	r25, Y+20	; 0x14
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	69 f7       	brne	.-38     	; 0x15fe <main+0x252>
    1624:	be c0       	rjmp	.+380    	; 0x17a2 <main+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	6d 89       	ldd	r22, Y+21	; 0x15
    1628:	7e 89       	ldd	r23, Y+22	; 0x16
    162a:	8f 89       	ldd	r24, Y+23	; 0x17
    162c:	98 8d       	ldd	r25, Y+24	; 0x18
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9c 8b       	std	Y+20, r25	; 0x14
    1638:	8b 8b       	std	Y+19, r24	; 0x13
    163a:	8b 89       	ldd	r24, Y+19	; 0x13
    163c:	9c 89       	ldd	r25, Y+20	; 0x14
    163e:	98 8b       	std	Y+16, r25	; 0x10
    1640:	8f 87       	std	Y+15, r24	; 0x0f
    1642:	8f 85       	ldd	r24, Y+15	; 0x0f
    1644:	98 89       	ldd	r25, Y+16	; 0x10
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <main+0x29a>
    164a:	98 8b       	std	Y+16, r25	; 0x10
    164c:	8f 87       	std	Y+15, r24	; 0x0f
    164e:	a9 c0       	rjmp	.+338    	; 0x17a2 <main+0x3f6>
						_delay_ms(90000);
						break;
					case SET_PASSWORD:
						/*dispaly setup new pass*/
						LCD_clearScreen();
    1650:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_clearScreen>
						LCD_displayString("Set new pass");
    1654:	84 eb       	ldi	r24, 0xB4	; 180
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a8 e4       	ldi	r26, 0x48	; 72
    1662:	b2 e4       	ldi	r27, 0x42	; 66
    1664:	8b 87       	std	Y+11, r24	; 0x0b
    1666:	9c 87       	std	Y+12, r25	; 0x0c
    1668:	ad 87       	std	Y+13, r26	; 0x0d
    166a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166c:	6b 85       	ldd	r22, Y+11	; 0x0b
    166e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1670:	8d 85       	ldd	r24, Y+13	; 0x0d
    1672:	9e 85       	ldd	r25, Y+14	; 0x0e
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	4a e7       	ldi	r20, 0x7A	; 122
    167a:	53 e4       	ldi	r21, 0x43	; 67
    167c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	8f 83       	std	Y+7, r24	; 0x07
    1686:	98 87       	std	Y+8, r25	; 0x08
    1688:	a9 87       	std	Y+9, r26	; 0x09
    168a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    168c:	6f 81       	ldd	r22, Y+7	; 0x07
    168e:	78 85       	ldd	r23, Y+8	; 0x08
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e8       	ldi	r20, 0x80	; 128
    169a:	5f e3       	ldi	r21, 0x3F	; 63
    169c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	2c f4       	brge	.+10     	; 0x16ae <main+0x302>
		__ticks = 1;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	9e 83       	std	Y+6, r25	; 0x06
    16aa:	8d 83       	std	Y+5, r24	; 0x05
    16ac:	3f c0       	rjmp	.+126    	; 0x172c <main+0x380>
	else if (__tmp > 65535)
    16ae:	6f 81       	ldd	r22, Y+7	; 0x07
    16b0:	78 85       	ldd	r23, Y+8	; 0x08
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	3f ef       	ldi	r19, 0xFF	; 255
    16ba:	4f e7       	ldi	r20, 0x7F	; 127
    16bc:	57 e4       	ldi	r21, 0x47	; 71
    16be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16c2:	18 16       	cp	r1, r24
    16c4:	4c f5       	brge	.+82     	; 0x1718 <main+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    16cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e2       	ldi	r20, 0x20	; 32
    16d4:	51 e4       	ldi	r21, 0x41	; 65
    16d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	bc 01       	movw	r22, r24
    16e0:	cd 01       	movw	r24, r26
    16e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	0f c0       	rjmp	.+30     	; 0x170e <main+0x362>
    16f0:	89 e1       	ldi	r24, 0x19	; 25
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9c 83       	std	Y+4, r25	; 0x04
    16f6:	8b 83       	std	Y+3, r24	; 0x03
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	9c 81       	ldd	r25, Y+4	; 0x04
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <main+0x350>
    1700:	9c 83       	std	Y+4, r25	; 0x04
    1702:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1704:	8d 81       	ldd	r24, Y+5	; 0x05
    1706:	9e 81       	ldd	r25, Y+6	; 0x06
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	9e 83       	std	Y+6, r25	; 0x06
    170c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	69 f7       	brne	.-38     	; 0x16f0 <main+0x344>
    1716:	14 c0       	rjmp	.+40     	; 0x1740 <main+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1718:	6f 81       	ldd	r22, Y+7	; 0x07
    171a:	78 85       	ldd	r23, Y+8	; 0x08
    171c:	89 85       	ldd	r24, Y+9	; 0x09
    171e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	9e 83       	std	Y+6, r25	; 0x06
    172a:	8d 83       	std	Y+5, r24	; 0x05
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	9a 83       	std	Y+2, r25	; 0x02
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	9a 81       	ldd	r25, Y+2	; 0x02
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <main+0x38c>
    173c:	9a 83       	std	Y+2, r25	; 0x02
    173e:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(50);
						/*repeat entering password until user enter 2 identical passwords*/
						receivedByte = PASSWORD_NOT_IDENTICAL;
    1740:	88 e2       	ldi	r24, 0x28	; 40
    1742:	8f 8f       	std	Y+31, r24	; 0x1f

						do
						{
							/*********************setting password*********************/
							/*enter password by user and store it in an array*/
							enter_passcode(password);
    1744:	ce 01       	movw	r24, r28
    1746:	80 96       	adiw	r24, 0x20	; 32
    1748:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <enter_passcode>
							/*confirm password by user and store it in an array*/
							enter_passcode(confirmPassword);
    174c:	ce 01       	movw	r24, r28
    174e:	86 96       	adiw	r24, 0x26	; 38
    1750:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <enter_passcode>
							/******* SEND passwords to control ECU *******/
							/*send set password command to control ECU*/
							UART_sendByte(SET_PASSWORD);
    1754:	8d e2       	ldi	r24, 0x2D	; 45
    1756:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_sendByte>
							/***wait to control ECU to be ready***/
							while(!(UART_recieveByte() == EUC2_READY));
    175a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_recieveByte>
    175e:	80 34       	cpi	r24, 0x40	; 64
    1760:	e1 f7       	brne	.-8      	; 0x175a <main+0x3ae>
							/*send password to control ECU*/
							send_password_to_control_ECU(password);
    1762:	ce 01       	movw	r24, r28
    1764:	80 96       	adiw	r24, 0x20	; 32
    1766:	0e 94 a8 0c 	call	0x1950	; 0x1950 <send_password_to_control_ECU>
							/***wait to control ECU to be ready***/
							while(!(UART_recieveByte() == EUC2_READY));
    176a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_recieveByte>
    176e:	80 34       	cpi	r24, 0x40	; 64
    1770:	e1 f7       	brne	.-8      	; 0x176a <main+0x3be>
							/*send password to control ECU*/
							send_password_to_control_ECU(confirmPassword);
    1772:	ce 01       	movw	r24, r28
    1774:	86 96       	adiw	r24, 0x26	; 38
    1776:	0e 94 a8 0c 	call	0x1950	; 0x1950 <send_password_to_control_ECU>
							/*receive password IDENTICAL status from control ECU*/
							receivedByte = UART_recieveByte();
    177a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_recieveByte>
    177e:	8f 8f       	std	Y+31, r24	; 0x1f
#ifdef TESTING_PAHSE
							LCD_clearScreen();
    1780:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_clearScreen>
							LCD_displayString("PASSWORD NOT IDENTICAL!");
    1784:	80 e6       	ldi	r24, 0x60	; 96
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>
#endif
						}
						while(receivedByte == PASSWORD_NOT_IDENTICAL);
    178c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    178e:	88 32       	cpi	r24, 0x28	; 40
    1790:	c9 f2       	breq	.-78     	; 0x1744 <main+0x398>
    1792:	07 c0       	rjmp	.+14     	; 0x17a2 <main+0x3f6>
					break; /*break while loop if password match*/
				}/*end if password match*/
				/*else if password does not match increment password counter until 3*/
				else
				{
					passwordCounter++;
    1794:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1796:	8f 5f       	subi	r24, 0xFF	; 255
    1798:	8d 8f       	std	Y+29, r24	; 0x1d
		userInput = KEYPAD_getPressedKey();

		/************************* serve user request ******************************/
		if(userInput == OPEN_DOOR || userInput == SET_PASSWORD)
		{
			while(passwordCounter < 3)
    179a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	08 f4       	brcc	.+2      	; 0x17a2 <main+0x3f6>
    17a0:	b4 ce       	rjmp	.-664    	; 0x150a <main+0x15e>
					passwordCounter++;
				}
			}/*end while password counter <=3 */
		}
		/*warning if wrong password entered for 3 times*/
		if(passwordCounter >= 3){
    17a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a4:	83 30       	cpi	r24, 0x03	; 3
    17a6:	08 f4       	brcc	.+2      	; 0x17aa <main+0x3fe>
    17a8:	94 ce       	rjmp	.-728    	; 0x14d2 <main+0x126>
			/*Warning for 1 minute*/
			/*initialize timer
			 * wait for 1 minute
			 */
			LCD_clearScreen();
    17aa:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_clearScreen>
			LCD_displayString("#####################");
    17ae:	81 ec       	ldi	r24, 0xC1	; 193
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>
			/*buzzer on*/
			BUZZER_on();
    17b6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <BUZZER_on>
			GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN, LOGIC_HIGH);
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	67 e0       	ldi	r22, 0x07	; 7
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>

			/*wait for 1 minute*/
			while(g_timer0_ticks < 240 );
    17c4:	80 91 0c 01 	lds	r24, 0x010C
    17c8:	80 3f       	cpi	r24, 0xF0	; 240
    17ca:	e0 f3       	brcs	.-8      	; 0x17c4 <main+0x418>
			/*buzzer off after 1 minute*/
			BUZZER_off();
    17cc:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <BUZZER_off>
    17d0:	80 ce       	rjmp	.-768    	; 0x14d2 <main+0x126>

000017d2 <enter_passcode>:
 * [in]       : uint8* passCodeString , pointer to string to store entered password
 * [Returns] : No Returns
 *
 *
 **************************************************************************************************/
void enter_passcode(uint8* passCodeString){
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	62 97       	sbiw	r28, 0x12	; 18
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	9a 8b       	std	Y+18, r25	; 0x12
    17ec:	89 8b       	std	Y+17, r24	; 0x11
	int key;
	LCD_clearScreen();
    17ee:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_clearScreen>
	LCD_displayString("Enter Pass pls");
    17f2:	87 ed       	ldi	r24, 0xD7	; 215
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>
	LCD_moveCursor(1, 0);
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	60 e0       	ldi	r22, 0x00	; 0
    17fe:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_moveCursor>
	for(key = 0; key < PASSCODE_SIZE-1; key++)
    1802:	18 8a       	std	Y+16, r1	; 0x10
    1804:	1f 86       	std	Y+15, r1	; 0x0f
    1806:	8c c0       	rjmp	.+280    	; 0x1920 <enter_passcode+0x14e>
	{
		/*save the pressed button on keypad to pass code array*/
		passCodeString[key] = KEYPAD_getPressedKey();
    1808:	2f 85       	ldd	r18, Y+15	; 0x0f
    180a:	38 89       	ldd	r19, Y+16	; 0x10
    180c:	89 89       	ldd	r24, Y+17	; 0x11
    180e:	9a 89       	ldd	r25, Y+18	; 0x12
    1810:	8c 01       	movw	r16, r24
    1812:	02 0f       	add	r16, r18
    1814:	13 1f       	adc	r17, r19
    1816:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <KEYPAD_getPressedKey>
    181a:	f8 01       	movw	r30, r16
    181c:	80 83       	st	Z, r24
		LCD_displayCharacter(passCodeString[key]);
    181e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1820:	38 89       	ldd	r19, Y+16	; 0x10
    1822:	89 89       	ldd	r24, Y+17	; 0x11
    1824:	9a 89       	ldd	r25, Y+18	; 0x12
    1826:	fc 01       	movw	r30, r24
    1828:	e2 0f       	add	r30, r18
    182a:	f3 1f       	adc	r31, r19
    182c:	80 81       	ld	r24, Z
    182e:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_displayCharacter>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	ac e5       	ldi	r26, 0x5C	; 92
    1838:	b3 e4       	ldi	r27, 0x43	; 67
    183a:	8b 87       	std	Y+11, r24	; 0x0b
    183c:	9c 87       	std	Y+12, r25	; 0x0c
    183e:	ad 87       	std	Y+13, r26	; 0x0d
    1840:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	4a e7       	ldi	r20, 0x7A	; 122
    1850:	53 e4       	ldi	r21, 0x43	; 67
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8f 83       	std	Y+7, r24	; 0x07
    185c:	98 87       	std	Y+8, r25	; 0x08
    185e:	a9 87       	std	Y+9, r26	; 0x09
    1860:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1862:	6f 81       	ldd	r22, Y+7	; 0x07
    1864:	78 85       	ldd	r23, Y+8	; 0x08
    1866:	89 85       	ldd	r24, Y+9	; 0x09
    1868:	9a 85       	ldd	r25, Y+10	; 0x0a
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e8       	ldi	r20, 0x80	; 128
    1870:	5f e3       	ldi	r21, 0x3F	; 63
    1872:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1876:	88 23       	and	r24, r24
    1878:	2c f4       	brge	.+10     	; 0x1884 <enter_passcode+0xb2>
		__ticks = 1;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	9e 83       	std	Y+6, r25	; 0x06
    1880:	8d 83       	std	Y+5, r24	; 0x05
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <enter_passcode+0x130>
	else if (__tmp > 65535)
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	4f e7       	ldi	r20, 0x7F	; 127
    1892:	57 e4       	ldi	r21, 0x47	; 71
    1894:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1898:	18 16       	cp	r1, r24
    189a:	4c f5       	brge	.+82     	; 0x18ee <enter_passcode+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	6b 85       	ldd	r22, Y+11	; 0x0b
    189e:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	bc 01       	movw	r22, r24
    18b6:	cd 01       	movw	r24, r26
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
    18c4:	0f c0       	rjmp	.+30     	; 0x18e4 <enter_passcode+0x112>
    18c6:	89 e1       	ldi	r24, 0x19	; 25
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	f1 f7       	brne	.-4      	; 0x18d2 <enter_passcode+0x100>
    18d6:	9c 83       	std	Y+4, r25	; 0x04
    18d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	9e 83       	std	Y+6, r25	; 0x06
    18e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	69 f7       	brne	.-38     	; 0x18c6 <enter_passcode+0xf4>
    18ec:	14 c0       	rjmp	.+40     	; 0x1916 <enter_passcode+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ee:	6f 81       	ldd	r22, Y+7	; 0x07
    18f0:	78 85       	ldd	r23, Y+8	; 0x08
    18f2:	89 85       	ldd	r24, Y+9	; 0x09
    18f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9e 83       	std	Y+6, r25	; 0x06
    1900:	8d 83       	std	Y+5, r24	; 0x05
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	9a 81       	ldd	r25, Y+2	; 0x02
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	f1 f7       	brne	.-4      	; 0x190e <enter_passcode+0x13c>
    1912:	9a 83       	std	Y+2, r25	; 0x02
    1914:	89 83       	std	Y+1, r24	; 0x01
void enter_passcode(uint8* passCodeString){
	int key;
	LCD_clearScreen();
	LCD_displayString("Enter Pass pls");
	LCD_moveCursor(1, 0);
	for(key = 0; key < PASSCODE_SIZE-1; key++)
    1916:	8f 85       	ldd	r24, Y+15	; 0x0f
    1918:	98 89       	ldd	r25, Y+16	; 0x10
    191a:	01 96       	adiw	r24, 0x01	; 1
    191c:	98 8b       	std	Y+16, r25	; 0x10
    191e:	8f 87       	std	Y+15, r24	; 0x0f
    1920:	8f 85       	ldd	r24, Y+15	; 0x0f
    1922:	98 89       	ldd	r25, Y+16	; 0x10
    1924:	85 30       	cpi	r24, 0x05	; 5
    1926:	91 05       	cpc	r25, r1
    1928:	0c f4       	brge	.+2      	; 0x192c <enter_passcode+0x15a>
    192a:	6e cf       	rjmp	.-292    	; 0x1808 <enter_passcode+0x36>
		/*save the pressed button on keypad to pass code array*/
		passCodeString[key] = KEYPAD_getPressedKey();
		LCD_displayCharacter(passCodeString[key]);
		_delay_ms(220);
	}
	LCD_clearScreen();
    192c:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_clearScreen>
	passCodeString[PASSCODE_SIZE-1] = '\0';
    1930:	89 89       	ldd	r24, Y+17	; 0x11
    1932:	9a 89       	ldd	r25, Y+18	; 0x12
    1934:	fc 01       	movw	r30, r24
    1936:	35 96       	adiw	r30, 0x05	; 5
    1938:	10 82       	st	Z, r1

}
    193a:	62 96       	adiw	r28, 0x12	; 18
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	cf 91       	pop	r28
    1948:	df 91       	pop	r29
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	08 95       	ret

00001950 <send_password_to_control_ECU>:
 * [in]        		: pointer to string (password)
 * [Returns] 		: No Returns
 *
 **************************************************************************************************/
void send_password_to_control_ECU(uint8* pass)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	6b 97       	sbiw	r28, 0x1b	; 27
    195a:	0f b6       	in	r0, 0x3f	; 63
    195c:	f8 94       	cli
    195e:	de bf       	out	0x3e, r29	; 62
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	9b 8f       	std	Y+27, r25	; 0x1b
    1966:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8 i;
	for(i = 0; i<PASSCODE_SIZE;i++){
    1968:	19 8e       	std	Y+25, r1	; 0x19
    196a:	cc c0       	rjmp	.+408    	; 0x1b04 <send_password_to_control_ECU+0x1b4>
		UART_sendByte(*(pass+i));
    196c:	89 8d       	ldd	r24, Y+25	; 0x19
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1974:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1976:	fc 01       	movw	r30, r24
    1978:	e2 0f       	add	r30, r18
    197a:	f3 1f       	adc	r31, r19
    197c:	80 81       	ld	r24, Z
    197e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <UART_sendByte>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e2       	ldi	r26, 0x20	; 32
    1988:	b1 e4       	ldi	r27, 0x41	; 65
    198a:	8d 8b       	std	Y+21, r24	; 0x15
    198c:	9e 8b       	std	Y+22, r25	; 0x16
    198e:	af 8b       	std	Y+23, r26	; 0x17
    1990:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1992:	6d 89       	ldd	r22, Y+21	; 0x15
    1994:	7e 89       	ldd	r23, Y+22	; 0x16
    1996:	8f 89       	ldd	r24, Y+23	; 0x17
    1998:	98 8d       	ldd	r25, Y+24	; 0x18
    199a:	2b ea       	ldi	r18, 0xAB	; 171
    199c:	3a ea       	ldi	r19, 0xAA	; 170
    199e:	4a ea       	ldi	r20, 0xAA	; 170
    19a0:	5e e3       	ldi	r21, 0x3E	; 62
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	89 8b       	std	Y+17, r24	; 0x11
    19ac:	9a 8b       	std	Y+18, r25	; 0x12
    19ae:	ab 8b       	std	Y+19, r26	; 0x13
    19b0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19b2:	69 89       	ldd	r22, Y+17	; 0x11
    19b4:	7a 89       	ldd	r23, Y+18	; 0x12
    19b6:	8b 89       	ldd	r24, Y+19	; 0x13
    19b8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	1c f4       	brge	.+6      	; 0x19d0 <send_password_to_control_ECU+0x80>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	88 8b       	std	Y+16, r24	; 0x10
    19ce:	91 c0       	rjmp	.+290    	; 0x1af2 <send_password_to_control_ECU+0x1a2>
	else if (__tmp > 255)
    19d0:	69 89       	ldd	r22, Y+17	; 0x11
    19d2:	7a 89       	ldd	r23, Y+18	; 0x12
    19d4:	8b 89       	ldd	r24, Y+19	; 0x13
    19d6:	9c 89       	ldd	r25, Y+20	; 0x14
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	53 e4       	ldi	r21, 0x43	; 67
    19e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	0c f0       	brlt	.+2      	; 0x19ea <send_password_to_control_ECU+0x9a>
    19e8:	7b c0       	rjmp	.+246    	; 0x1ae0 <send_password_to_control_ECU+0x190>
	{
		_delay_ms(__us / 1000.0);
    19ea:	6d 89       	ldd	r22, Y+21	; 0x15
    19ec:	7e 89       	ldd	r23, Y+22	; 0x16
    19ee:	8f 89       	ldd	r24, Y+23	; 0x17
    19f0:	98 8d       	ldd	r25, Y+24	; 0x18
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	4a e7       	ldi	r20, 0x7A	; 122
    19f8:	54 e4       	ldi	r21, 0x44	; 68
    19fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8c 87       	std	Y+12, r24	; 0x0c
    1a04:	9d 87       	std	Y+13, r25	; 0x0d
    1a06:	ae 87       	std	Y+14, r26	; 0x0e
    1a08:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a0c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a0e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a10:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a e7       	ldi	r20, 0x7A	; 122
    1a18:	53 e4       	ldi	r21, 0x43	; 67
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	88 87       	std	Y+8, r24	; 0x08
    1a24:	99 87       	std	Y+9, r25	; 0x09
    1a26:	aa 87       	std	Y+10, r26	; 0x0a
    1a28:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a2a:	68 85       	ldd	r22, Y+8	; 0x08
    1a2c:	79 85       	ldd	r23, Y+9	; 0x09
    1a2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <send_password_to_control_ECU+0xfc>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9f 83       	std	Y+7, r25	; 0x07
    1a48:	8e 83       	std	Y+6, r24	; 0x06
    1a4a:	3f c0       	rjmp	.+126    	; 0x1aca <send_password_to_control_ECU+0x17a>
	else if (__tmp > 65535)
    1a4c:	68 85       	ldd	r22, Y+8	; 0x08
    1a4e:	79 85       	ldd	r23, Y+9	; 0x09
    1a50:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a52:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	3f ef       	ldi	r19, 0xFF	; 255
    1a58:	4f e7       	ldi	r20, 0x7F	; 127
    1a5a:	57 e4       	ldi	r21, 0x47	; 71
    1a5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	4c f5       	brge	.+82     	; 0x1ab6 <send_password_to_control_ECU+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a64:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a66:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a68:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	51 e4       	ldi	r21, 0x41	; 65
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9f 83       	std	Y+7, r25	; 0x07
    1a8a:	8e 83       	std	Y+6, r24	; 0x06
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <send_password_to_control_ECU+0x15c>
    1a8e:	89 e1       	ldi	r24, 0x19	; 25
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9d 83       	std	Y+5, r25	; 0x05
    1a94:	8c 83       	std	Y+4, r24	; 0x04
    1a96:	8c 81       	ldd	r24, Y+4	; 0x04
    1a98:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <send_password_to_control_ECU+0x14a>
    1a9e:	9d 83       	std	Y+5, r25	; 0x05
    1aa0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	8e 81       	ldd	r24, Y+6	; 0x06
    1aa4:	9f 81       	ldd	r25, Y+7	; 0x07
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	9f 83       	std	Y+7, r25	; 0x07
    1aaa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	8e 81       	ldd	r24, Y+6	; 0x06
    1aae:	9f 81       	ldd	r25, Y+7	; 0x07
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <send_password_to_control_ECU+0x13e>
    1ab4:	24 c0       	rjmp	.+72     	; 0x1afe <send_password_to_control_ECU+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab6:	68 85       	ldd	r22, Y+8	; 0x08
    1ab8:	79 85       	ldd	r23, Y+9	; 0x09
    1aba:	8a 85       	ldd	r24, Y+10	; 0x0a
    1abc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9f 83       	std	Y+7, r25	; 0x07
    1ac8:	8e 83       	std	Y+6, r24	; 0x06
    1aca:	8e 81       	ldd	r24, Y+6	; 0x06
    1acc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ace:	9b 83       	std	Y+3, r25	; 0x03
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <send_password_to_control_ECU+0x186>
    1ada:	9b 83       	std	Y+3, r25	; 0x03
    1adc:	8a 83       	std	Y+2, r24	; 0x02
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <send_password_to_control_ECU+0x1ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ae0:	69 89       	ldd	r22, Y+17	; 0x11
    1ae2:	7a 89       	ldd	r23, Y+18	; 0x12
    1ae4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	88 8b       	std	Y+16, r24	; 0x10
    1af2:	88 89       	ldd	r24, Y+16	; 0x10
    1af4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	8a 95       	dec	r24
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <send_password_to_control_ECU+0x1a8>
    1afc:	89 83       	std	Y+1, r24	; 0x01
 *
 **************************************************************************************************/
void send_password_to_control_ECU(uint8* pass)
{
	uint8 i;
	for(i = 0; i<PASSCODE_SIZE;i++){
    1afe:	89 8d       	ldd	r24, Y+25	; 0x19
    1b00:	8f 5f       	subi	r24, 0xFF	; 255
    1b02:	89 8f       	std	Y+25, r24	; 0x19
    1b04:	89 8d       	ldd	r24, Y+25	; 0x19
    1b06:	86 30       	cpi	r24, 0x06	; 6
    1b08:	08 f4       	brcc	.+2      	; 0x1b0c <send_password_to_control_ECU+0x1bc>
    1b0a:	30 cf       	rjmp	.-416    	; 0x196c <send_password_to_control_ECU+0x1c>
		UART_sendByte(*(pass+i));
		_delay_us(10);
	}
}
    1b0c:	6b 96       	adiw	r28, 0x1b	; 27
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <test_enter_passcode>:
void test_enter_passcode(uint8* passCodeString){
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <test_enter_passcode+0x6>
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
    1b2c:	0e 94 d5 13 	call	0x27aa	; 0x27aa <LCD_clearScreen>
	LCD_displayString("Entered PassCode:");
    1b30:	86 ee       	ldi	r24, 0xE6	; 230
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>
	LCD_moveCursor(1, 0);
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_moveCursor>
	LCD_displayString(passCodeString);
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	9a 81       	ldd	r25, Y+2	; 0x02
    1b44:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>
}
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <timer0_handler>:
 * [Description] : function to handle
 * [Args] : non
 * [in]: non
 * [Returns] : non
 ****************************************************/
void timer0_handler(void){
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
	setTimerValue(TIMER0_ID, 5);
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	65 e0       	ldi	r22, 0x05	; 5
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	0e 94 23 15 	call	0x2a46	; 0x2a46 <setTimerValue>
	g_timer0_ticks++;
    1b64:	80 91 0c 01 	lds	r24, 0x010C
    1b68:	8f 5f       	subi	r24, 0xFF	; 255
    1b6a:	80 93 0c 01 	sts	0x010C, r24
}
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <KEYPAD_getPressedKey+0x6>
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1b80:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1b82:	1b 82       	std	Y+3, r1	; 0x03
    1b84:	42 c0       	rjmp	.+132    	; 0x1c0a <KEYPAD_getPressedKey+0x96>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	60 e0       	ldi	r22, 0x00	; 0
    1b8a:	0e 94 08 09 	call	0x1210	; 0x1210 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	98 2f       	mov	r25, r24
    1b92:	9c 5f       	subi	r25, 0xFC	; 252
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	69 2f       	mov	r22, r25
    1b98:	41 e0       	ldi	r20, 0x01	; 1
    1b9a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9c 01       	movw	r18, r24
    1ba6:	2c 5f       	subi	r18, 0xFC	; 252
    1ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <KEYPAD_getPressedKey+0x40>
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	2a 95       	dec	r18
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <KEYPAD_getPressedKey+0x3c>
    1bb8:	89 83       	std	Y+1, r24	; 0x01
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	69 81       	ldd	r22, Y+1	; 0x01
    1bbe:	0e 94 4c 09 	call	0x1298	; 0x1298 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1bc2:	1a 82       	std	Y+2, r1	; 0x02
    1bc4:	1c c0       	rjmp	.+56     	; 0x1bfe <KEYPAD_getPressedKey+0x8a>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1bc6:	80 e0       	ldi	r24, 0x00	; 0
    1bc8:	6a 81       	ldd	r22, Y+2	; 0x02
    1bca:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <GPIO_readPin>
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	99 f4       	brne	.+38     	; 0x1bf8 <KEYPAD_getPressedKey+0x84>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	88 2f       	mov	r24, r24
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	98 2f       	mov	r25, r24
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	89 0f       	add	r24, r25
    1be6:	8f 5f       	subi	r24, 0xFF	; 255
    1be8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	8a 83       	std	Y+2, r24	; 0x02
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	84 30       	cpi	r24, 0x04	; 4
    1c02:	08 f3       	brcs	.-62     	; 0x1bc6 <KEYPAD_getPressedKey+0x52>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	8f 5f       	subi	r24, 0xFF	; 255
    1c08:	8b 83       	std	Y+3, r24	; 0x03
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	84 30       	cpi	r24, 0x04	; 4
    1c0e:	08 f4       	brcc	.+2      	; 0x1c12 <KEYPAD_getPressedKey+0x9e>
    1c10:	ba cf       	rjmp	.-140    	; 0x1b86 <KEYPAD_getPressedKey+0x12>
    1c12:	b7 cf       	rjmp	.-146    	; 0x1b82 <KEYPAD_getPressedKey+0xe>

00001c14 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	00 d0       	rcall	.+0      	; 0x1c1a <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1c22:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	3c 83       	std	Y+4, r19	; 0x04
    1c2c:	2b 83       	std	Y+3, r18	; 0x03
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	9c 81       	ldd	r25, Y+4	; 0x04
    1c32:	88 30       	cpi	r24, 0x08	; 8
    1c34:	91 05       	cpc	r25, r1
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c38:	70 c0       	rjmp	.+224    	; 0x1d1a <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3e:	29 30       	cpi	r18, 0x09	; 9
    1c40:	31 05       	cpc	r19, r1
    1c42:	5c f5       	brge	.+86     	; 0x1c9a <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	84 30       	cpi	r24, 0x04	; 4
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c4e:	59 c0       	rjmp	.+178    	; 0x1d02 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c50:	2b 81       	ldd	r18, Y+3	; 0x03
    1c52:	3c 81       	ldd	r19, Y+4	; 0x04
    1c54:	25 30       	cpi	r18, 0x05	; 5
    1c56:	31 05       	cpc	r19, r1
    1c58:	9c f4       	brge	.+38     	; 0x1c80 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	82 30       	cpi	r24, 0x02	; 2
    1c60:	91 05       	cpc	r25, r1
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c64:	48 c0       	rjmp	.+144    	; 0x1cf6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c66:	2b 81       	ldd	r18, Y+3	; 0x03
    1c68:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6a:	23 30       	cpi	r18, 0x03	; 3
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	0c f0       	brlt	.+2      	; 0x1c72 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c70:	45 c0       	rjmp	.+138    	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	91 05       	cpc	r25, r1
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c7c:	39 c0       	rjmp	.+114    	; 0x1cf0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c7e:	68 c0       	rjmp	.+208    	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13c>
    1c80:	2b 81       	ldd	r18, Y+3	; 0x03
    1c82:	3c 81       	ldd	r19, Y+4	; 0x04
    1c84:	26 30       	cpi	r18, 0x06	; 6
    1c86:	31 05       	cpc	r19, r1
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c8a:	41 c0       	rjmp	.+130    	; 0x1d0e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	87 30       	cpi	r24, 0x07	; 7
    1c92:	91 05       	cpc	r25, r1
    1c94:	0c f0       	brlt	.+2      	; 0x1c98 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c96:	3e c0       	rjmp	.+124    	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c98:	37 c0       	rjmp	.+110    	; 0x1d08 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9e:	2c 30       	cpi	r18, 0x0C	; 12
    1ca0:	31 05       	cpc	r19, r1
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ca4:	46 c0       	rjmp	.+140    	; 0x1d32 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	9c 81       	ldd	r25, Y+4	; 0x04
    1caa:	8d 30       	cpi	r24, 0x0D	; 13
    1cac:	91 05       	cpc	r25, r1
    1cae:	5c f4       	brge	.+22     	; 0x1cc6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1cb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb4:	2a 30       	cpi	r18, 0x0A	; 10
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	b1 f1       	breq	.+108    	; 0x1d26 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbe:	8b 30       	cpi	r24, 0x0B	; 11
    1cc0:	91 05       	cpc	r25, r1
    1cc2:	a4 f5       	brge	.+104    	; 0x1d2c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1cc4:	2d c0       	rjmp	.+90     	; 0x1d20 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1cc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cca:	2e 30       	cpi	r18, 0x0E	; 14
    1ccc:	31 05       	cpc	r19, r1
    1cce:	b9 f1       	breq	.+110    	; 0x1d3e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	8e 30       	cpi	r24, 0x0E	; 14
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	7c f1       	brlt	.+94     	; 0x1d38 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1cda:	2b 81       	ldd	r18, Y+3	; 0x03
    1cdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cde:	2f 30       	cpi	r18, 0x0F	; 15
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	81 f1       	breq	.+96     	; 0x1d44 <KEYPAD_4x4_adjustKeyNumber+0x130>
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	80 31       	cpi	r24, 0x10	; 16
    1cea:	91 05       	cpc	r25, r1
    1cec:	71 f1       	breq	.+92     	; 0x1d4a <KEYPAD_4x4_adjustKeyNumber+0x136>
    1cee:	30 c0       	rjmp	.+96     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x13c>
	{
		case 1: keypad_button = '7';
    1cf0:	87 e3       	ldi	r24, 0x37	; 55
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	2f c0       	rjmp	.+94     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 2: keypad_button = '8';
    1cf6:	88 e3       	ldi	r24, 0x38	; 56
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	2c c0       	rjmp	.+88     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 3: keypad_button = '9';
    1cfc:	89 e3       	ldi	r24, 0x39	; 57
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	29 c0       	rjmp	.+82     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1d02:	85 e2       	ldi	r24, 0x25	; 37
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	26 c0       	rjmp	.+76     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 5: keypad_button = '4';
    1d08:	84 e3       	ldi	r24, 0x34	; 52
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	23 c0       	rjmp	.+70     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 6: keypad_button = '5';
    1d0e:	85 e3       	ldi	r24, 0x35	; 53
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	20 c0       	rjmp	.+64     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 7: keypad_button = '6';
    1d14:	86 e3       	ldi	r24, 0x36	; 54
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	1d c0       	rjmp	.+58     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d1a:	8a e2       	ldi	r24, 0x2A	; 42
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	1a c0       	rjmp	.+52     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;		
		case 9: keypad_button = '1';
    1d20:	81 e3       	ldi	r24, 0x31	; 49
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	17 c0       	rjmp	.+46     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 10: keypad_button = '2';
    1d26:	82 e3       	ldi	r24, 0x32	; 50
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	14 c0       	rjmp	.+40     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 11: keypad_button = '3';
    1d2c:	83 e3       	ldi	r24, 0x33	; 51
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	11 c0       	rjmp	.+34     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1d32:	8d e2       	ldi	r24, 0x2D	; 45
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	0e c0       	rjmp	.+28     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 13: keypad_button = '13';  /* ASCII of Enter */
    1d38:	83 e3       	ldi	r24, 0x33	; 51
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	0b c0       	rjmp	.+22     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;			
		case 14: keypad_button = '0';
    1d3e:	80 e3       	ldi	r24, 0x30	; 48
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	08 c0       	rjmp	.+16     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d44:	8d e3       	ldi	r24, 0x3D	; 61
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	05 c0       	rjmp	.+10     	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d4a:	8b e2       	ldi	r24, 0x2B	; 43
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <KEYPAD_4x4_adjustKeyNumber+0x140>
				break;
		default: keypad_button = button_number;
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void){
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	2e 97       	sbiw	r28, 0x0e	; 14
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 ea       	ldi	r26, 0xA0	; 160
    1d7e:	b1 e4       	ldi	r27, 0x41	; 65
    1d80:	8b 87       	std	Y+11, r24	; 0x0b
    1d82:	9c 87       	std	Y+12, r25	; 0x0c
    1d84:	ad 87       	std	Y+13, r26	; 0x0d
    1d86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4a e7       	ldi	r20, 0x7A	; 122
    1d96:	53 e4       	ldi	r21, 0x43	; 67
    1d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	8f 83       	std	Y+7, r24	; 0x07
    1da2:	98 87       	std	Y+8, r25	; 0x08
    1da4:	a9 87       	std	Y+9, r26	; 0x09
    1da6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1da8:	6f 81       	ldd	r22, Y+7	; 0x07
    1daa:	78 85       	ldd	r23, Y+8	; 0x08
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <LCD_init+0x66>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9e 83       	std	Y+6, r25	; 0x06
    1dc6:	8d 83       	std	Y+5, r24	; 0x05
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <LCD_init+0xe4>
	else if (__tmp > 65535)
    1dca:	6f 81       	ldd	r22, Y+7	; 0x07
    1dcc:	78 85       	ldd	r23, Y+8	; 0x08
    1dce:	89 85       	ldd	r24, Y+9	; 0x09
    1dd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	4c f5       	brge	.+82     	; 0x1e34 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9e 83       	std	Y+6, r25	; 0x06
    1e08:	8d 83       	std	Y+5, r24	; 0x05
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <LCD_init+0xc6>
    1e0c:	89 e1       	ldi	r24, 0x19	; 25
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	9c 83       	std	Y+4, r25	; 0x04
    1e12:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e14:	8b 81       	ldd	r24, Y+3	; 0x03
    1e16:	9c 81       	ldd	r25, Y+4	; 0x04
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_init+0xb4>
    1e1c:	9c 83       	std	Y+4, r25	; 0x04
    1e1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	9e 81       	ldd	r25, Y+6	; 0x06
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f7       	brne	.-38     	; 0x1e0c <LCD_init+0xa8>
    1e32:	14 c0       	rjmp	.+40     	; 0x1e5c <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	6f 81       	ldd	r22, Y+7	; 0x07
    1e36:	78 85       	ldd	r23, Y+8	; 0x08
    1e38:	89 85       	ldd	r24, Y+9	; 0x09
    1e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	9e 83       	std	Y+6, r25	; 0x06
    1e46:	8d 83       	std	Y+5, r24	; 0x05
    1e48:	8d 81       	ldd	r24, Y+5	; 0x05
    1e4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	9a 81       	ldd	r25, Y+2	; 0x02
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_init+0xf0>
    1e58:	9a 83       	std	Y+2, r25	; 0x02
    1e5a:	89 83       	std	Y+1, r24	; 0x01
	/*Wait 20ms or more after VDD reaches 4.5V*/
	_delay_ms(20);
	/*set pins direction*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	60 e0       	ldi	r22, 0x00	; 0
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	61 e0       	ldi	r22, 0x01	; 1
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	62 e0       	ldi	r22, 0x02	; 2
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 78 06 	call	0xcf0	; 0xcf0 <GPIO_setupPinDirection>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	6f ef       	ldi	r22, 0xFF	; 255
    1e7e:	0e 94 08 09 	call	0x1210	; 0x1210 <GPIO_setupPortDirection>
	/*
	 * RS R/W DB7 DB6 DB5 DB4 DB3 DB2 DB1 DB0
	   0  	 0   0    0   1   1   *   *   *   *
	 */

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1e82:	88 e3       	ldi	r24, 0x38	; 56
    1e84:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e88:	8c e0       	ldi	r24, 0x0C	; 12
    1e8a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_sendCommand>

}
    1e94:	2e 96       	adiw	r28, 0x0e	; 14
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command){
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	e9 97       	sbiw	r28, 0x39	; 57
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /*RS: LOW on transferring instruction data*/
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /*RW-: low on writing*/
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	a0 e8       	ldi	r26, 0x80	; 128
    1ed6:	bf e3       	ldi	r27, 0x3F	; 63
    1ed8:	8d ab       	std	Y+53, r24	; 0x35
    1eda:	9e ab       	std	Y+54, r25	; 0x36
    1edc:	af ab       	std	Y+55, r26	; 0x37
    1ede:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4a e7       	ldi	r20, 0x7A	; 122
    1eee:	53 e4       	ldi	r21, 0x43	; 67
    1ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	89 ab       	std	Y+49, r24	; 0x31
    1efa:	9a ab       	std	Y+50, r25	; 0x32
    1efc:	ab ab       	std	Y+51, r26	; 0x33
    1efe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f00:	69 a9       	ldd	r22, Y+49	; 0x31
    1f02:	7a a9       	ldd	r23, Y+50	; 0x32
    1f04:	8b a9       	ldd	r24, Y+51	; 0x33
    1f06:	9c a9       	ldd	r25, Y+52	; 0x34
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e8       	ldi	r20, 0x80	; 128
    1f0e:	5f e3       	ldi	r21, 0x3F	; 63
    1f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f14:	88 23       	and	r24, r24
    1f16:	2c f4       	brge	.+10     	; 0x1f22 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	98 ab       	std	Y+48, r25	; 0x30
    1f1e:	8f a7       	std	Y+47, r24	; 0x2f
    1f20:	3f c0       	rjmp	.+126    	; 0x1fa0 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1f22:	69 a9       	ldd	r22, Y+49	; 0x31
    1f24:	7a a9       	ldd	r23, Y+50	; 0x32
    1f26:	8b a9       	ldd	r24, Y+51	; 0x33
    1f28:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	3f ef       	ldi	r19, 0xFF	; 255
    1f2e:	4f e7       	ldi	r20, 0x7F	; 127
    1f30:	57 e4       	ldi	r21, 0x47	; 71
    1f32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f36:	18 16       	cp	r1, r24
    1f38:	4c f5       	brge	.+82     	; 0x1f8c <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f3c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f3e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f40:	98 ad       	ldd	r25, Y+56	; 0x38
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e2       	ldi	r20, 0x20	; 32
    1f48:	51 e4       	ldi	r21, 0x41	; 65
    1f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	98 ab       	std	Y+48, r25	; 0x30
    1f60:	8f a7       	std	Y+47, r24	; 0x2f
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <LCD_sendCommand+0xdc>
    1f64:	89 e1       	ldi	r24, 0x19	; 25
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9e a7       	std	Y+46, r25	; 0x2e
    1f6a:	8d a7       	std	Y+45, r24	; 0x2d
    1f6c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f6e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <LCD_sendCommand+0xca>
    1f74:	9e a7       	std	Y+46, r25	; 0x2e
    1f76:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	98 ab       	std	Y+48, r25	; 0x30
    1f80:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f84:	98 a9       	ldd	r25, Y+48	; 0x30
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	69 f7       	brne	.-38     	; 0x1f64 <LCD_sendCommand+0xbe>
    1f8a:	14 c0       	rjmp	.+40     	; 0x1fb4 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f90:	8b a9       	ldd	r24, Y+51	; 0x33
    1f92:	9c a9       	ldd	r25, Y+52	; 0x34
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	98 ab       	std	Y+48, r25	; 0x30
    1f9e:	8f a7       	std	Y+47, r24	; 0x2f
    1fa0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa4:	9c a7       	std	Y+44, r25	; 0x2c
    1fa6:	8b a7       	std	Y+43, r24	; 0x2b
    1fa8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1faa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fac:	01 97       	sbiw	r24, 0x01	; 1
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <LCD_sendCommand+0x106>
    1fb0:	9c a7       	std	Y+44, r25	; 0x2c
    1fb2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /*tas = 50ns*/ /* due to bad manufacturing*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	62 e0       	ldi	r22, 0x02	; 2
    1fb8:	41 e0       	ldi	r20, 0x01	; 1
    1fba:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	a0 e8       	ldi	r26, 0x80	; 128
    1fc4:	bf e3       	ldi	r27, 0x3F	; 63
    1fc6:	8f a3       	std	Y+39, r24	; 0x27
    1fc8:	98 a7       	std	Y+40, r25	; 0x28
    1fca:	a9 a7       	std	Y+41, r26	; 0x29
    1fcc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fce:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	4a e7       	ldi	r20, 0x7A	; 122
    1fdc:	53 e4       	ldi	r21, 0x43	; 67
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	8b a3       	std	Y+35, r24	; 0x23
    1fe8:	9c a3       	std	Y+36, r25	; 0x24
    1fea:	ad a3       	std	Y+37, r26	; 0x25
    1fec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fee:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e8       	ldi	r20, 0x80	; 128
    1ffc:	5f e3       	ldi	r21, 0x3F	; 63
    1ffe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2002:	88 23       	and	r24, r24
    2004:	2c f4       	brge	.+10     	; 0x2010 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9a a3       	std	Y+34, r25	; 0x22
    200c:	89 a3       	std	Y+33, r24	; 0x21
    200e:	3f c0       	rjmp	.+126    	; 0x208e <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2010:	6b a1       	ldd	r22, Y+35	; 0x23
    2012:	7c a1       	ldd	r23, Y+36	; 0x24
    2014:	8d a1       	ldd	r24, Y+37	; 0x25
    2016:	9e a1       	ldd	r25, Y+38	; 0x26
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	3f ef       	ldi	r19, 0xFF	; 255
    201c:	4f e7       	ldi	r20, 0x7F	; 127
    201e:	57 e4       	ldi	r21, 0x47	; 71
    2020:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2024:	18 16       	cp	r1, r24
    2026:	4c f5       	brge	.+82     	; 0x207a <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2028:	6f a1       	ldd	r22, Y+39	; 0x27
    202a:	78 a5       	ldd	r23, Y+40	; 0x28
    202c:	89 a5       	ldd	r24, Y+41	; 0x29
    202e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e2       	ldi	r20, 0x20	; 32
    2036:	51 e4       	ldi	r21, 0x41	; 65
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	9a a3       	std	Y+34, r25	; 0x22
    204e:	89 a3       	std	Y+33, r24	; 0x21
    2050:	0f c0       	rjmp	.+30     	; 0x2070 <LCD_sendCommand+0x1ca>
    2052:	89 e1       	ldi	r24, 0x19	; 25
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	98 a3       	std	Y+32, r25	; 0x20
    2058:	8f 8f       	std	Y+31, r24	; 0x1f
    205a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    205c:	98 a1       	ldd	r25, Y+32	; 0x20
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <LCD_sendCommand+0x1b8>
    2062:	98 a3       	std	Y+32, r25	; 0x20
    2064:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2066:	89 a1       	ldd	r24, Y+33	; 0x21
    2068:	9a a1       	ldd	r25, Y+34	; 0x22
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	9a a3       	std	Y+34, r25	; 0x22
    206e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2070:	89 a1       	ldd	r24, Y+33	; 0x21
    2072:	9a a1       	ldd	r25, Y+34	; 0x22
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	69 f7       	brne	.-38     	; 0x2052 <LCD_sendCommand+0x1ac>
    2078:	14 c0       	rjmp	.+40     	; 0x20a2 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207a:	6b a1       	ldd	r22, Y+35	; 0x23
    207c:	7c a1       	ldd	r23, Y+36	; 0x24
    207e:	8d a1       	ldd	r24, Y+37	; 0x25
    2080:	9e a1       	ldd	r25, Y+38	; 0x26
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9a a3       	std	Y+34, r25	; 0x22
    208c:	89 a3       	std	Y+33, r24	; 0x21
    208e:	89 a1       	ldd	r24, Y+33	; 0x21
    2090:	9a a1       	ldd	r25, Y+34	; 0x22
    2092:	9e 8f       	std	Y+30, r25	; 0x1e
    2094:	8d 8f       	std	Y+29, r24	; 0x1d
    2096:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2098:	9e 8d       	ldd	r25, Y+30	; 0x1e
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <LCD_sendCommand+0x1f4>
    209e:	9e 8f       	std	Y+30, r25	; 0x1e
    20a0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	69 ad       	ldd	r22, Y+57	; 0x39
    20a6:	0e 94 4c 09 	call	0x1298	; 0x1298 <GPIO_writePort>
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	a0 e8       	ldi	r26, 0x80	; 128
    20b0:	bf e3       	ldi	r27, 0x3F	; 63
    20b2:	89 8f       	std	Y+25, r24	; 0x19
    20b4:	9a 8f       	std	Y+26, r25	; 0x1a
    20b6:	ab 8f       	std	Y+27, r26	; 0x1b
    20b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ba:	69 8d       	ldd	r22, Y+25	; 0x19
    20bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	4a e7       	ldi	r20, 0x7A	; 122
    20c8:	53 e4       	ldi	r21, 0x43	; 67
    20ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	8d 8b       	std	Y+21, r24	; 0x15
    20d4:	9e 8b       	std	Y+22, r25	; 0x16
    20d6:	af 8b       	std	Y+23, r26	; 0x17
    20d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20da:	6d 89       	ldd	r22, Y+21	; 0x15
    20dc:	7e 89       	ldd	r23, Y+22	; 0x16
    20de:	8f 89       	ldd	r24, Y+23	; 0x17
    20e0:	98 8d       	ldd	r25, Y+24	; 0x18
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e8       	ldi	r20, 0x80	; 128
    20e8:	5f e3       	ldi	r21, 0x3F	; 63
    20ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ee:	88 23       	and	r24, r24
    20f0:	2c f4       	brge	.+10     	; 0x20fc <LCD_sendCommand+0x256>
		__ticks = 1;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	9c 8b       	std	Y+20, r25	; 0x14
    20f8:	8b 8b       	std	Y+19, r24	; 0x13
    20fa:	3f c0       	rjmp	.+126    	; 0x217a <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    20fc:	6d 89       	ldd	r22, Y+21	; 0x15
    20fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2100:	8f 89       	ldd	r24, Y+23	; 0x17
    2102:	98 8d       	ldd	r25, Y+24	; 0x18
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	3f ef       	ldi	r19, 0xFF	; 255
    2108:	4f e7       	ldi	r20, 0x7F	; 127
    210a:	57 e4       	ldi	r21, 0x47	; 71
    210c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2110:	18 16       	cp	r1, r24
    2112:	4c f5       	brge	.+82     	; 0x2166 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2114:	69 8d       	ldd	r22, Y+25	; 0x19
    2116:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2118:	8b 8d       	ldd	r24, Y+27	; 0x1b
    211a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e2       	ldi	r20, 0x20	; 32
    2122:	51 e4       	ldi	r21, 0x41	; 65
    2124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9c 8b       	std	Y+20, r25	; 0x14
    213a:	8b 8b       	std	Y+19, r24	; 0x13
    213c:	0f c0       	rjmp	.+30     	; 0x215c <LCD_sendCommand+0x2b6>
    213e:	89 e1       	ldi	r24, 0x19	; 25
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	9a 8b       	std	Y+18, r25	; 0x12
    2144:	89 8b       	std	Y+17, r24	; 0x11
    2146:	89 89       	ldd	r24, Y+17	; 0x11
    2148:	9a 89       	ldd	r25, Y+18	; 0x12
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <LCD_sendCommand+0x2a4>
    214e:	9a 8b       	std	Y+18, r25	; 0x12
    2150:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2152:	8b 89       	ldd	r24, Y+19	; 0x13
    2154:	9c 89       	ldd	r25, Y+20	; 0x14
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	9c 8b       	std	Y+20, r25	; 0x14
    215a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215c:	8b 89       	ldd	r24, Y+19	; 0x13
    215e:	9c 89       	ldd	r25, Y+20	; 0x14
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	69 f7       	brne	.-38     	; 0x213e <LCD_sendCommand+0x298>
    2164:	14 c0       	rjmp	.+40     	; 0x218e <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2166:	6d 89       	ldd	r22, Y+21	; 0x15
    2168:	7e 89       	ldd	r23, Y+22	; 0x16
    216a:	8f 89       	ldd	r24, Y+23	; 0x17
    216c:	98 8d       	ldd	r25, Y+24	; 0x18
    216e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	9c 8b       	std	Y+20, r25	; 0x14
    2178:	8b 8b       	std	Y+19, r24	; 0x13
    217a:	8b 89       	ldd	r24, Y+19	; 0x13
    217c:	9c 89       	ldd	r25, Y+20	; 0x14
    217e:	98 8b       	std	Y+16, r25	; 0x10
    2180:	8f 87       	std	Y+15, r24	; 0x0f
    2182:	8f 85       	ldd	r24, Y+15	; 0x0f
    2184:	98 89       	ldd	r25, Y+16	; 0x10
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <LCD_sendCommand+0x2e0>
    218a:	98 8b       	std	Y+16, r25	; 0x10
    218c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	62 e0       	ldi	r22, 0x02	; 2
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	a0 e8       	ldi	r26, 0x80	; 128
    219e:	bf e3       	ldi	r27, 0x3F	; 63
    21a0:	8b 87       	std	Y+11, r24	; 0x0b
    21a2:	9c 87       	std	Y+12, r25	; 0x0c
    21a4:	ad 87       	std	Y+13, r26	; 0x0d
    21a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    21aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	4a e7       	ldi	r20, 0x7A	; 122
    21b6:	53 e4       	ldi	r21, 0x43	; 67
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	8f 83       	std	Y+7, r24	; 0x07
    21c2:	98 87       	std	Y+8, r25	; 0x08
    21c4:	a9 87       	std	Y+9, r26	; 0x09
    21c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ca:	78 85       	ldd	r23, Y+8	; 0x08
    21cc:	89 85       	ldd	r24, Y+9	; 0x09
    21ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e8       	ldi	r20, 0x80	; 128
    21d6:	5f e3       	ldi	r21, 0x3F	; 63
    21d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21dc:	88 23       	and	r24, r24
    21de:	2c f4       	brge	.+10     	; 0x21ea <LCD_sendCommand+0x344>
		__ticks = 1;
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	9e 83       	std	Y+6, r25	; 0x06
    21e6:	8d 83       	std	Y+5, r24	; 0x05
    21e8:	3f c0       	rjmp	.+126    	; 0x2268 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    21ea:	6f 81       	ldd	r22, Y+7	; 0x07
    21ec:	78 85       	ldd	r23, Y+8	; 0x08
    21ee:	89 85       	ldd	r24, Y+9	; 0x09
    21f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	3f ef       	ldi	r19, 0xFF	; 255
    21f6:	4f e7       	ldi	r20, 0x7F	; 127
    21f8:	57 e4       	ldi	r21, 0x47	; 71
    21fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21fe:	18 16       	cp	r1, r24
    2200:	4c f5       	brge	.+82     	; 0x2254 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2202:	6b 85       	ldd	r22, Y+11	; 0x0b
    2204:	7c 85       	ldd	r23, Y+12	; 0x0c
    2206:	8d 85       	ldd	r24, Y+13	; 0x0d
    2208:	9e 85       	ldd	r25, Y+14	; 0x0e
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e2       	ldi	r20, 0x20	; 32
    2210:	51 e4       	ldi	r21, 0x41	; 65
    2212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	bc 01       	movw	r22, r24
    221c:	cd 01       	movw	r24, r26
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	0f c0       	rjmp	.+30     	; 0x224a <LCD_sendCommand+0x3a4>
    222c:	89 e1       	ldi	r24, 0x19	; 25
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_sendCommand+0x392>
    223c:	9c 83       	std	Y+4, r25	; 0x04
    223e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2240:	8d 81       	ldd	r24, Y+5	; 0x05
    2242:	9e 81       	ldd	r25, Y+6	; 0x06
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	9e 83       	std	Y+6, r25	; 0x06
    2248:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	00 97       	sbiw	r24, 0x00	; 0
    2250:	69 f7       	brne	.-38     	; 0x222c <LCD_sendCommand+0x386>
    2252:	14 c0       	rjmp	.+40     	; 0x227c <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2254:	6f 81       	ldd	r22, Y+7	; 0x07
    2256:	78 85       	ldd	r23, Y+8	; 0x08
    2258:	89 85       	ldd	r24, Y+9	; 0x09
    225a:	9a 85       	ldd	r25, Y+10	; 0x0a
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	9a 81       	ldd	r25, Y+2	; 0x02
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_sendCommand+0x3ce>
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    227c:	e9 96       	adiw	r28, 0x39	; 57
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	08 95       	ret

0000228e <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data){
    228e:	df 93       	push	r29
    2290:	cf 93       	push	r28
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	e9 97       	sbiw	r28, 0x39	; 57
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	de bf       	out	0x3e, r29	; 62
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	cd bf       	out	0x3d, r28	; 61
    22a2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /*RS: HIGH on transferring display data*/
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /*RW-: low on writing*/
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	61 e0       	ldi	r22, 0x01	; 1
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a0 e8       	ldi	r26, 0x80	; 128
    22be:	bf e3       	ldi	r27, 0x3F	; 63
    22c0:	8d ab       	std	Y+53, r24	; 0x35
    22c2:	9e ab       	std	Y+54, r25	; 0x36
    22c4:	af ab       	std	Y+55, r26	; 0x37
    22c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	6d a9       	ldd	r22, Y+53	; 0x35
    22ca:	7e a9       	ldd	r23, Y+54	; 0x36
    22cc:	8f a9       	ldd	r24, Y+55	; 0x37
    22ce:	98 ad       	ldd	r25, Y+56	; 0x38
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4a e7       	ldi	r20, 0x7A	; 122
    22d6:	53 e4       	ldi	r21, 0x43	; 67
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	89 ab       	std	Y+49, r24	; 0x31
    22e2:	9a ab       	std	Y+50, r25	; 0x32
    22e4:	ab ab       	std	Y+51, r26	; 0x33
    22e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22e8:	69 a9       	ldd	r22, Y+49	; 0x31
    22ea:	7a a9       	ldd	r23, Y+50	; 0x32
    22ec:	8b a9       	ldd	r24, Y+51	; 0x33
    22ee:	9c a9       	ldd	r25, Y+52	; 0x34
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e8       	ldi	r20, 0x80	; 128
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22fc:	88 23       	and	r24, r24
    22fe:	2c f4       	brge	.+10     	; 0x230a <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	98 ab       	std	Y+48, r25	; 0x30
    2306:	8f a7       	std	Y+47, r24	; 0x2f
    2308:	3f c0       	rjmp	.+126    	; 0x2388 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    230a:	69 a9       	ldd	r22, Y+49	; 0x31
    230c:	7a a9       	ldd	r23, Y+50	; 0x32
    230e:	8b a9       	ldd	r24, Y+51	; 0x33
    2310:	9c a9       	ldd	r25, Y+52	; 0x34
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	3f ef       	ldi	r19, 0xFF	; 255
    2316:	4f e7       	ldi	r20, 0x7F	; 127
    2318:	57 e4       	ldi	r21, 0x47	; 71
    231a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    231e:	18 16       	cp	r1, r24
    2320:	4c f5       	brge	.+82     	; 0x2374 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2322:	6d a9       	ldd	r22, Y+53	; 0x35
    2324:	7e a9       	ldd	r23, Y+54	; 0x36
    2326:	8f a9       	ldd	r24, Y+55	; 0x37
    2328:	98 ad       	ldd	r25, Y+56	; 0x38
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e2       	ldi	r20, 0x20	; 32
    2330:	51 e4       	ldi	r21, 0x41	; 65
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	98 ab       	std	Y+48, r25	; 0x30
    2348:	8f a7       	std	Y+47, r24	; 0x2f
    234a:	0f c0       	rjmp	.+30     	; 0x236a <LCD_displayCharacter+0xdc>
    234c:	89 e1       	ldi	r24, 0x19	; 25
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9e a7       	std	Y+46, r25	; 0x2e
    2352:	8d a7       	std	Y+45, r24	; 0x2d
    2354:	8d a5       	ldd	r24, Y+45	; 0x2d
    2356:	9e a5       	ldd	r25, Y+46	; 0x2e
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_displayCharacter+0xca>
    235c:	9e a7       	std	Y+46, r25	; 0x2e
    235e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	8f a5       	ldd	r24, Y+47	; 0x2f
    2362:	98 a9       	ldd	r25, Y+48	; 0x30
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	98 ab       	std	Y+48, r25	; 0x30
    2368:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236a:	8f a5       	ldd	r24, Y+47	; 0x2f
    236c:	98 a9       	ldd	r25, Y+48	; 0x30
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	69 f7       	brne	.-38     	; 0x234c <LCD_displayCharacter+0xbe>
    2372:	14 c0       	rjmp	.+40     	; 0x239c <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2374:	69 a9       	ldd	r22, Y+49	; 0x31
    2376:	7a a9       	ldd	r23, Y+50	; 0x32
    2378:	8b a9       	ldd	r24, Y+51	; 0x33
    237a:	9c a9       	ldd	r25, Y+52	; 0x34
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	98 ab       	std	Y+48, r25	; 0x30
    2386:	8f a7       	std	Y+47, r24	; 0x2f
    2388:	8f a5       	ldd	r24, Y+47	; 0x2f
    238a:	98 a9       	ldd	r25, Y+48	; 0x30
    238c:	9c a7       	std	Y+44, r25	; 0x2c
    238e:	8b a7       	std	Y+43, r24	; 0x2b
    2390:	8b a5       	ldd	r24, Y+43	; 0x2b
    2392:	9c a5       	ldd	r25, Y+44	; 0x2c
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <LCD_displayCharacter+0x106>
    2398:	9c a7       	std	Y+44, r25	; 0x2c
    239a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /*tas = 50ns*/ /* due to bad manufacturing*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	62 e0       	ldi	r22, 0x02	; 2
    23a0:	41 e0       	ldi	r20, 0x01	; 1
    23a2:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e8       	ldi	r26, 0x80	; 128
    23ac:	bf e3       	ldi	r27, 0x3F	; 63
    23ae:	8f a3       	std	Y+39, r24	; 0x27
    23b0:	98 a7       	std	Y+40, r25	; 0x28
    23b2:	a9 a7       	std	Y+41, r26	; 0x29
    23b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b6:	6f a1       	ldd	r22, Y+39	; 0x27
    23b8:	78 a5       	ldd	r23, Y+40	; 0x28
    23ba:	89 a5       	ldd	r24, Y+41	; 0x29
    23bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a e7       	ldi	r20, 0x7A	; 122
    23c4:	53 e4       	ldi	r21, 0x43	; 67
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	8b a3       	std	Y+35, r24	; 0x23
    23d0:	9c a3       	std	Y+36, r25	; 0x24
    23d2:	ad a3       	std	Y+37, r26	; 0x25
    23d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23d6:	6b a1       	ldd	r22, Y+35	; 0x23
    23d8:	7c a1       	ldd	r23, Y+36	; 0x24
    23da:	8d a1       	ldd	r24, Y+37	; 0x25
    23dc:	9e a1       	ldd	r25, Y+38	; 0x26
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	5f e3       	ldi	r21, 0x3F	; 63
    23e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ea:	88 23       	and	r24, r24
    23ec:	2c f4       	brge	.+10     	; 0x23f8 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9a a3       	std	Y+34, r25	; 0x22
    23f4:	89 a3       	std	Y+33, r24	; 0x21
    23f6:	3f c0       	rjmp	.+126    	; 0x2476 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    23f8:	6b a1       	ldd	r22, Y+35	; 0x23
    23fa:	7c a1       	ldd	r23, Y+36	; 0x24
    23fc:	8d a1       	ldd	r24, Y+37	; 0x25
    23fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	4f e7       	ldi	r20, 0x7F	; 127
    2406:	57 e4       	ldi	r21, 0x47	; 71
    2408:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    240c:	18 16       	cp	r1, r24
    240e:	4c f5       	brge	.+82     	; 0x2462 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2410:	6f a1       	ldd	r22, Y+39	; 0x27
    2412:	78 a5       	ldd	r23, Y+40	; 0x28
    2414:	89 a5       	ldd	r24, Y+41	; 0x29
    2416:	9a a5       	ldd	r25, Y+42	; 0x2a
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9a a3       	std	Y+34, r25	; 0x22
    2436:	89 a3       	std	Y+33, r24	; 0x21
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <LCD_displayCharacter+0x1ca>
    243a:	89 e1       	ldi	r24, 0x19	; 25
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	98 a3       	std	Y+32, r25	; 0x20
    2440:	8f 8f       	std	Y+31, r24	; 0x1f
    2442:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2444:	98 a1       	ldd	r25, Y+32	; 0x20
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_displayCharacter+0x1b8>
    244a:	98 a3       	std	Y+32, r25	; 0x20
    244c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	89 a1       	ldd	r24, Y+33	; 0x21
    2450:	9a a1       	ldd	r25, Y+34	; 0x22
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	9a a3       	std	Y+34, r25	; 0x22
    2456:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	89 a1       	ldd	r24, Y+33	; 0x21
    245a:	9a a1       	ldd	r25, Y+34	; 0x22
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f7       	brne	.-38     	; 0x243a <LCD_displayCharacter+0x1ac>
    2460:	14 c0       	rjmp	.+40     	; 0x248a <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	6b a1       	ldd	r22, Y+35	; 0x23
    2464:	7c a1       	ldd	r23, Y+36	; 0x24
    2466:	8d a1       	ldd	r24, Y+37	; 0x25
    2468:	9e a1       	ldd	r25, Y+38	; 0x26
    246a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9a a3       	std	Y+34, r25	; 0x22
    2474:	89 a3       	std	Y+33, r24	; 0x21
    2476:	89 a1       	ldd	r24, Y+33	; 0x21
    2478:	9a a1       	ldd	r25, Y+34	; 0x22
    247a:	9e 8f       	std	Y+30, r25	; 0x1e
    247c:	8d 8f       	std	Y+29, r24	; 0x1d
    247e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2480:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <LCD_displayCharacter+0x1f4>
    2486:	9e 8f       	std	Y+30, r25	; 0x1e
    2488:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
    248a:	82 e0       	ldi	r24, 0x02	; 2
    248c:	69 ad       	ldd	r22, Y+57	; 0x39
    248e:	0e 94 4c 09 	call	0x1298	; 0x1298 <GPIO_writePort>
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a0 e8       	ldi	r26, 0x80	; 128
    2498:	bf e3       	ldi	r27, 0x3F	; 63
    249a:	89 8f       	std	Y+25, r24	; 0x19
    249c:	9a 8f       	std	Y+26, r25	; 0x1a
    249e:	ab 8f       	std	Y+27, r26	; 0x1b
    24a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a2:	69 8d       	ldd	r22, Y+25	; 0x19
    24a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	4a e7       	ldi	r20, 0x7A	; 122
    24b0:	53 e4       	ldi	r21, 0x43	; 67
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	8d 8b       	std	Y+21, r24	; 0x15
    24bc:	9e 8b       	std	Y+22, r25	; 0x16
    24be:	af 8b       	std	Y+23, r26	; 0x17
    24c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c2:	6d 89       	ldd	r22, Y+21	; 0x15
    24c4:	7e 89       	ldd	r23, Y+22	; 0x16
    24c6:	8f 89       	ldd	r24, Y+23	; 0x17
    24c8:	98 8d       	ldd	r25, Y+24	; 0x18
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e8       	ldi	r20, 0x80	; 128
    24d0:	5f e3       	ldi	r21, 0x3F	; 63
    24d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24d6:	88 23       	and	r24, r24
    24d8:	2c f4       	brge	.+10     	; 0x24e4 <LCD_displayCharacter+0x256>
		__ticks = 1;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9c 8b       	std	Y+20, r25	; 0x14
    24e0:	8b 8b       	std	Y+19, r24	; 0x13
    24e2:	3f c0       	rjmp	.+126    	; 0x2562 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    24e4:	6d 89       	ldd	r22, Y+21	; 0x15
    24e6:	7e 89       	ldd	r23, Y+22	; 0x16
    24e8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ea:	98 8d       	ldd	r25, Y+24	; 0x18
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	3f ef       	ldi	r19, 0xFF	; 255
    24f0:	4f e7       	ldi	r20, 0x7F	; 127
    24f2:	57 e4       	ldi	r21, 0x47	; 71
    24f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f8:	18 16       	cp	r1, r24
    24fa:	4c f5       	brge	.+82     	; 0x254e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fc:	69 8d       	ldd	r22, Y+25	; 0x19
    24fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2502:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e2       	ldi	r20, 0x20	; 32
    250a:	51 e4       	ldi	r21, 0x41	; 65
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	bc 01       	movw	r22, r24
    2516:	cd 01       	movw	r24, r26
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9c 8b       	std	Y+20, r25	; 0x14
    2522:	8b 8b       	std	Y+19, r24	; 0x13
    2524:	0f c0       	rjmp	.+30     	; 0x2544 <LCD_displayCharacter+0x2b6>
    2526:	89 e1       	ldi	r24, 0x19	; 25
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9a 8b       	std	Y+18, r25	; 0x12
    252c:	89 8b       	std	Y+17, r24	; 0x11
    252e:	89 89       	ldd	r24, Y+17	; 0x11
    2530:	9a 89       	ldd	r25, Y+18	; 0x12
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <LCD_displayCharacter+0x2a4>
    2536:	9a 8b       	std	Y+18, r25	; 0x12
    2538:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253a:	8b 89       	ldd	r24, Y+19	; 0x13
    253c:	9c 89       	ldd	r25, Y+20	; 0x14
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	9c 8b       	std	Y+20, r25	; 0x14
    2542:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2544:	8b 89       	ldd	r24, Y+19	; 0x13
    2546:	9c 89       	ldd	r25, Y+20	; 0x14
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	69 f7       	brne	.-38     	; 0x2526 <LCD_displayCharacter+0x298>
    254c:	14 c0       	rjmp	.+40     	; 0x2576 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    254e:	6d 89       	ldd	r22, Y+21	; 0x15
    2550:	7e 89       	ldd	r23, Y+22	; 0x16
    2552:	8f 89       	ldd	r24, Y+23	; 0x17
    2554:	98 8d       	ldd	r25, Y+24	; 0x18
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9c 8b       	std	Y+20, r25	; 0x14
    2560:	8b 8b       	std	Y+19, r24	; 0x13
    2562:	8b 89       	ldd	r24, Y+19	; 0x13
    2564:	9c 89       	ldd	r25, Y+20	; 0x14
    2566:	98 8b       	std	Y+16, r25	; 0x10
    2568:	8f 87       	std	Y+15, r24	; 0x0f
    256a:	8f 85       	ldd	r24, Y+15	; 0x0f
    256c:	98 89       	ldd	r25, Y+16	; 0x10
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <LCD_displayCharacter+0x2e0>
    2572:	98 8b       	std	Y+16, r25	; 0x10
    2574:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	62 e0       	ldi	r22, 0x02	; 2
    257a:	40 e0       	ldi	r20, 0x00	; 0
    257c:	0e 94 72 07 	call	0xee4	; 0xee4 <GPIO_writePin>
    2580:	80 e0       	ldi	r24, 0x00	; 0
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	a0 e8       	ldi	r26, 0x80	; 128
    2586:	bf e3       	ldi	r27, 0x3F	; 63
    2588:	8b 87       	std	Y+11, r24	; 0x0b
    258a:	9c 87       	std	Y+12, r25	; 0x0c
    258c:	ad 87       	std	Y+13, r26	; 0x0d
    258e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2590:	6b 85       	ldd	r22, Y+11	; 0x0b
    2592:	7c 85       	ldd	r23, Y+12	; 0x0c
    2594:	8d 85       	ldd	r24, Y+13	; 0x0d
    2596:	9e 85       	ldd	r25, Y+14	; 0x0e
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a e7       	ldi	r20, 0x7A	; 122
    259e:	53 e4       	ldi	r21, 0x43	; 67
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	8f 83       	std	Y+7, r24	; 0x07
    25aa:	98 87       	std	Y+8, r25	; 0x08
    25ac:	a9 87       	std	Y+9, r26	; 0x09
    25ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b0:	6f 81       	ldd	r22, Y+7	; 0x07
    25b2:	78 85       	ldd	r23, Y+8	; 0x08
    25b4:	89 85       	ldd	r24, Y+9	; 0x09
    25b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e8       	ldi	r20, 0x80	; 128
    25be:	5f e3       	ldi	r21, 0x3F	; 63
    25c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25c4:	88 23       	and	r24, r24
    25c6:	2c f4       	brge	.+10     	; 0x25d2 <LCD_displayCharacter+0x344>
		__ticks = 1;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9e 83       	std	Y+6, r25	; 0x06
    25ce:	8d 83       	std	Y+5, r24	; 0x05
    25d0:	3f c0       	rjmp	.+126    	; 0x2650 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    25d2:	6f 81       	ldd	r22, Y+7	; 0x07
    25d4:	78 85       	ldd	r23, Y+8	; 0x08
    25d6:	89 85       	ldd	r24, Y+9	; 0x09
    25d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	3f ef       	ldi	r19, 0xFF	; 255
    25de:	4f e7       	ldi	r20, 0x7F	; 127
    25e0:	57 e4       	ldi	r21, 0x47	; 71
    25e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e6:	18 16       	cp	r1, r24
    25e8:	4c f5       	brge	.+82     	; 0x263c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e2       	ldi	r20, 0x20	; 32
    25f8:	51 e4       	ldi	r21, 0x41	; 65
    25fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	bc 01       	movw	r22, r24
    2604:	cd 01       	movw	r24, r26
    2606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	9e 83       	std	Y+6, r25	; 0x06
    2610:	8d 83       	std	Y+5, r24	; 0x05
    2612:	0f c0       	rjmp	.+30     	; 0x2632 <LCD_displayCharacter+0x3a4>
    2614:	89 e1       	ldi	r24, 0x19	; 25
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9c 83       	std	Y+4, r25	; 0x04
    261a:	8b 83       	std	Y+3, r24	; 0x03
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	9c 81       	ldd	r25, Y+4	; 0x04
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <LCD_displayCharacter+0x392>
    2624:	9c 83       	std	Y+4, r25	; 0x04
    2626:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	9e 83       	std	Y+6, r25	; 0x06
    2630:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2632:	8d 81       	ldd	r24, Y+5	; 0x05
    2634:	9e 81       	ldd	r25, Y+6	; 0x06
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	69 f7       	brne	.-38     	; 0x2614 <LCD_displayCharacter+0x386>
    263a:	14 c0       	rjmp	.+40     	; 0x2664 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263c:	6f 81       	ldd	r22, Y+7	; 0x07
    263e:	78 85       	ldd	r23, Y+8	; 0x08
    2640:	89 85       	ldd	r24, Y+9	; 0x09
    2642:	9a 85       	ldd	r25, Y+10	; 0x0a
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	9e 83       	std	Y+6, r25	; 0x06
    264e:	8d 83       	std	Y+5, r24	; 0x05
    2650:	8d 81       	ldd	r24, Y+5	; 0x05
    2652:	9e 81       	ldd	r25, Y+6	; 0x06
    2654:	9a 83       	std	Y+2, r25	; 0x02
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	9a 81       	ldd	r25, Y+2	; 0x02
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <LCD_displayCharacter+0x3ce>
    2660:	9a 83       	std	Y+2, r25	; 0x02
    2662:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */

}
    2664:	e9 96       	adiw	r28, 0x39	; 57
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <LCD_displayString>:
void LCD_displayString(const char *Str){
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	00 d0       	rcall	.+0      	; 0x267c <LCD_displayString+0x6>
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	9a 83       	std	Y+2, r25	; 0x02
    2682:	89 83       	std	Y+1, r24	; 0x01
    2684:	0a c0       	rjmp	.+20     	; 0x269a <LCD_displayString+0x24>
		i++;
	}
	 */

	while(*Str != '\0'){
		LCD_displayCharacter(*Str);
    2686:	e9 81       	ldd	r30, Y+1	; 0x01
    2688:	fa 81       	ldd	r31, Y+2	; 0x02
    268a:	80 81       	ld	r24, Z
    268c:	0e 94 47 11 	call	0x228e	; 0x228e <LCD_displayCharacter>
		Str++;
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	01 96       	adiw	r24, 0x01	; 1
    2696:	9a 83       	std	Y+2, r25	; 0x02
    2698:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayCharacter(*(Str+i));
		i++;
	}
	 */

	while(*Str != '\0'){
    269a:	e9 81       	ldd	r30, Y+1	; 0x01
    269c:	fa 81       	ldd	r31, Y+2	; 0x02
    269e:	80 81       	ld	r24, Z
    26a0:	88 23       	and	r24, r24
    26a2:	89 f7       	brne	.-30     	; 0x2686 <LCD_displayString+0x10>
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <LCD_moveCursor+0x6>
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <LCD_moveCursor+0x8>
    26b6:	0f 92       	push	r0
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	8a 83       	std	Y+2, r24	; 0x02
    26be:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	switch(row)
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	28 2f       	mov	r18, r24
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	3d 83       	std	Y+5, r19	; 0x05
    26c8:	2c 83       	std	Y+4, r18	; 0x04
    26ca:	8c 81       	ldd	r24, Y+4	; 0x04
    26cc:	9d 81       	ldd	r25, Y+5	; 0x05
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	91 05       	cpc	r25, r1
    26d2:	c1 f0       	breq	.+48     	; 0x2704 <LCD_moveCursor+0x56>
    26d4:	2c 81       	ldd	r18, Y+4	; 0x04
    26d6:	3d 81       	ldd	r19, Y+5	; 0x05
    26d8:	22 30       	cpi	r18, 0x02	; 2
    26da:	31 05       	cpc	r19, r1
    26dc:	2c f4       	brge	.+10     	; 0x26e8 <LCD_moveCursor+0x3a>
    26de:	8c 81       	ldd	r24, Y+4	; 0x04
    26e0:	9d 81       	ldd	r25, Y+5	; 0x05
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	61 f0       	breq	.+24     	; 0x26fe <LCD_moveCursor+0x50>
    26e6:	19 c0       	rjmp	.+50     	; 0x271a <LCD_moveCursor+0x6c>
    26e8:	2c 81       	ldd	r18, Y+4	; 0x04
    26ea:	3d 81       	ldd	r19, Y+5	; 0x05
    26ec:	22 30       	cpi	r18, 0x02	; 2
    26ee:	31 05       	cpc	r19, r1
    26f0:	69 f0       	breq	.+26     	; 0x270c <LCD_moveCursor+0x5e>
    26f2:	8c 81       	ldd	r24, Y+4	; 0x04
    26f4:	9d 81       	ldd	r25, Y+5	; 0x05
    26f6:	83 30       	cpi	r24, 0x03	; 3
    26f8:	91 05       	cpc	r25, r1
    26fa:	61 f0       	breq	.+24     	; 0x2714 <LCD_moveCursor+0x66>
    26fc:	0e c0       	rjmp	.+28     	; 0x271a <LCD_moveCursor+0x6c>
	{
	case 0 :
		lcd_memory_address = col;
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	0b c0       	rjmp	.+22     	; 0x271a <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = 0x40+col;
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	80 5c       	subi	r24, 0xC0	; 192
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	07 c0       	rjmp	.+14     	; 0x271a <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = 0x10+col;
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	80 5f       	subi	r24, 0xF0	; 240
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	03 c0       	rjmp	.+6      	; 0x271a <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = 0x50+col;
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	80 5b       	subi	r24, 0xB0	; 176
    2718:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	80 68       	ori	r24, 0x80	; 128
    271e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_sendCommand>
}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	00 d0       	rcall	.+0      	; 0x2738 <LCD_displayStringRowColumn+0x6>
    2738:	00 d0       	rcall	.+0      	; 0x273a <LCD_displayStringRowColumn+0x8>
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	6a 83       	std	Y+2, r22	; 0x02
    2742:	5c 83       	std	Y+4, r21	; 0x04
    2744:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	6a 81       	ldd	r22, Y+2	; 0x02
    274a:	0e 94 57 13 	call	0x26ae	; 0x26ae <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	9c 81       	ldd	r25, Y+4	; 0x04
    2752:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>
}
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	cf 91       	pop	r28
    2760:	df 91       	pop	r29
    2762:	08 95       	ret

00002764 <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data){
    2764:	df 93       	push	r29
    2766:	cf 93       	push	r28
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	62 97       	sbiw	r28, 0x12	; 18
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	9a 8b       	std	Y+18, r25	; 0x12
    277a:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    277c:	89 89       	ldd	r24, Y+17	; 0x11
    277e:	9a 89       	ldd	r25, Y+18	; 0x12
    2780:	9e 01       	movw	r18, r28
    2782:	2f 5f       	subi	r18, 0xFF	; 255
    2784:	3f 4f       	sbci	r19, 0xFF	; 255
    2786:	b9 01       	movw	r22, r18
    2788:	4a e0       	ldi	r20, 0x0A	; 10
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <itoa>
	LCD_displayString(buff); /* Display the string */
    2790:	ce 01       	movw	r24, r28
    2792:	01 96       	adiw	r24, 0x01	; 1
    2794:	0e 94 3b 13 	call	0x2676	; 0x2676 <LCD_displayString>

}
    2798:	62 96       	adiw	r28, 0x12	; 18
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void){
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command  0x01 */
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <LCD_sendCommand>
}
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	08 95       	ret

000027be <__vector_9>:
static volatile void (*g_timer2CallBackPtr)(void) = NULL_PTR;

/*******************************************************************************
 *                      Interrupt handler                                      *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    27be:	1f 92       	push	r1
    27c0:	0f 92       	push	r0
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	0f 92       	push	r0
    27c6:	11 24       	eor	r1, r1
    27c8:	2f 93       	push	r18
    27ca:	3f 93       	push	r19
    27cc:	4f 93       	push	r20
    27ce:	5f 93       	push	r21
    27d0:	6f 93       	push	r22
    27d2:	7f 93       	push	r23
    27d4:	8f 93       	push	r24
    27d6:	9f 93       	push	r25
    27d8:	af 93       	push	r26
    27da:	bf 93       	push	r27
    27dc:	ef 93       	push	r30
    27de:	ff 93       	push	r31
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    27e8:	80 91 0d 01 	lds	r24, 0x010D
    27ec:	90 91 0e 01 	lds	r25, 0x010E
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	29 f0       	breq	.+10     	; 0x27fe <__vector_9+0x40>
		(*g_timer0CallBackPtr)();
    27f4:	e0 91 0d 01 	lds	r30, 0x010D
    27f8:	f0 91 0e 01 	lds	r31, 0x010E
    27fc:	09 95       	icall
	}
}
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	ff 91       	pop	r31
    2804:	ef 91       	pop	r30
    2806:	bf 91       	pop	r27
    2808:	af 91       	pop	r26
    280a:	9f 91       	pop	r25
    280c:	8f 91       	pop	r24
    280e:	7f 91       	pop	r23
    2810:	6f 91       	pop	r22
    2812:	5f 91       	pop	r21
    2814:	4f 91       	pop	r20
    2816:	3f 91       	pop	r19
    2818:	2f 91       	pop	r18
    281a:	0f 90       	pop	r0
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	0f 90       	pop	r0
    2820:	1f 90       	pop	r1
    2822:	18 95       	reti

00002824 <__vector_19>:
ISR(TIMER0_COMP_vect){
    2824:	1f 92       	push	r1
    2826:	0f 92       	push	r0
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	0f 92       	push	r0
    282c:	11 24       	eor	r1, r1
    282e:	2f 93       	push	r18
    2830:	3f 93       	push	r19
    2832:	4f 93       	push	r20
    2834:	5f 93       	push	r21
    2836:	6f 93       	push	r22
    2838:	7f 93       	push	r23
    283a:	8f 93       	push	r24
    283c:	9f 93       	push	r25
    283e:	af 93       	push	r26
    2840:	bf 93       	push	r27
    2842:	ef 93       	push	r30
    2844:	ff 93       	push	r31
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    284e:	80 91 0d 01 	lds	r24, 0x010D
    2852:	90 91 0e 01 	lds	r25, 0x010E
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	29 f0       	breq	.+10     	; 0x2864 <__vector_19+0x40>
		(*g_timer0CallBackPtr)();
    285a:	e0 91 0d 01 	lds	r30, 0x010D
    285e:	f0 91 0e 01 	lds	r31, 0x010E
    2862:	09 95       	icall
	}
}
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	ff 91       	pop	r31
    286a:	ef 91       	pop	r30
    286c:	bf 91       	pop	r27
    286e:	af 91       	pop	r26
    2870:	9f 91       	pop	r25
    2872:	8f 91       	pop	r24
    2874:	7f 91       	pop	r23
    2876:	6f 91       	pop	r22
    2878:	5f 91       	pop	r21
    287a:	4f 91       	pop	r20
    287c:	3f 91       	pop	r19
    287e:	2f 91       	pop	r18
    2880:	0f 90       	pop	r0
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	0f 90       	pop	r0
    2886:	1f 90       	pop	r1
    2888:	18 95       	reti

0000288a <TIMERS_init>:
 * 	4. Set timer compare value
 * 	Function Input: timer_no => select between timers0,1,2
 * 					Timer configType => setup timer configuration by passing a structure's address
 * 	Note that Timer/Counter1 and Timer/Counter0 share the same prescaler
 */
void TIMERS_init(const TIMERS_ConfigType * Timer_Config_Ptr, TIMERS_Select timer_no){
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	00 d0       	rcall	.+0      	; 0x2890 <TIMERS_init+0x6>
    2890:	00 d0       	rcall	.+0      	; 0x2892 <TIMERS_init+0x8>
    2892:	0f 92       	push	r0
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	9a 83       	std	Y+2, r25	; 0x02
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_no)
    289e:	8b 81       	ldd	r24, Y+3	; 0x03
    28a0:	88 2f       	mov	r24, r24
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	09 f0       	breq	.+2      	; 0x28aa <TIMERS_init+0x20>
    28a8:	45 c0       	rjmp	.+138    	; 0x2934 <TIMERS_init+0xaa>
		 * BIT3,6 WGM01:0 => CTC mode => 1,0
		 * Bit 5:4 – COM01:0 => 0,0 non_PWM
		 * Bit 2:0 – CS02:0: Clock Select "prescalers"
		 */
		/*set timer0 to run on the required clock select*/
		TCCR0 = (0x07 & Timer_Config_Ptr->clock);
    28aa:	a3 e5       	ldi	r26, 0x53	; 83
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e9 81       	ldd	r30, Y+1	; 0x01
    28b0:	fa 81       	ldd	r31, Y+2	; 0x02
    28b2:	80 81       	ld	r24, Z
    28b4:	87 70       	andi	r24, 0x07	; 7
    28b6:	8c 93       	st	X, r24
		/*set timer0 initial value*/
		TCNT0 = Timer_Config_Ptr->timer_init_value;
    28b8:	a2 e5       	ldi	r26, 0x52	; 82
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e9 81       	ldd	r30, Y+1	; 0x01
    28be:	fa 81       	ldd	r31, Y+2	; 0x02
    28c0:	82 81       	ldd	r24, Z+2	; 0x02
    28c2:	93 81       	ldd	r25, Z+3	; 0x03
    28c4:	8c 93       	st	X, r24
		switch(Timer_Config_Ptr->mode)
    28c6:	e9 81       	ldd	r30, Y+1	; 0x01
    28c8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ca:	81 81       	ldd	r24, Z+1	; 0x01
    28cc:	28 2f       	mov	r18, r24
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	3d 83       	std	Y+5, r19	; 0x05
    28d2:	2c 83       	std	Y+4, r18	; 0x04
    28d4:	8c 81       	ldd	r24, Y+4	; 0x04
    28d6:	9d 81       	ldd	r25, Y+5	; 0x05
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	31 f0       	breq	.+12     	; 0x28e8 <TIMERS_init+0x5e>
    28dc:	2c 81       	ldd	r18, Y+4	; 0x04
    28de:	3d 81       	ldd	r19, Y+5	; 0x05
    28e0:	21 30       	cpi	r18, 0x01	; 1
    28e2:	31 05       	cpc	r19, r1
    28e4:	89 f0       	breq	.+34     	; 0x2908 <TIMERS_init+0x7e>
    28e6:	26 c0       	rjmp	.+76     	; 0x2934 <TIMERS_init+0xaa>
		{
		case OVERFLOW_MODE:
			/*set pin7 FOC0*/
			TCCR0 |= (1<<FOC0);
    28e8:	a3 e5       	ldi	r26, 0x53	; 83
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e3 e5       	ldi	r30, 0x53	; 83
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	80 68       	ori	r24, 0x80	; 128
    28f4:	8c 93       	st	X, r24
//			TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
			/*enable timer overflow interrupt and disable CTC interrupt*/
			TIMSK = (TIMSK & 0xFC) | (1<<TOIE0);
    28f6:	a9 e5       	ldi	r26, 0x59	; 89
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	e9 e5       	ldi	r30, 0x59	; 89
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	8c 7f       	andi	r24, 0xFC	; 252
    2902:	81 60       	ori	r24, 0x01	; 1
    2904:	8c 93       	st	X, r24
    2906:	16 c0       	rjmp	.+44     	; 0x2934 <TIMERS_init+0xaa>
			break;
		case CTC_MODE:
			/*assign a compare match value to Output Compare Register – OCR0*/
			OCR0 = Timer_Config_Ptr->timer_Compare_value;
    2908:	ac e5       	ldi	r26, 0x5C	; 92
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e9 81       	ldd	r30, Y+1	; 0x01
    290e:	fa 81       	ldd	r31, Y+2	; 0x02
    2910:	84 81       	ldd	r24, Z+4	; 0x04
    2912:	95 81       	ldd	r25, Z+5	; 0x05
    2914:	8c 93       	st	X, r24
			/*set timer0 to operate on CTC mode*/
			TCCR0 |= (1<<FOC0) | (1<<WGM01);
    2916:	a3 e5       	ldi	r26, 0x53	; 83
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e3 e5       	ldi	r30, 0x53	; 83
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	88 68       	ori	r24, 0x88	; 136
    2922:	8c 93       	st	X, r24
			/*disable overflow interrupt and enable CTC interrupt*/
			TIMSK = (TIMSK & 0xFC) | (1<<OCIE0);
    2924:	a9 e5       	ldi	r26, 0x59	; 89
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e9 e5       	ldi	r30, 0x59	; 89
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	8c 7f       	andi	r24, 0xFC	; 252
    2930:	82 60       	ori	r24, 0x02	; 2
    2932:	8c 93       	st	X, r24
	case TIMER1_ID:
		break;
	case TIMER2_ID:
		break;
	}
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	08 95       	ret

00002944 <TIMERS_setCallBack>:

/*
 * Description: Function to set the Call Back function address for each timer.
 */
void TIMERS_setCallBack(void(*a_ptr)(void), TIMERS_Select timer_no){
    2944:	df 93       	push	r29
    2946:	cf 93       	push	r28
    2948:	00 d0       	rcall	.+0      	; 0x294a <TIMERS_setCallBack+0x6>
    294a:	0f 92       	push	r0
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	9a 83       	std	Y+2, r25	; 0x02
    2952:	89 83       	std	Y+1, r24	; 0x01
    2954:	6b 83       	std	Y+3, r22	; 0x03
	if (timer_no == TIMER0_ID)
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	88 23       	and	r24, r24
    295a:	39 f4       	brne	.+14     	; 0x296a <TIMERS_setCallBack+0x26>
		g_timer0CallBackPtr = a_ptr;
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	90 93 0e 01 	sts	0x010E, r25
    2964:	80 93 0d 01 	sts	0x010D, r24
    2968:	13 c0       	rjmp	.+38     	; 0x2990 <TIMERS_setCallBack+0x4c>
	else if(timer_no == TIMER1_ID)
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	39 f4       	brne	.+14     	; 0x297e <TIMERS_setCallBack+0x3a>
		g_timer1CallBackPtr = a_ptr;
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	90 93 10 01 	sts	0x0110, r25
    2978:	80 93 0f 01 	sts	0x010F, r24
    297c:	09 c0       	rjmp	.+18     	; 0x2990 <TIMERS_setCallBack+0x4c>
	else if(timer_no == TIMER2_ID)
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	82 30       	cpi	r24, 0x02	; 2
    2982:	31 f4       	brne	.+12     	; 0x2990 <TIMERS_setCallBack+0x4c>
		g_timer2CallBackPtr = a_ptr;
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	9a 81       	ldd	r25, Y+2	; 0x02
    2988:	90 93 12 01 	sts	0x0112, r25
    298c:	80 93 11 01 	sts	0x0111, r24
}
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <clearTimerValue>:

/*
 * Description: Function to clear a timer Value to start count from ZERO
 */
void clearTimerValue(TIMERS_Select timer_no){
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	0f 92       	push	r0
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	89 83       	std	Y+1, r24	; 0x01
	if (timer_no == TIMER0_ID)
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	88 23       	and	r24, r24
    29ac:	21 f4       	brne	.+8      	; 0x29b6 <clearTimerValue+0x1a>
		TCNT0 = 0;
    29ae:	e2 e5       	ldi	r30, 0x52	; 82
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	10 82       	st	Z, r1
    29b4:	0e c0       	rjmp	.+28     	; 0x29d2 <clearTimerValue+0x36>
	else if(timer_no == TIMER1_ID)
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	29 f4       	brne	.+10     	; 0x29c6 <clearTimerValue+0x2a>
		TCNT1 = 0;
    29bc:	ec e4       	ldi	r30, 0x4C	; 76
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	11 82       	std	Z+1, r1	; 0x01
    29c2:	10 82       	st	Z, r1
    29c4:	06 c0       	rjmp	.+12     	; 0x29d2 <clearTimerValue+0x36>
	else if(timer_no == TIMER2_ID)
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	82 30       	cpi	r24, 0x02	; 2
    29ca:	19 f4       	brne	.+6      	; 0x29d2 <clearTimerValue+0x36>
		TCNT2 = 0;
    29cc:	e4 e4       	ldi	r30, 0x44	; 68
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	10 82       	st	Z, r1

}
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <TIMERS_DeInit>:

/*
 * Description: Function to disable a timer
 */
void TIMERS_DeInit(TIMERS_Select timer_no){
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	0f 92       	push	r0
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	89 83       	std	Y+1, r24	; 0x01
	if (timer_no == TIMER0_ID){
    29e6:	89 81       	ldd	r24, Y+1	; 0x01
    29e8:	88 23       	and	r24, r24
    29ea:	59 f4       	brne	.+22     	; 0x2a02 <TIMERS_DeInit+0x28>
		TCCR0 = 0;
    29ec:	e3 e5       	ldi	r30, 0x53	; 83
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	10 82       	st	Z, r1
		TIMSK &= 0xFC;
    29f2:	a9 e5       	ldi	r26, 0x59	; 89
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	e9 e5       	ldi	r30, 0x59	; 89
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	80 81       	ld	r24, Z
    29fc:	8c 7f       	andi	r24, 0xFC	; 252
    29fe:	8c 93       	st	X, r24
    2a00:	1e c0       	rjmp	.+60     	; 0x2a3e <TIMERS_DeInit+0x64>
	}
	else if(timer_no == TIMER1_ID){
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	71 f4       	brne	.+28     	; 0x2a24 <TIMERS_DeInit+0x4a>
		TCCR1A = 0;
    2a08:	ef e4       	ldi	r30, 0x4F	; 79
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	10 82       	st	Z, r1
		TCCR1B = 0;
    2a0e:	ee e4       	ldi	r30, 0x4E	; 78
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	10 82       	st	Z, r1
		TIMSK &= 0xC3;
    2a14:	a9 e5       	ldi	r26, 0x59	; 89
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e9 e5       	ldi	r30, 0x59	; 89
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	83 7c       	andi	r24, 0xC3	; 195
    2a20:	8c 93       	st	X, r24
    2a22:	0d c0       	rjmp	.+26     	; 0x2a3e <TIMERS_DeInit+0x64>
	}
	else if(timer_no == TIMER2_ID)
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	82 30       	cpi	r24, 0x02	; 2
    2a28:	51 f4       	brne	.+20     	; 0x2a3e <TIMERS_DeInit+0x64>
	{
		TCCR2 = 0;
    2a2a:	e5 e4       	ldi	r30, 0x45	; 69
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	10 82       	st	Z, r1
		TIMSK &= 0x3F;
    2a30:	a9 e5       	ldi	r26, 0x59	; 89
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	e9 e5       	ldi	r30, 0x59	; 89
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	8f 73       	andi	r24, 0x3F	; 63
    2a3c:	8c 93       	st	X, r24
	}

}
    2a3e:	0f 90       	pop	r0
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <setTimerValue>:


/*
 * Description: Function to set initial value for TIMER/COUNTER Register
 */
void setTimerValue(TIMERS_Select timer_no, uint16 a_value){
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <setTimerValue+0x6>
    2a4c:	0f 92       	push	r0
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	7b 83       	std	Y+3, r23	; 0x03
    2a56:	6a 83       	std	Y+2, r22	; 0x02
	if (timer_no == TIMER0_ID)
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	88 23       	and	r24, r24
    2a5c:	29 f4       	brne	.+10     	; 0x2a68 <setTimerValue+0x22>
		TCNT0 = a_value;
    2a5e:	e2 e5       	ldi	r30, 0x52	; 82
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	80 83       	st	Z, r24
    2a66:	11 c0       	rjmp	.+34     	; 0x2a8a <setTimerValue+0x44>
	else if(timer_no == TIMER1_ID)
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	81 30       	cpi	r24, 0x01	; 1
    2a6c:	39 f4       	brne	.+14     	; 0x2a7c <setTimerValue+0x36>
		TCNT1 = a_value;
    2a6e:	ec e4       	ldi	r30, 0x4C	; 76
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	9b 81       	ldd	r25, Y+3	; 0x03
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
    2a7a:	07 c0       	rjmp	.+14     	; 0x2a8a <setTimerValue+0x44>
	else if(timer_no == TIMER2_ID)
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	82 30       	cpi	r24, 0x02	; 2
    2a80:	21 f4       	brne	.+8      	; 0x2a8a <setTimerValue+0x44>
		TCNT2 = a_value;
    2a82:	e4 e4       	ldi	r30, 0x44	; 68
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	8a 81       	ldd	r24, Y+2	; 0x02
    2a88:	80 83       	st	Z, r24
}
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate){
    2a96:	df 93       	push	r29
    2a98:	cf 93       	push	r28
    2a9a:	00 d0       	rcall	.+0      	; 0x2a9c <UART_init+0x6>
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <UART_init+0x8>
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <UART_init+0xa>
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	6b 83       	std	Y+3, r22	; 0x03
    2aa6:	7c 83       	std	Y+4, r23	; 0x04
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
    2aaa:	9e 83       	std	Y+6, r25	; 0x06
	uint16 a_ubrrValue = 0; /*to select the baud rate*/
    2aac:	1a 82       	std	Y+2, r1	; 0x02
    2aae:	19 82       	std	Y+1, r1	; 0x01
	 * 7    6   5   4   3  2   1   0
	 * RXC TXC UDRE FE DOR PE U2X MPCM
	 * most of those bits are flags
	 **********************************************************************/
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2ab0:	eb e2       	ldi	r30, 0x2B	; 43
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	82 e0       	ldi	r24, 0x02	; 2
    2ab6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2ab8:	ea e2       	ldi	r30, 0x2A	; 42
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	88 e1       	ldi	r24, 0x18	; 24
    2abe:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ1) |(1<<UCSZ0);
    2ac0:	e0 e4       	ldi	r30, 0x40	; 64
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	86 e8       	ldi	r24, 0x86	; 134
    2ac6:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	a_ubrrValue = F_CPU/16/baud_rate-1;
    2ac8:	84 e2       	ldi	r24, 0x24	; 36
    2aca:	94 ef       	ldi	r25, 0xF4	; 244
    2acc:	a0 e0       	ldi	r26, 0x00	; 0
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ad2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ad4:	4d 81       	ldd	r20, Y+5	; 0x05
    2ad6:	5e 81       	ldd	r21, Y+6	; 0x06
    2ad8:	bc 01       	movw	r22, r24
    2ada:	cd 01       	movw	r24, r26
    2adc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__udivmodsi4>
    2ae0:	da 01       	movw	r26, r20
    2ae2:	c9 01       	movw	r24, r18
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	9a 83       	std	Y+2, r25	; 0x02
    2ae8:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (unsigned char)(a_ubrrValue>>8);
    2aea:	e0 e4       	ldi	r30, 0x40	; 64
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	9a 81       	ldd	r25, Y+2	; 0x02
    2af2:	89 2f       	mov	r24, r25
    2af4:	99 27       	eor	r25, r25
    2af6:	80 83       	st	Z, r24
	UBRRL = (unsigned char)a_ubrrValue;
    2af8:	e9 e2       	ldi	r30, 0x29	; 41
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	80 83       	st	Z, r24

}
    2b00:	26 96       	adiw	r28, 0x06	; 6
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	0f 92       	push	r0
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    2b1e:	eb e2       	ldi	r30, 0x2B	; 43
    2b20:	f0 e0       	ldi	r31, 0x00	; 0
    2b22:	80 81       	ld	r24, Z
    2b24:	88 2f       	mov	r24, r24
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	80 72       	andi	r24, 0x20	; 32
    2b2a:	90 70       	andi	r25, 0x00	; 0
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	b9 f3       	breq	.-18     	; 0x2b1e <UART_sendByte+0xc>
	/*another method found in ATMEGA16 data sheet example*/
	/*	while ( !( UCSRA & (1<<UDRE)) ); */
	/* Put data into buffer, sends the data */
	UDR = data;
    2b30:	ec e2       	ldi	r30, 0x2C	; 44
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	80 83       	st	Z, r24
}
    2b38:	0f 90       	pop	r0
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void){
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	/*busy loop*/
	while ( !(UCSRA & (1<<RXC)) )
    2b48:	eb e2       	ldi	r30, 0x2B	; 43
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	88 23       	and	r24, r24
    2b50:	dc f7       	brge	.-10     	; 0x2b48 <UART_recieveByte+0x8>
		;
	/* Get and return received data from buffer */
	return UDR;
    2b52:	ec e2       	ldi	r30, 0x2C	; 44
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	80 81       	ld	r24, Z

}
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	08 95       	ret

00002b5e <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	00 d0       	rcall	.+0      	; 0x2b64 <UART_sendString+0x6>
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	9a 83       	std	Y+2, r25	; 0x02
    2b6a:	89 83       	std	Y+1, r24	; 0x01

}
    2b6c:	0f 90       	pop	r0
    2b6e:	0f 90       	pop	r0
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	08 95       	ret

00002b76 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str){
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <UART_receiveString+0x6>
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
	/*Receive until # */
}
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <__udivmodsi4>:
    2b8e:	a1 e2       	ldi	r26, 0x21	; 33
    2b90:	1a 2e       	mov	r1, r26
    2b92:	aa 1b       	sub	r26, r26
    2b94:	bb 1b       	sub	r27, r27
    2b96:	fd 01       	movw	r30, r26
    2b98:	0d c0       	rjmp	.+26     	; 0x2bb4 <__udivmodsi4_ep>

00002b9a <__udivmodsi4_loop>:
    2b9a:	aa 1f       	adc	r26, r26
    2b9c:	bb 1f       	adc	r27, r27
    2b9e:	ee 1f       	adc	r30, r30
    2ba0:	ff 1f       	adc	r31, r31
    2ba2:	a2 17       	cp	r26, r18
    2ba4:	b3 07       	cpc	r27, r19
    2ba6:	e4 07       	cpc	r30, r20
    2ba8:	f5 07       	cpc	r31, r21
    2baa:	20 f0       	brcs	.+8      	; 0x2bb4 <__udivmodsi4_ep>
    2bac:	a2 1b       	sub	r26, r18
    2bae:	b3 0b       	sbc	r27, r19
    2bb0:	e4 0b       	sbc	r30, r20
    2bb2:	f5 0b       	sbc	r31, r21

00002bb4 <__udivmodsi4_ep>:
    2bb4:	66 1f       	adc	r22, r22
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	88 1f       	adc	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	1a 94       	dec	r1
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <__udivmodsi4_loop>
    2bc0:	60 95       	com	r22
    2bc2:	70 95       	com	r23
    2bc4:	80 95       	com	r24
    2bc6:	90 95       	com	r25
    2bc8:	9b 01       	movw	r18, r22
    2bca:	ac 01       	movw	r20, r24
    2bcc:	bd 01       	movw	r22, r26
    2bce:	cf 01       	movw	r24, r30
    2bd0:	08 95       	ret

00002bd2 <__prologue_saves__>:
    2bd2:	2f 92       	push	r2
    2bd4:	3f 92       	push	r3
    2bd6:	4f 92       	push	r4
    2bd8:	5f 92       	push	r5
    2bda:	6f 92       	push	r6
    2bdc:	7f 92       	push	r7
    2bde:	8f 92       	push	r8
    2be0:	9f 92       	push	r9
    2be2:	af 92       	push	r10
    2be4:	bf 92       	push	r11
    2be6:	cf 92       	push	r12
    2be8:	df 92       	push	r13
    2bea:	ef 92       	push	r14
    2bec:	ff 92       	push	r15
    2bee:	0f 93       	push	r16
    2bf0:	1f 93       	push	r17
    2bf2:	cf 93       	push	r28
    2bf4:	df 93       	push	r29
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	ca 1b       	sub	r28, r26
    2bfc:	db 0b       	sbc	r29, r27
    2bfe:	0f b6       	in	r0, 0x3f	; 63
    2c00:	f8 94       	cli
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	0f be       	out	0x3f, r0	; 63
    2c06:	cd bf       	out	0x3d, r28	; 61
    2c08:	09 94       	ijmp

00002c0a <__epilogue_restores__>:
    2c0a:	2a 88       	ldd	r2, Y+18	; 0x12
    2c0c:	39 88       	ldd	r3, Y+17	; 0x11
    2c0e:	48 88       	ldd	r4, Y+16	; 0x10
    2c10:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c12:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c14:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c16:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c18:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c1c:	b9 84       	ldd	r11, Y+9	; 0x09
    2c1e:	c8 84       	ldd	r12, Y+8	; 0x08
    2c20:	df 80       	ldd	r13, Y+7	; 0x07
    2c22:	ee 80       	ldd	r14, Y+6	; 0x06
    2c24:	fd 80       	ldd	r15, Y+5	; 0x05
    2c26:	0c 81       	ldd	r16, Y+4	; 0x04
    2c28:	1b 81       	ldd	r17, Y+3	; 0x03
    2c2a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c2c:	b9 81       	ldd	r27, Y+1	; 0x01
    2c2e:	ce 0f       	add	r28, r30
    2c30:	d1 1d       	adc	r29, r1
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    2c3c:	ed 01       	movw	r28, r26
    2c3e:	08 95       	ret

00002c40 <itoa>:
    2c40:	fb 01       	movw	r30, r22
    2c42:	9f 01       	movw	r18, r30
    2c44:	e8 94       	clt
    2c46:	42 30       	cpi	r20, 0x02	; 2
    2c48:	c4 f0       	brlt	.+48     	; 0x2c7a <itoa+0x3a>
    2c4a:	45 32       	cpi	r20, 0x25	; 37
    2c4c:	b4 f4       	brge	.+44     	; 0x2c7a <itoa+0x3a>
    2c4e:	4a 30       	cpi	r20, 0x0A	; 10
    2c50:	29 f4       	brne	.+10     	; 0x2c5c <itoa+0x1c>
    2c52:	97 fb       	bst	r25, 7
    2c54:	1e f4       	brtc	.+6      	; 0x2c5c <itoa+0x1c>
    2c56:	90 95       	com	r25
    2c58:	81 95       	neg	r24
    2c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5c:	64 2f       	mov	r22, r20
    2c5e:	77 27       	eor	r23, r23
    2c60:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <__udivmodhi4>
    2c64:	80 5d       	subi	r24, 0xD0	; 208
    2c66:	8a 33       	cpi	r24, 0x3A	; 58
    2c68:	0c f0       	brlt	.+2      	; 0x2c6c <itoa+0x2c>
    2c6a:	89 5d       	subi	r24, 0xD9	; 217
    2c6c:	81 93       	st	Z+, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	a1 f7       	brne	.-24     	; 0x2c5c <itoa+0x1c>
    2c74:	16 f4       	brtc	.+4      	; 0x2c7a <itoa+0x3a>
    2c76:	5d e2       	ldi	r21, 0x2D	; 45
    2c78:	51 93       	st	Z+, r21
    2c7a:	10 82       	st	Z, r1
    2c7c:	c9 01       	movw	r24, r18
    2c7e:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <strrev>

00002c82 <strrev>:
    2c82:	dc 01       	movw	r26, r24
    2c84:	fc 01       	movw	r30, r24
    2c86:	67 2f       	mov	r22, r23
    2c88:	71 91       	ld	r23, Z+
    2c8a:	77 23       	and	r23, r23
    2c8c:	e1 f7       	brne	.-8      	; 0x2c86 <strrev+0x4>
    2c8e:	32 97       	sbiw	r30, 0x02	; 2
    2c90:	04 c0       	rjmp	.+8      	; 0x2c9a <strrev+0x18>
    2c92:	7c 91       	ld	r23, X
    2c94:	6d 93       	st	X+, r22
    2c96:	70 83       	st	Z, r23
    2c98:	62 91       	ld	r22, -Z
    2c9a:	ae 17       	cp	r26, r30
    2c9c:	bf 07       	cpc	r27, r31
    2c9e:	c8 f3       	brcs	.-14     	; 0x2c92 <strrev+0x10>
    2ca0:	08 95       	ret

00002ca2 <__udivmodhi4>:
    2ca2:	aa 1b       	sub	r26, r26
    2ca4:	bb 1b       	sub	r27, r27
    2ca6:	51 e1       	ldi	r21, 0x11	; 17
    2ca8:	07 c0       	rjmp	.+14     	; 0x2cb8 <__udivmodhi4_ep>

00002caa <__udivmodhi4_loop>:
    2caa:	aa 1f       	adc	r26, r26
    2cac:	bb 1f       	adc	r27, r27
    2cae:	a6 17       	cp	r26, r22
    2cb0:	b7 07       	cpc	r27, r23
    2cb2:	10 f0       	brcs	.+4      	; 0x2cb8 <__udivmodhi4_ep>
    2cb4:	a6 1b       	sub	r26, r22
    2cb6:	b7 0b       	sbc	r27, r23

00002cb8 <__udivmodhi4_ep>:
    2cb8:	88 1f       	adc	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	5a 95       	dec	r21
    2cbe:	a9 f7       	brne	.-22     	; 0x2caa <__udivmodhi4_loop>
    2cc0:	80 95       	com	r24
    2cc2:	90 95       	com	r25
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	08 95       	ret

00002cca <_exit>:
    2cca:	f8 94       	cli

00002ccc <__stop_program>:
    2ccc:	ff cf       	rjmp	.-2      	; 0x2ccc <__stop_program>
