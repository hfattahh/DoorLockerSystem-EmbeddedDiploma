
door_locker_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002112  000021a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800074  00800074  000021ba  2**0
                  ALLOC
  3 .stab         00001aa0  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f89  00000000  00000000  00003c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000079c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008778  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000088d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009333  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 55 0e 	call	0x1caa	; 0x1caa <main>
      8a:	0c 94 87 10 	jmp	0x210e	; 0x210e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 10 	jmp	0x202e	; 0x202e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 10 	jmp	0x202e	; 0x202e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 17 10 	jmp	0x202e	; 0x202e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 17 10 	jmp	0x202e	; 0x202e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 17 10 	jmp	0x202e	; 0x202e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 37 10 	jmp	0x206e	; 0x206e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:

/*
function to setup the dirction on specified pin Input/output
if pin number or port number ar invalid, function will not handle it
*/
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	85 30       	cpi	r24, 0x05	; 5
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	e4 c0       	rjmp	.+456    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	89 30       	cpi	r24, 0x09	; 9
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	e0 c0       	rjmp	.+448    	; 0xd2a <GPIO_setupPinDirection+0x1e4>

    }
    else{
        switch (port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	47 c0       	rjmp	.+142    	; 0xc0e <GPIO_setupPinDirection+0xc8>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	cb c0       	rjmp	.+406    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	67 c0       	rjmp	.+206    	; 0xc6e <GPIO_setupPinDirection+0x128>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	91 c0       	rjmp	.+290    	; 0xcce <GPIO_setupPinDirection+0x188>
     bac:	be c0       	rjmp	.+380    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
        {
        case PORTA_ID:
            if(PIN_OUTPUT == direction){
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
                SET_BIT(DDRA, pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	a7 c0       	rjmp	.+334    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	88 23       	and	r24, r24
     be0:	09 f0       	breq	.+2      	; 0xbe4 <GPIO_setupPinDirection+0x9e>
     be2:	a3 c0       	rjmp	.+326    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRA, pin_num);
     be4:	aa e3       	ldi	r26, 0x3A	; 58
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	ea e3       	ldi	r30, 0x3A	; 58
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 2e       	mov	r0, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <GPIO_setupPinDirection+0xbc>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 94       	dec	r0
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <GPIO_setupPinDirection+0xb8>
     c06:	80 95       	com	r24
     c08:	84 23       	and	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	8e c0       	rjmp	.+284    	; 0xd2a <GPIO_setupPinDirection+0x1e4>

            }
            break;
        case PORTB_ID:
            if(PIN_OUTPUT == direction){
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	a1 f4       	brne	.+40     	; 0xc3c <GPIO_setupPinDirection+0xf6>
                SET_BIT(DDRB, pin_num);
     c14:	a7 e3       	ldi	r26, 0x37	; 55
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e7 e3       	ldi	r30, 0x37	; 55
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <GPIO_setupPinDirection+0xec>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <GPIO_setupPinDirection+0xe8>
     c36:	84 2b       	or	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	77 c0       	rjmp	.+238    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	88 23       	and	r24, r24
     c40:	09 f0       	breq	.+2      	; 0xc44 <GPIO_setupPinDirection+0xfe>
     c42:	73 c0       	rjmp	.+230    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRB, pin_num);
     c44:	a7 e3       	ldi	r26, 0x37	; 55
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e7 e3       	ldi	r30, 0x37	; 55
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	48 2f       	mov	r20, r24
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	02 2e       	mov	r0, r18
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <GPIO_setupPinDirection+0x11c>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	0a 94       	dec	r0
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <GPIO_setupPinDirection+0x118>
     c66:	80 95       	com	r24
     c68:	84 23       	and	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	5e c0       	rjmp	.+188    	; 0xd2a <GPIO_setupPinDirection+0x1e4>

            }
            break;
        case PORTC_ID:
            if(PIN_OUTPUT == direction){
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	a1 f4       	brne	.+40     	; 0xc9c <GPIO_setupPinDirection+0x156>
                SET_BIT(DDRC, pin_num);
     c74:	a4 e3       	ldi	r26, 0x34	; 52
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e4 e3       	ldi	r30, 0x34	; 52
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <GPIO_setupPinDirection+0x14c>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <GPIO_setupPinDirection+0x148>
     c96:	84 2b       	or	r24, r20
     c98:	8c 93       	st	X, r24
     c9a:	47 c0       	rjmp	.+142    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	88 23       	and	r24, r24
     ca0:	09 f0       	breq	.+2      	; 0xca4 <GPIO_setupPinDirection+0x15e>
     ca2:	43 c0       	rjmp	.+134    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRC, pin_num);
     ca4:	a4 e3       	ldi	r26, 0x34	; 52
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e4 e3       	ldi	r30, 0x34	; 52
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 2e       	mov	r0, r18
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <GPIO_setupPinDirection+0x17c>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <GPIO_setupPinDirection+0x178>
     cc6:	80 95       	com	r24
     cc8:	84 23       	and	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	2e c0       	rjmp	.+92     	; 0xd2a <GPIO_setupPinDirection+0x1e4>


            }
            break;
        case PORTD_ID:
            if(PIN_OUTPUT == direction){
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	a1 f4       	brne	.+40     	; 0xcfc <GPIO_setupPinDirection+0x1b6>
                SET_BIT(DDRD, pin_num);
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_setupPinDirection+0x1ac>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_setupPinDirection+0x1a8>
     cf6:	84 2b       	or	r24, r20
     cf8:	8c 93       	st	X, r24
     cfa:	17 c0       	rjmp	.+46     	; 0xd2a <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	88 23       	and	r24, r24
     d00:	a1 f4       	brne	.+40     	; 0xd2a <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRD, pin_num);
     d02:	a1 e3       	ldi	r26, 0x31	; 49
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e1 e3       	ldi	r30, 0x31	; 49
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <GPIO_setupPinDirection+0x1da>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <GPIO_setupPinDirection+0x1d6>
     d24:	80 95       	com	r24
     d26:	84 23       	and	r24, r20
     d28:	8c 93       	st	X, r24
            }
            break;

        }
    }
}
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * if pin number or port number ar invalid, function will not handle it
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <GPIO_writePin+0x6>
     d40:	00 d0       	rcall	.+0      	; 0xd42 <GPIO_writePin+0x8>
     d42:	0f 92       	push	r0
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	6a 83       	std	Y+2, r22	; 0x02
     d4c:	4b 83       	std	Y+3, r20	; 0x03
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){}
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	85 30       	cpi	r24, 0x05	; 5
     d52:	08 f0       	brcs	.+2      	; 0xd56 <GPIO_writePin+0x1c>
     d54:	e4 c0       	rjmp	.+456    	; 0xf1e <GPIO_writePin+0x1e4>
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	89 30       	cpi	r24, 0x09	; 9
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <GPIO_writePin+0x24>
     d5c:	e0 c0       	rjmp	.+448    	; 0xf1e <GPIO_writePin+0x1e4>
    else{
        switch (port_num)
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	3d 83       	std	Y+5, r19	; 0x05
     d66:	2c 83       	std	Y+4, r18	; 0x04
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	9d 81       	ldd	r25, Y+5	; 0x05
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <GPIO_writePin+0x3a>
     d72:	47 c0       	rjmp	.+142    	; 0xe02 <GPIO_writePin+0xc8>
     d74:	2c 81       	ldd	r18, Y+4	; 0x04
     d76:	3d 81       	ldd	r19, Y+5	; 0x05
     d78:	22 30       	cpi	r18, 0x02	; 2
     d7a:	31 05       	cpc	r19, r1
     d7c:	2c f4       	brge	.+10     	; 0xd88 <GPIO_writePin+0x4e>
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	9d 81       	ldd	r25, Y+5	; 0x05
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	71 f0       	breq	.+28     	; 0xda2 <GPIO_writePin+0x68>
     d86:	cb c0       	rjmp	.+406    	; 0xf1e <GPIO_writePin+0x1e4>
     d88:	2c 81       	ldd	r18, Y+4	; 0x04
     d8a:	3d 81       	ldd	r19, Y+5	; 0x05
     d8c:	22 30       	cpi	r18, 0x02	; 2
     d8e:	31 05       	cpc	r19, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <GPIO_writePin+0x5a>
     d92:	67 c0       	rjmp	.+206    	; 0xe62 <GPIO_writePin+0x128>
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	9d 81       	ldd	r25, Y+5	; 0x05
     d98:	83 30       	cpi	r24, 0x03	; 3
     d9a:	91 05       	cpc	r25, r1
     d9c:	09 f4       	brne	.+2      	; 0xda0 <GPIO_writePin+0x66>
     d9e:	91 c0       	rjmp	.+290    	; 0xec2 <GPIO_writePin+0x188>
     da0:	be c0       	rjmp	.+380    	; 0xf1e <GPIO_writePin+0x1e4>
        {
        case PORTA_ID:

            if(LOGIC_HIGH == value){
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	a1 f4       	brne	.+40     	; 0xdd0 <GPIO_writePin+0x96>
                SET_BIT(PORTA, pin_num);
     da8:	ab e3       	ldi	r26, 0x3B	; 59
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e3       	ldi	r30, 0x3B	; 59
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <GPIO_writePin+0x8c>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <GPIO_writePin+0x88>
     dca:	84 2b       	or	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	a7 c0       	rjmp	.+334    	; 0xf1e <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	88 23       	and	r24, r24
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <GPIO_writePin+0x9e>
     dd6:	a3 c0       	rjmp	.+326    	; 0xf1e <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTA, pin_num);
     dd8:	ab e3       	ldi	r26, 0x3B	; 59
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	eb e3       	ldi	r30, 0x3B	; 59
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <GPIO_writePin+0xbc>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <GPIO_writePin+0xb8>
     dfa:	80 95       	com	r24
     dfc:	84 23       	and	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	8e c0       	rjmp	.+284    	; 0xf1e <GPIO_writePin+0x1e4>

            }
            break;
        case PORTB_ID:

            if(LOGIC_HIGH == value){
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	a1 f4       	brne	.+40     	; 0xe30 <GPIO_writePin+0xf6>
                SET_BIT(PORTB, pin_num);
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <GPIO_writePin+0xec>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <GPIO_writePin+0xe8>
     e2a:	84 2b       	or	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	77 c0       	rjmp	.+238    	; 0xf1e <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	88 23       	and	r24, r24
     e34:	09 f0       	breq	.+2      	; 0xe38 <GPIO_writePin+0xfe>
     e36:	73 c0       	rjmp	.+230    	; 0xf1e <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTB, pin_num);
     e38:	a8 e3       	ldi	r26, 0x38	; 56
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e8 e3       	ldi	r30, 0x38	; 56
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <GPIO_writePin+0x11c>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <GPIO_writePin+0x118>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	5e c0       	rjmp	.+188    	; 0xf1e <GPIO_writePin+0x1e4>
            }
            break;
        case PORTC_ID:

            if(LOGIC_HIGH == value){
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	a1 f4       	brne	.+40     	; 0xe90 <GPIO_writePin+0x156>
                SET_BIT(PORTC, pin_num);
     e68:	a5 e3       	ldi	r26, 0x35	; 53
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e3       	ldi	r30, 0x35	; 53
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <GPIO_writePin+0x14c>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <GPIO_writePin+0x148>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	47 c0       	rjmp	.+142    	; 0xf1e <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	88 23       	and	r24, r24
     e94:	09 f0       	breq	.+2      	; 0xe98 <GPIO_writePin+0x15e>
     e96:	43 c0       	rjmp	.+134    	; 0xf1e <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTC, pin_num);
     e98:	a5 e3       	ldi	r26, 0x35	; 53
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e5 e3       	ldi	r30, 0x35	; 53
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <GPIO_writePin+0x17c>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <GPIO_writePin+0x178>
     eba:	80 95       	com	r24
     ebc:	84 23       	and	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	2e c0       	rjmp	.+92     	; 0xf1e <GPIO_writePin+0x1e4>
            }
            break;
        case PORTD_ID:

            if(LOGIC_HIGH == value){
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	a1 f4       	brne	.+40     	; 0xef0 <GPIO_writePin+0x1b6>
                SET_BIT(PORTD, pin_num);
     ec8:	a2 e3       	ldi	r26, 0x32	; 50
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e2 e3       	ldi	r30, 0x32	; 50
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <GPIO_writePin+0x1ac>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <GPIO_writePin+0x1a8>
     eea:	84 2b       	or	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	17 c0       	rjmp	.+46     	; 0xf1e <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	88 23       	and	r24, r24
     ef4:	a1 f4       	brne	.+40     	; 0xf1e <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTD, pin_num);
     ef6:	a2 e3       	ldi	r26, 0x32	; 50
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e2 e3       	ldi	r30, 0x32	; 50
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <GPIO_writePin+0x1da>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <GPIO_writePin+0x1d6>
     f18:	80 95       	com	r24
     f1a:	84 23       	and	r24, r20
     f1c:	8c 93       	st	X, r24
            }
            break;
        }
    }    
    
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <GPIO_readPin+0x6>
     f34:	00 d0       	rcall	.+0      	; 0xf36 <GPIO_readPin+0x8>
     f36:	0f 92       	push	r0
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	89 83       	std	Y+1, r24	; 0x01
     f3e:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){}
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	85 30       	cpi	r24, 0x05	; 5
     f44:	08 f0       	brcs	.+2      	; 0xf48 <GPIO_readPin+0x1a>
     f46:	85 c0       	rjmp	.+266    	; 0x1052 <GPIO_readPin+0x124>
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	89 30       	cpi	r24, 0x09	; 9
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <GPIO_readPin+0x22>
     f4e:	81 c0       	rjmp	.+258    	; 0x1052 <GPIO_readPin+0x124>
    else{
        switch (port_num)
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3d 83       	std	Y+5, r19	; 0x05
     f58:	2c 83       	std	Y+4, r18	; 0x04
     f5a:	4c 81       	ldd	r20, Y+4	; 0x04
     f5c:	5d 81       	ldd	r21, Y+5	; 0x05
     f5e:	41 30       	cpi	r20, 0x01	; 1
     f60:	51 05       	cpc	r21, r1
     f62:	79 f1       	breq	.+94     	; 0xfc2 <GPIO_readPin+0x94>
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	91 05       	cpc	r25, r1
     f6c:	34 f4       	brge	.+12     	; 0xf7a <GPIO_readPin+0x4c>
     f6e:	2c 81       	ldd	r18, Y+4	; 0x04
     f70:	3d 81       	ldd	r19, Y+5	; 0x05
     f72:	21 15       	cp	r18, r1
     f74:	31 05       	cpc	r19, r1
     f76:	69 f0       	breq	.+26     	; 0xf92 <GPIO_readPin+0x64>
     f78:	6c c0       	rjmp	.+216    	; 0x1052 <GPIO_readPin+0x124>
     f7a:	4c 81       	ldd	r20, Y+4	; 0x04
     f7c:	5d 81       	ldd	r21, Y+5	; 0x05
     f7e:	42 30       	cpi	r20, 0x02	; 2
     f80:	51 05       	cpc	r21, r1
     f82:	b9 f1       	breq	.+110    	; 0xff2 <GPIO_readPin+0xc4>
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	83 30       	cpi	r24, 0x03	; 3
     f8a:	91 05       	cpc	r25, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <GPIO_readPin+0x62>
     f8e:	49 c0       	rjmp	.+146    	; 0x1022 <GPIO_readPin+0xf4>
     f90:	60 c0       	rjmp	.+192    	; 0x1052 <GPIO_readPin+0x124>
        {
        case PORTA_ID:

            if(BIT_IS_SET(PINA, pin_num)){
     f92:	e9 e3       	ldi	r30, 0x39	; 57
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a9 01       	movw	r20, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <GPIO_readPin+0x7c>
     fa6:	55 95       	asr	r21
     fa8:	47 95       	ror	r20
     faa:	8a 95       	dec	r24
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <GPIO_readPin+0x78>
     fae:	ca 01       	movw	r24, r20
     fb0:	81 70       	andi	r24, 0x01	; 1
     fb2:	90 70       	andi	r25, 0x00	; 0
     fb4:	88 23       	and	r24, r24
     fb6:	19 f0       	breq	.+6      	; 0xfbe <GPIO_readPin+0x90>
                return 1;
     fb8:	51 e0       	ldi	r21, 0x01	; 1
     fba:	5b 83       	std	Y+3, r21	; 0x03
     fbc:	4b c0       	rjmp	.+150    	; 0x1054 <GPIO_readPin+0x126>
            }
            else{
                return 0;
     fbe:	1b 82       	std	Y+3, r1	; 0x03
     fc0:	49 c0       	rjmp	.+146    	; 0x1054 <GPIO_readPin+0x126>

            }
            break;
        case PORTB_ID:

            if(BIT_IS_SET(PINB, pin_num)){
     fc2:	e6 e3       	ldi	r30, 0x36	; 54
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a9 01       	movw	r20, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_readPin+0xac>
     fd6:	55 95       	asr	r21
     fd8:	47 95       	ror	r20
     fda:	8a 95       	dec	r24
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_readPin+0xa8>
     fde:	ca 01       	movw	r24, r20
     fe0:	81 70       	andi	r24, 0x01	; 1
     fe2:	90 70       	andi	r25, 0x00	; 0
     fe4:	88 23       	and	r24, r24
     fe6:	19 f0       	breq	.+6      	; 0xfee <GPIO_readPin+0xc0>
                return 1;
     fe8:	51 e0       	ldi	r21, 0x01	; 1
     fea:	5b 83       	std	Y+3, r21	; 0x03
     fec:	33 c0       	rjmp	.+102    	; 0x1054 <GPIO_readPin+0x126>
            }
            else{
                return 0;
     fee:	1b 82       	std	Y+3, r1	; 0x03
     ff0:	31 c0       	rjmp	.+98     	; 0x1054 <GPIO_readPin+0x126>
            }
            break;
        case PORTC_ID:

            if(BIT_IS_SET(PINC, pin_num)){
     ff2:	e3 e3       	ldi	r30, 0x33	; 51
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a9 01       	movw	r20, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <GPIO_readPin+0xdc>
    1006:	55 95       	asr	r21
    1008:	47 95       	ror	r20
    100a:	8a 95       	dec	r24
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <GPIO_readPin+0xd8>
    100e:	ca 01       	movw	r24, r20
    1010:	81 70       	andi	r24, 0x01	; 1
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	88 23       	and	r24, r24
    1016:	19 f0       	breq	.+6      	; 0x101e <GPIO_readPin+0xf0>
                return 1;
    1018:	51 e0       	ldi	r21, 0x01	; 1
    101a:	5b 83       	std	Y+3, r21	; 0x03
    101c:	1b c0       	rjmp	.+54     	; 0x1054 <GPIO_readPin+0x126>
            }
            else{
                return 0;
    101e:	1b 82       	std	Y+3, r1	; 0x03
    1020:	19 c0       	rjmp	.+50     	; 0x1054 <GPIO_readPin+0x126>
            }
            break;
        case PORTD_ID:

            if(BIT_IS_SET(PIND, pin_num)){
    1022:	e0 e3       	ldi	r30, 0x30	; 48
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a9 01       	movw	r20, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <GPIO_readPin+0x10c>
    1036:	55 95       	asr	r21
    1038:	47 95       	ror	r20
    103a:	8a 95       	dec	r24
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <GPIO_readPin+0x108>
    103e:	ca 01       	movw	r24, r20
    1040:	81 70       	andi	r24, 0x01	; 1
    1042:	90 70       	andi	r25, 0x00	; 0
    1044:	88 23       	and	r24, r24
    1046:	19 f0       	breq	.+6      	; 0x104e <GPIO_readPin+0x120>
                return 1;
    1048:	51 e0       	ldi	r21, 0x01	; 1
    104a:	5b 83       	std	Y+3, r21	; 0x03
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <GPIO_readPin+0x126>
            }
            else{
                return 0;
    104e:	1b 82       	std	Y+3, r1	; 0x03
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <GPIO_readPin+0x126>
            }
            break;
        }
    }
    return '\0';
    1052:	1b 82       	std	Y+3, r1	; 0x03
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	cf 91       	pop	r28
    1062:	df 91       	pop	r29
    1064:	08 95       	ret

00001066 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * PORT_INPUT = 0x00, PORT_OUTPUT = 0xFF
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	00 d0       	rcall	.+0      	; 0x106c <GPIO_setupPortDirection+0x6>
    106c:	00 d0       	rcall	.+0      	; 0x106e <GPIO_setupPortDirection+0x8>
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS){}
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	85 30       	cpi	r24, 0x05	; 5
    107a:	90 f5       	brcc	.+100    	; 0x10e0 <GPIO_setupPortDirection+0x7a>
    else{
        switch (port_num)
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	3c 83       	std	Y+4, r19	; 0x04
    1084:	2b 83       	std	Y+3, r18	; 0x03
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	91 05       	cpc	r25, r1
    108e:	d1 f0       	breq	.+52     	; 0x10c4 <GPIO_setupPortDirection+0x5e>
    1090:	2b 81       	ldd	r18, Y+3	; 0x03
    1092:	3c 81       	ldd	r19, Y+4	; 0x04
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	2c f4       	brge	.+10     	; 0x10a4 <GPIO_setupPortDirection+0x3e>
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	61 f0       	breq	.+24     	; 0x10ba <GPIO_setupPortDirection+0x54>
    10a2:	1e c0       	rjmp	.+60     	; 0x10e0 <GPIO_setupPortDirection+0x7a>
    10a4:	2b 81       	ldd	r18, Y+3	; 0x03
    10a6:	3c 81       	ldd	r19, Y+4	; 0x04
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	81 f0       	breq	.+32     	; 0x10ce <GPIO_setupPortDirection+0x68>
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	91 05       	cpc	r25, r1
    10b6:	81 f0       	breq	.+32     	; 0x10d8 <GPIO_setupPortDirection+0x72>
    10b8:	13 c0       	rjmp	.+38     	; 0x10e0 <GPIO_setupPortDirection+0x7a>
        {
        case PORTA_ID:
            DDRA = direction;
    10ba:	ea e3       	ldi	r30, 0x3A	; 58
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
    10c2:	0e c0       	rjmp	.+28     	; 0x10e0 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTB_ID:
            DDRB = direction;
    10c4:	e7 e3       	ldi	r30, 0x37	; 55
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	80 83       	st	Z, r24
    10cc:	09 c0       	rjmp	.+18     	; 0x10e0 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTC_ID:
            DDRC = direction;
    10ce:	e4 e3       	ldi	r30, 0x34	; 52
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	80 83       	st	Z, r24
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTD_ID:
            DDRD = direction;
    10d8:	e1 e3       	ldi	r30, 0x31	; 49
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	80 83       	st	Z, r24
            break;
        }
    }
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value){
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <GPIO_writePort+0x6>
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <GPIO_writePort+0x8>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	89 83       	std	Y+1, r24	; 0x01
    10fc:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS){}
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	85 30       	cpi	r24, 0x05	; 5
    1102:	90 f5       	brcc	.+100    	; 0x1168 <GPIO_writePort+0x7a>
    else{
        switch (port_num)
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	3c 83       	std	Y+4, r19	; 0x04
    110c:	2b 83       	std	Y+3, r18	; 0x03
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	91 05       	cpc	r25, r1
    1116:	d1 f0       	breq	.+52     	; 0x114c <GPIO_writePort+0x5e>
    1118:	2b 81       	ldd	r18, Y+3	; 0x03
    111a:	3c 81       	ldd	r19, Y+4	; 0x04
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	2c f4       	brge	.+10     	; 0x112c <GPIO_writePort+0x3e>
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	61 f0       	breq	.+24     	; 0x1142 <GPIO_writePort+0x54>
    112a:	1e c0       	rjmp	.+60     	; 0x1168 <GPIO_writePort+0x7a>
    112c:	2b 81       	ldd	r18, Y+3	; 0x03
    112e:	3c 81       	ldd	r19, Y+4	; 0x04
    1130:	22 30       	cpi	r18, 0x02	; 2
    1132:	31 05       	cpc	r19, r1
    1134:	81 f0       	breq	.+32     	; 0x1156 <GPIO_writePort+0x68>
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	91 05       	cpc	r25, r1
    113e:	81 f0       	breq	.+32     	; 0x1160 <GPIO_writePort+0x72>
    1140:	13 c0       	rjmp	.+38     	; 0x1168 <GPIO_writePort+0x7a>
        {
        case PORTA_ID:
            PORTA = value;
    1142:	eb e3       	ldi	r30, 0x3B	; 59
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	80 83       	st	Z, r24
    114a:	0e c0       	rjmp	.+28     	; 0x1168 <GPIO_writePort+0x7a>
            break;
        case PORTB_ID:
            PORTB = value;
    114c:	e8 e3       	ldi	r30, 0x38	; 56
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	80 83       	st	Z, r24
    1154:	09 c0       	rjmp	.+18     	; 0x1168 <GPIO_writePort+0x7a>
            break;
        case PORTC_ID:
            PORTC = value;
    1156:	e5 e3       	ldi	r30, 0x35	; 53
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	80 83       	st	Z, r24
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <GPIO_writePort+0x7a>
            break;
        case PORTD_ID:
            PORTD = value;
    1160:	e2 e3       	ldi	r30, 0x32	; 50
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	80 83       	st	Z, r24
            break;
        }
    }

}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <GPIO_readPort+0x6>
    117c:	00 d0       	rcall	.+0      	; 0x117e <GPIO_readPort+0x8>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	89 83       	std	Y+1, r24	; 0x01
    if(port_num>NUM_OF_PORTS){
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	85 30       	cpi	r24, 0x05	; 5
    1188:	98 f5       	brcc	.+102    	; 0x11f0 <GPIO_readPort+0x7a>
    }
    else{
        switch (port_num)
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	3c 83       	std	Y+4, r19	; 0x04
    1192:	2b 83       	std	Y+3, r18	; 0x03
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	91 05       	cpc	r25, r1
    119c:	d1 f0       	breq	.+52     	; 0x11d2 <GPIO_readPort+0x5c>
    119e:	2b 81       	ldd	r18, Y+3	; 0x03
    11a0:	3c 81       	ldd	r19, Y+4	; 0x04
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	2c f4       	brge	.+10     	; 0x11b2 <GPIO_readPort+0x3c>
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	61 f0       	breq	.+24     	; 0x11c8 <GPIO_readPort+0x52>
    11b0:	1f c0       	rjmp	.+62     	; 0x11f0 <GPIO_readPort+0x7a>
    11b2:	2b 81       	ldd	r18, Y+3	; 0x03
    11b4:	3c 81       	ldd	r19, Y+4	; 0x04
    11b6:	22 30       	cpi	r18, 0x02	; 2
    11b8:	31 05       	cpc	r19, r1
    11ba:	81 f0       	breq	.+32     	; 0x11dc <GPIO_readPort+0x66>
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	91 05       	cpc	r25, r1
    11c4:	81 f0       	breq	.+32     	; 0x11e6 <GPIO_readPort+0x70>
    11c6:	14 c0       	rjmp	.+40     	; 0x11f0 <GPIO_readPort+0x7a>
        {
        case PORTA_ID:
            return PINA;
    11c8:	e9 e3       	ldi	r30, 0x39	; 57
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	90 81       	ld	r25, Z
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	10 c0       	rjmp	.+32     	; 0x11f2 <GPIO_readPort+0x7c>
            break;
        case PORTB_ID:
            return PINB;
    11d2:	e6 e3       	ldi	r30, 0x36	; 54
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	20 81       	ld	r18, Z
    11d8:	2a 83       	std	Y+2, r18	; 0x02
    11da:	0b c0       	rjmp	.+22     	; 0x11f2 <GPIO_readPort+0x7c>
            break;
        case PORTC_ID:
            return PINC;
    11dc:	e3 e3       	ldi	r30, 0x33	; 51
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	30 81       	ld	r19, Z
    11e2:	3a 83       	std	Y+2, r19	; 0x02
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <GPIO_readPort+0x7c>
            break;
        case PORTD_ID:
            return PIND;
    11e6:	e0 e3       	ldi	r30, 0x30	; 48
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	8a 83       	std	Y+2, r24	; 0x02
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <GPIO_readPort+0x7c>
            break;
        }
    }
    return '\0';
    11f0:	1a 82       	std	Y+2, r1	; 0x02
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void){
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	2e 97       	sbiw	r28, 0x0e	; 14
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a0 ea       	ldi	r26, 0xA0	; 160
    121c:	b1 e4       	ldi	r27, 0x41	; 65
    121e:	8b 87       	std	Y+11, r24	; 0x0b
    1220:	9c 87       	std	Y+12, r25	; 0x0c
    1222:	ad 87       	std	Y+13, r26	; 0x0d
    1224:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1226:	6b 85       	ldd	r22, Y+11	; 0x0b
    1228:	7c 85       	ldd	r23, Y+12	; 0x0c
    122a:	8d 85       	ldd	r24, Y+13	; 0x0d
    122c:	9e 85       	ldd	r25, Y+14	; 0x0e
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	4a e7       	ldi	r20, 0x7A	; 122
    1234:	53 e4       	ldi	r21, 0x43	; 67
    1236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	8f 83       	std	Y+7, r24	; 0x07
    1240:	98 87       	std	Y+8, r25	; 0x08
    1242:	a9 87       	std	Y+9, r26	; 0x09
    1244:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1246:	6f 81       	ldd	r22, Y+7	; 0x07
    1248:	78 85       	ldd	r23, Y+8	; 0x08
    124a:	89 85       	ldd	r24, Y+9	; 0x09
    124c:	9a 85       	ldd	r25, Y+10	; 0x0a
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e8       	ldi	r20, 0x80	; 128
    1254:	5f e3       	ldi	r21, 0x3F	; 63
    1256:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125a:	88 23       	and	r24, r24
    125c:	2c f4       	brge	.+10     	; 0x1268 <LCD_init+0x66>
		__ticks = 1;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	9e 83       	std	Y+6, r25	; 0x06
    1264:	8d 83       	std	Y+5, r24	; 0x05
    1266:	3f c0       	rjmp	.+126    	; 0x12e6 <LCD_init+0xe4>
	else if (__tmp > 65535)
    1268:	6f 81       	ldd	r22, Y+7	; 0x07
    126a:	78 85       	ldd	r23, Y+8	; 0x08
    126c:	89 85       	ldd	r24, Y+9	; 0x09
    126e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	3f ef       	ldi	r19, 0xFF	; 255
    1274:	4f e7       	ldi	r20, 0x7F	; 127
    1276:	57 e4       	ldi	r21, 0x47	; 71
    1278:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    127c:	18 16       	cp	r1, r24
    127e:	4c f5       	brge	.+82     	; 0x12d2 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1280:	6b 85       	ldd	r22, Y+11	; 0x0b
    1282:	7c 85       	ldd	r23, Y+12	; 0x0c
    1284:	8d 85       	ldd	r24, Y+13	; 0x0d
    1286:	9e 85       	ldd	r25, Y+14	; 0x0e
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e2       	ldi	r20, 0x20	; 32
    128e:	51 e4       	ldi	r21, 0x41	; 65
    1290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
    12a8:	0f c0       	rjmp	.+30     	; 0x12c8 <LCD_init+0xc6>
    12aa:	89 e1       	ldi	r24, 0x19	; 25
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <LCD_init+0xb4>
    12ba:	9c 83       	std	Y+4, r25	; 0x04
    12bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ca:	9e 81       	ldd	r25, Y+6	; 0x06
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	69 f7       	brne	.-38     	; 0x12aa <LCD_init+0xa8>
    12d0:	14 c0       	rjmp	.+40     	; 0x12fa <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d2:	6f 81       	ldd	r22, Y+7	; 0x07
    12d4:	78 85       	ldd	r23, Y+8	; 0x08
    12d6:	89 85       	ldd	r24, Y+9	; 0x09
    12d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	9a 81       	ldd	r25, Y+2	; 0x02
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <LCD_init+0xf0>
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
	/*Wait 20ms or more after VDD reaches 4.5V*/
	_delay_ms(20);
	/*set pins direction*/
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    12fa:	83 e0       	ldi	r24, 0x03	; 3
    12fc:	64 e0       	ldi	r22, 0x04	; 4
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID, LCD_RW_PIN_ID, PIN_OUTPUT);
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	65 e0       	ldi	r22, 0x05	; 5
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	66 e0       	ldi	r22, 0x06	; 6
    1312:	41 e0       	ldi	r20, 0x01	; 1
    1314:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	6f ef       	ldi	r22, 0xFF	; 255
    131c:	0e 94 33 08 	call	0x1066	; 0x1066 <GPIO_setupPortDirection>
	/*
	 * RS R/W DB7 DB6 DB5 DB4 DB3 DB2 DB1 DB0
	   0  	 0   0    0   1   1   *   *   *   *
	 */

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1320:	88 e3       	ldi	r24, 0x38	; 56
    1322:	0e 94 a2 09 	call	0x1344	; 0x1344 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1326:	8c e0       	ldi	r24, 0x0C	; 12
    1328:	0e 94 a2 09 	call	0x1344	; 0x1344 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	0e 94 a2 09 	call	0x1344	; 0x1344 <LCD_sendCommand>

}
    1332:	2e 96       	adiw	r28, 0x0e	; 14
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command){
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	e9 97       	sbiw	r28, 0x39	; 57
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /*RS: LOW on transferring instruction data*/
    135a:	83 e0       	ldi	r24, 0x03	; 3
    135c:	64 e0       	ldi	r22, 0x04	; 4
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /*RW-: low on writing*/
    1364:	83 e0       	ldi	r24, 0x03	; 3
    1366:	65 e0       	ldi	r22, 0x05	; 5
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a0 e8       	ldi	r26, 0x80	; 128
    1374:	bf e3       	ldi	r27, 0x3F	; 63
    1376:	8d ab       	std	Y+53, r24	; 0x35
    1378:	9e ab       	std	Y+54, r25	; 0x36
    137a:	af ab       	std	Y+55, r26	; 0x37
    137c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137e:	6d a9       	ldd	r22, Y+53	; 0x35
    1380:	7e a9       	ldd	r23, Y+54	; 0x36
    1382:	8f a9       	ldd	r24, Y+55	; 0x37
    1384:	98 ad       	ldd	r25, Y+56	; 0x38
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	4a e7       	ldi	r20, 0x7A	; 122
    138c:	53 e4       	ldi	r21, 0x43	; 67
    138e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	89 ab       	std	Y+49, r24	; 0x31
    1398:	9a ab       	std	Y+50, r25	; 0x32
    139a:	ab ab       	std	Y+51, r26	; 0x33
    139c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    139e:	69 a9       	ldd	r22, Y+49	; 0x31
    13a0:	7a a9       	ldd	r23, Y+50	; 0x32
    13a2:	8b a9       	ldd	r24, Y+51	; 0x33
    13a4:	9c a9       	ldd	r25, Y+52	; 0x34
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e8       	ldi	r20, 0x80	; 128
    13ac:	5f e3       	ldi	r21, 0x3F	; 63
    13ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b2:	88 23       	and	r24, r24
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <LCD_sendCommand+0x7c>
		__ticks = 1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	98 ab       	std	Y+48, r25	; 0x30
    13bc:	8f a7       	std	Y+47, r24	; 0x2f
    13be:	3f c0       	rjmp	.+126    	; 0x143e <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    13c0:	69 a9       	ldd	r22, Y+49	; 0x31
    13c2:	7a a9       	ldd	r23, Y+50	; 0x32
    13c4:	8b a9       	ldd	r24, Y+51	; 0x33
    13c6:	9c a9       	ldd	r25, Y+52	; 0x34
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	3f ef       	ldi	r19, 0xFF	; 255
    13cc:	4f e7       	ldi	r20, 0x7F	; 127
    13ce:	57 e4       	ldi	r21, 0x47	; 71
    13d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13d4:	18 16       	cp	r1, r24
    13d6:	4c f5       	brge	.+82     	; 0x142a <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d8:	6d a9       	ldd	r22, Y+53	; 0x35
    13da:	7e a9       	ldd	r23, Y+54	; 0x36
    13dc:	8f a9       	ldd	r24, Y+55	; 0x37
    13de:	98 ad       	ldd	r25, Y+56	; 0x38
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	51 e4       	ldi	r21, 0x41	; 65
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	bc 01       	movw	r22, r24
    13f2:	cd 01       	movw	r24, r26
    13f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	98 ab       	std	Y+48, r25	; 0x30
    13fe:	8f a7       	std	Y+47, r24	; 0x2f
    1400:	0f c0       	rjmp	.+30     	; 0x1420 <LCD_sendCommand+0xdc>
    1402:	89 e1       	ldi	r24, 0x19	; 25
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9e a7       	std	Y+46, r25	; 0x2e
    1408:	8d a7       	std	Y+45, r24	; 0x2d
    140a:	8d a5       	ldd	r24, Y+45	; 0x2d
    140c:	9e a5       	ldd	r25, Y+46	; 0x2e
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <LCD_sendCommand+0xca>
    1412:	9e a7       	std	Y+46, r25	; 0x2e
    1414:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1416:	8f a5       	ldd	r24, Y+47	; 0x2f
    1418:	98 a9       	ldd	r25, Y+48	; 0x30
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	98 ab       	std	Y+48, r25	; 0x30
    141e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1420:	8f a5       	ldd	r24, Y+47	; 0x2f
    1422:	98 a9       	ldd	r25, Y+48	; 0x30
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	69 f7       	brne	.-38     	; 0x1402 <LCD_sendCommand+0xbe>
    1428:	14 c0       	rjmp	.+40     	; 0x1452 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142a:	69 a9       	ldd	r22, Y+49	; 0x31
    142c:	7a a9       	ldd	r23, Y+50	; 0x32
    142e:	8b a9       	ldd	r24, Y+51	; 0x33
    1430:	9c a9       	ldd	r25, Y+52	; 0x34
    1432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	98 ab       	std	Y+48, r25	; 0x30
    143c:	8f a7       	std	Y+47, r24	; 0x2f
    143e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1440:	98 a9       	ldd	r25, Y+48	; 0x30
    1442:	9c a7       	std	Y+44, r25	; 0x2c
    1444:	8b a7       	std	Y+43, r24	; 0x2b
    1446:	8b a5       	ldd	r24, Y+43	; 0x2b
    1448:	9c a5       	ldd	r25, Y+44	; 0x2c
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <LCD_sendCommand+0x106>
    144e:	9c a7       	std	Y+44, r25	; 0x2c
    1450:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /*tas = 50ns*/ /* due to bad manufacturing*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	66 e0       	ldi	r22, 0x06	; 6
    1456:	41 e0       	ldi	r20, 0x01	; 1
    1458:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a0 e8       	ldi	r26, 0x80	; 128
    1462:	bf e3       	ldi	r27, 0x3F	; 63
    1464:	8f a3       	std	Y+39, r24	; 0x27
    1466:	98 a7       	std	Y+40, r25	; 0x28
    1468:	a9 a7       	std	Y+41, r26	; 0x29
    146a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146c:	6f a1       	ldd	r22, Y+39	; 0x27
    146e:	78 a5       	ldd	r23, Y+40	; 0x28
    1470:	89 a5       	ldd	r24, Y+41	; 0x29
    1472:	9a a5       	ldd	r25, Y+42	; 0x2a
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	4a e7       	ldi	r20, 0x7A	; 122
    147a:	53 e4       	ldi	r21, 0x43	; 67
    147c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	8b a3       	std	Y+35, r24	; 0x23
    1486:	9c a3       	std	Y+36, r25	; 0x24
    1488:	ad a3       	std	Y+37, r26	; 0x25
    148a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    148c:	6b a1       	ldd	r22, Y+35	; 0x23
    148e:	7c a1       	ldd	r23, Y+36	; 0x24
    1490:	8d a1       	ldd	r24, Y+37	; 0x25
    1492:	9e a1       	ldd	r25, Y+38	; 0x26
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	5f e3       	ldi	r21, 0x3F	; 63
    149c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a0:	88 23       	and	r24, r24
    14a2:	2c f4       	brge	.+10     	; 0x14ae <LCD_sendCommand+0x16a>
		__ticks = 1;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9a a3       	std	Y+34, r25	; 0x22
    14aa:	89 a3       	std	Y+33, r24	; 0x21
    14ac:	3f c0       	rjmp	.+126    	; 0x152c <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    14ae:	6b a1       	ldd	r22, Y+35	; 0x23
    14b0:	7c a1       	ldd	r23, Y+36	; 0x24
    14b2:	8d a1       	ldd	r24, Y+37	; 0x25
    14b4:	9e a1       	ldd	r25, Y+38	; 0x26
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	4f e7       	ldi	r20, 0x7F	; 127
    14bc:	57 e4       	ldi	r21, 0x47	; 71
    14be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c2:	18 16       	cp	r1, r24
    14c4:	4c f5       	brge	.+82     	; 0x1518 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c6:	6f a1       	ldd	r22, Y+39	; 0x27
    14c8:	78 a5       	ldd	r23, Y+40	; 0x28
    14ca:	89 a5       	ldd	r24, Y+41	; 0x29
    14cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e2       	ldi	r20, 0x20	; 32
    14d4:	51 e4       	ldi	r21, 0x41	; 65
    14d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	9a a3       	std	Y+34, r25	; 0x22
    14ec:	89 a3       	std	Y+33, r24	; 0x21
    14ee:	0f c0       	rjmp	.+30     	; 0x150e <LCD_sendCommand+0x1ca>
    14f0:	89 e1       	ldi	r24, 0x19	; 25
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	98 a3       	std	Y+32, r25	; 0x20
    14f6:	8f 8f       	std	Y+31, r24	; 0x1f
    14f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14fa:	98 a1       	ldd	r25, Y+32	; 0x20
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <LCD_sendCommand+0x1b8>
    1500:	98 a3       	std	Y+32, r25	; 0x20
    1502:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1504:	89 a1       	ldd	r24, Y+33	; 0x21
    1506:	9a a1       	ldd	r25, Y+34	; 0x22
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	9a a3       	std	Y+34, r25	; 0x22
    150c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150e:	89 a1       	ldd	r24, Y+33	; 0x21
    1510:	9a a1       	ldd	r25, Y+34	; 0x22
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	69 f7       	brne	.-38     	; 0x14f0 <LCD_sendCommand+0x1ac>
    1516:	14 c0       	rjmp	.+40     	; 0x1540 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1518:	6b a1       	ldd	r22, Y+35	; 0x23
    151a:	7c a1       	ldd	r23, Y+36	; 0x24
    151c:	8d a1       	ldd	r24, Y+37	; 0x25
    151e:	9e a1       	ldd	r25, Y+38	; 0x26
    1520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	9a a3       	std	Y+34, r25	; 0x22
    152a:	89 a3       	std	Y+33, r24	; 0x21
    152c:	89 a1       	ldd	r24, Y+33	; 0x21
    152e:	9a a1       	ldd	r25, Y+34	; 0x22
    1530:	9e 8f       	std	Y+30, r25	; 0x1e
    1532:	8d 8f       	std	Y+29, r24	; 0x1d
    1534:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1536:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <LCD_sendCommand+0x1f4>
    153c:	9e 8f       	std	Y+30, r25	; 0x1e
    153e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	69 ad       	ldd	r22, Y+57	; 0x39
    1544:	0e 94 77 08 	call	0x10ee	; 0x10ee <GPIO_writePort>
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a0 e8       	ldi	r26, 0x80	; 128
    154e:	bf e3       	ldi	r27, 0x3F	; 63
    1550:	89 8f       	std	Y+25, r24	; 0x19
    1552:	9a 8f       	std	Y+26, r25	; 0x1a
    1554:	ab 8f       	std	Y+27, r26	; 0x1b
    1556:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1558:	69 8d       	ldd	r22, Y+25	; 0x19
    155a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    155c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    155e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4a e7       	ldi	r20, 0x7A	; 122
    1566:	53 e4       	ldi	r21, 0x43	; 67
    1568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	8d 8b       	std	Y+21, r24	; 0x15
    1572:	9e 8b       	std	Y+22, r25	; 0x16
    1574:	af 8b       	std	Y+23, r26	; 0x17
    1576:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1578:	6d 89       	ldd	r22, Y+21	; 0x15
    157a:	7e 89       	ldd	r23, Y+22	; 0x16
    157c:	8f 89       	ldd	r24, Y+23	; 0x17
    157e:	98 8d       	ldd	r25, Y+24	; 0x18
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158c:	88 23       	and	r24, r24
    158e:	2c f4       	brge	.+10     	; 0x159a <LCD_sendCommand+0x256>
		__ticks = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9c 8b       	std	Y+20, r25	; 0x14
    1596:	8b 8b       	std	Y+19, r24	; 0x13
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    159a:	6d 89       	ldd	r22, Y+21	; 0x15
    159c:	7e 89       	ldd	r23, Y+22	; 0x16
    159e:	8f 89       	ldd	r24, Y+23	; 0x17
    15a0:	98 8d       	ldd	r25, Y+24	; 0x18
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	4c f5       	brge	.+82     	; 0x1604 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b2:	69 8d       	ldd	r22, Y+25	; 0x19
    15b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9c 8b       	std	Y+20, r25	; 0x14
    15d8:	8b 8b       	std	Y+19, r24	; 0x13
    15da:	0f c0       	rjmp	.+30     	; 0x15fa <LCD_sendCommand+0x2b6>
    15dc:	89 e1       	ldi	r24, 0x19	; 25
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9a 8b       	std	Y+18, r25	; 0x12
    15e2:	89 8b       	std	Y+17, r24	; 0x11
    15e4:	89 89       	ldd	r24, Y+17	; 0x11
    15e6:	9a 89       	ldd	r25, Y+18	; 0x12
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <LCD_sendCommand+0x2a4>
    15ec:	9a 8b       	std	Y+18, r25	; 0x12
    15ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f0:	8b 89       	ldd	r24, Y+19	; 0x13
    15f2:	9c 89       	ldd	r25, Y+20	; 0x14
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	9c 8b       	std	Y+20, r25	; 0x14
    15f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fa:	8b 89       	ldd	r24, Y+19	; 0x13
    15fc:	9c 89       	ldd	r25, Y+20	; 0x14
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	69 f7       	brne	.-38     	; 0x15dc <LCD_sendCommand+0x298>
    1602:	14 c0       	rjmp	.+40     	; 0x162c <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1604:	6d 89       	ldd	r22, Y+21	; 0x15
    1606:	7e 89       	ldd	r23, Y+22	; 0x16
    1608:	8f 89       	ldd	r24, Y+23	; 0x17
    160a:	98 8d       	ldd	r25, Y+24	; 0x18
    160c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9c 8b       	std	Y+20, r25	; 0x14
    1616:	8b 8b       	std	Y+19, r24	; 0x13
    1618:	8b 89       	ldd	r24, Y+19	; 0x13
    161a:	9c 89       	ldd	r25, Y+20	; 0x14
    161c:	98 8b       	std	Y+16, r25	; 0x10
    161e:	8f 87       	std	Y+15, r24	; 0x0f
    1620:	8f 85       	ldd	r24, Y+15	; 0x0f
    1622:	98 89       	ldd	r25, Y+16	; 0x10
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <LCD_sendCommand+0x2e0>
    1628:	98 8b       	std	Y+16, r25	; 0x10
    162a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	66 e0       	ldi	r22, 0x06	; 6
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a0 e8       	ldi	r26, 0x80	; 128
    163c:	bf e3       	ldi	r27, 0x3F	; 63
    163e:	8b 87       	std	Y+11, r24	; 0x0b
    1640:	9c 87       	std	Y+12, r25	; 0x0c
    1642:	ad 87       	std	Y+13, r26	; 0x0d
    1644:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1646:	6b 85       	ldd	r22, Y+11	; 0x0b
    1648:	7c 85       	ldd	r23, Y+12	; 0x0c
    164a:	8d 85       	ldd	r24, Y+13	; 0x0d
    164c:	9e 85       	ldd	r25, Y+14	; 0x0e
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a e7       	ldi	r20, 0x7A	; 122
    1654:	53 e4       	ldi	r21, 0x43	; 67
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	8f 83       	std	Y+7, r24	; 0x07
    1660:	98 87       	std	Y+8, r25	; 0x08
    1662:	a9 87       	std	Y+9, r26	; 0x09
    1664:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1666:	6f 81       	ldd	r22, Y+7	; 0x07
    1668:	78 85       	ldd	r23, Y+8	; 0x08
    166a:	89 85       	ldd	r24, Y+9	; 0x09
    166c:	9a 85       	ldd	r25, Y+10	; 0x0a
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	5f e3       	ldi	r21, 0x3F	; 63
    1676:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    167a:	88 23       	and	r24, r24
    167c:	2c f4       	brge	.+10     	; 0x1688 <LCD_sendCommand+0x344>
		__ticks = 1;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 83       	std	Y+5, r24	; 0x05
    1686:	3f c0       	rjmp	.+126    	; 0x1706 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1688:	6f 81       	ldd	r22, Y+7	; 0x07
    168a:	78 85       	ldd	r23, Y+8	; 0x08
    168c:	89 85       	ldd	r24, Y+9	; 0x09
    168e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	3f ef       	ldi	r19, 0xFF	; 255
    1694:	4f e7       	ldi	r20, 0x7F	; 127
    1696:	57 e4       	ldi	r21, 0x47	; 71
    1698:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    169c:	18 16       	cp	r1, r24
    169e:	4c f5       	brge	.+82     	; 0x16f2 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e2       	ldi	r20, 0x20	; 32
    16ae:	51 e4       	ldi	r21, 0x41	; 65
    16b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	0f c0       	rjmp	.+30     	; 0x16e8 <LCD_sendCommand+0x3a4>
    16ca:	89 e1       	ldi	r24, 0x19	; 25
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9c 83       	std	Y+4, r25	; 0x04
    16d0:	8b 83       	std	Y+3, r24	; 0x03
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <LCD_sendCommand+0x392>
    16da:	9c 83       	std	Y+4, r25	; 0x04
    16dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	9e 83       	std	Y+6, r25	; 0x06
    16e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	69 f7       	brne	.-38     	; 0x16ca <LCD_sendCommand+0x386>
    16f0:	14 c0       	rjmp	.+40     	; 0x171a <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f2:	6f 81       	ldd	r22, Y+7	; 0x07
    16f4:	78 85       	ldd	r23, Y+8	; 0x08
    16f6:	89 85       	ldd	r24, Y+9	; 0x09
    16f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	9e 83       	std	Y+6, r25	; 0x06
    1704:	8d 83       	std	Y+5, r24	; 0x05
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	9e 81       	ldd	r25, Y+6	; 0x06
    170a:	9a 83       	std	Y+2, r25	; 0x02
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <LCD_sendCommand+0x3ce>
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    171a:	e9 96       	adiw	r28, 0x39	; 57
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data){
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	e9 97       	sbiw	r28, 0x39	; 57
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /*RS: HIGH on transferring display data*/
    1742:	83 e0       	ldi	r24, 0x03	; 3
    1744:	64 e0       	ldi	r22, 0x04	; 4
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID, LOGIC_LOW); /*RW-: low on writing*/
    174c:	83 e0       	ldi	r24, 0x03	; 3
    174e:	65 e0       	ldi	r22, 0x05	; 5
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a0 e8       	ldi	r26, 0x80	; 128
    175c:	bf e3       	ldi	r27, 0x3F	; 63
    175e:	8d ab       	std	Y+53, r24	; 0x35
    1760:	9e ab       	std	Y+54, r25	; 0x36
    1762:	af ab       	std	Y+55, r26	; 0x37
    1764:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1766:	6d a9       	ldd	r22, Y+53	; 0x35
    1768:	7e a9       	ldd	r23, Y+54	; 0x36
    176a:	8f a9       	ldd	r24, Y+55	; 0x37
    176c:	98 ad       	ldd	r25, Y+56	; 0x38
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	4a e7       	ldi	r20, 0x7A	; 122
    1774:	53 e4       	ldi	r21, 0x43	; 67
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	89 ab       	std	Y+49, r24	; 0x31
    1780:	9a ab       	std	Y+50, r25	; 0x32
    1782:	ab ab       	std	Y+51, r26	; 0x33
    1784:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1786:	69 a9       	ldd	r22, Y+49	; 0x31
    1788:	7a a9       	ldd	r23, Y+50	; 0x32
    178a:	8b a9       	ldd	r24, Y+51	; 0x33
    178c:	9c a9       	ldd	r25, Y+52	; 0x34
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e8       	ldi	r20, 0x80	; 128
    1794:	5f e3       	ldi	r21, 0x3F	; 63
    1796:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    179a:	88 23       	and	r24, r24
    179c:	2c f4       	brge	.+10     	; 0x17a8 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	98 ab       	std	Y+48, r25	; 0x30
    17a4:	8f a7       	std	Y+47, r24	; 0x2f
    17a6:	3f c0       	rjmp	.+126    	; 0x1826 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    17a8:	69 a9       	ldd	r22, Y+49	; 0x31
    17aa:	7a a9       	ldd	r23, Y+50	; 0x32
    17ac:	8b a9       	ldd	r24, Y+51	; 0x33
    17ae:	9c a9       	ldd	r25, Y+52	; 0x34
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	3f ef       	ldi	r19, 0xFF	; 255
    17b4:	4f e7       	ldi	r20, 0x7F	; 127
    17b6:	57 e4       	ldi	r21, 0x47	; 71
    17b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17bc:	18 16       	cp	r1, r24
    17be:	4c f5       	brge	.+82     	; 0x1812 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c0:	6d a9       	ldd	r22, Y+53	; 0x35
    17c2:	7e a9       	ldd	r23, Y+54	; 0x36
    17c4:	8f a9       	ldd	r24, Y+55	; 0x37
    17c6:	98 ad       	ldd	r25, Y+56	; 0x38
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e2       	ldi	r20, 0x20	; 32
    17ce:	51 e4       	ldi	r21, 0x41	; 65
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	98 ab       	std	Y+48, r25	; 0x30
    17e6:	8f a7       	std	Y+47, r24	; 0x2f
    17e8:	0f c0       	rjmp	.+30     	; 0x1808 <LCD_displayCharacter+0xdc>
    17ea:	89 e1       	ldi	r24, 0x19	; 25
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	9e a7       	std	Y+46, r25	; 0x2e
    17f0:	8d a7       	std	Y+45, r24	; 0x2d
    17f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    17f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    17f6:	01 97       	sbiw	r24, 0x01	; 1
    17f8:	f1 f7       	brne	.-4      	; 0x17f6 <LCD_displayCharacter+0xca>
    17fa:	9e a7       	std	Y+46, r25	; 0x2e
    17fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1800:	98 a9       	ldd	r25, Y+48	; 0x30
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	98 ab       	std	Y+48, r25	; 0x30
    1806:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1808:	8f a5       	ldd	r24, Y+47	; 0x2f
    180a:	98 a9       	ldd	r25, Y+48	; 0x30
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	69 f7       	brne	.-38     	; 0x17ea <LCD_displayCharacter+0xbe>
    1810:	14 c0       	rjmp	.+40     	; 0x183a <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1812:	69 a9       	ldd	r22, Y+49	; 0x31
    1814:	7a a9       	ldd	r23, Y+50	; 0x32
    1816:	8b a9       	ldd	r24, Y+51	; 0x33
    1818:	9c a9       	ldd	r25, Y+52	; 0x34
    181a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	98 ab       	std	Y+48, r25	; 0x30
    1824:	8f a7       	std	Y+47, r24	; 0x2f
    1826:	8f a5       	ldd	r24, Y+47	; 0x2f
    1828:	98 a9       	ldd	r25, Y+48	; 0x30
    182a:	9c a7       	std	Y+44, r25	; 0x2c
    182c:	8b a7       	std	Y+43, r24	; 0x2b
    182e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1830:	9c a5       	ldd	r25, Y+44	; 0x2c
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <LCD_displayCharacter+0x106>
    1836:	9c a7       	std	Y+44, r25	; 0x2c
    1838:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);  /*tas = 50ns*/ /* due to bad manufacturing*/
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	66 e0       	ldi	r22, 0x06	; 6
    183e:	41 e0       	ldi	r20, 0x01	; 1
    1840:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a0 e8       	ldi	r26, 0x80	; 128
    184a:	bf e3       	ldi	r27, 0x3F	; 63
    184c:	8f a3       	std	Y+39, r24	; 0x27
    184e:	98 a7       	std	Y+40, r25	; 0x28
    1850:	a9 a7       	std	Y+41, r26	; 0x29
    1852:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	6f a1       	ldd	r22, Y+39	; 0x27
    1856:	78 a5       	ldd	r23, Y+40	; 0x28
    1858:	89 a5       	ldd	r24, Y+41	; 0x29
    185a:	9a a5       	ldd	r25, Y+42	; 0x2a
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a e7       	ldi	r20, 0x7A	; 122
    1862:	53 e4       	ldi	r21, 0x43	; 67
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8b a3       	std	Y+35, r24	; 0x23
    186e:	9c a3       	std	Y+36, r25	; 0x24
    1870:	ad a3       	std	Y+37, r26	; 0x25
    1872:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1874:	6b a1       	ldd	r22, Y+35	; 0x23
    1876:	7c a1       	ldd	r23, Y+36	; 0x24
    1878:	8d a1       	ldd	r24, Y+37	; 0x25
    187a:	9e a1       	ldd	r25, Y+38	; 0x26
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9a a3       	std	Y+34, r25	; 0x22
    1892:	89 a3       	std	Y+33, r24	; 0x21
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1896:	6b a1       	ldd	r22, Y+35	; 0x23
    1898:	7c a1       	ldd	r23, Y+36	; 0x24
    189a:	8d a1       	ldd	r24, Y+37	; 0x25
    189c:	9e a1       	ldd	r25, Y+38	; 0x26
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	6f a1       	ldd	r22, Y+39	; 0x27
    18b0:	78 a5       	ldd	r23, Y+40	; 0x28
    18b2:	89 a5       	ldd	r24, Y+41	; 0x29
    18b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9a a3       	std	Y+34, r25	; 0x22
    18d4:	89 a3       	std	Y+33, r24	; 0x21
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <LCD_displayCharacter+0x1ca>
    18d8:	89 e1       	ldi	r24, 0x19	; 25
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	98 a3       	std	Y+32, r25	; 0x20
    18de:	8f 8f       	std	Y+31, r24	; 0x1f
    18e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18e2:	98 a1       	ldd	r25, Y+32	; 0x20
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_displayCharacter+0x1b8>
    18e8:	98 a3       	std	Y+32, r25	; 0x20
    18ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	89 a1       	ldd	r24, Y+33	; 0x21
    18ee:	9a a1       	ldd	r25, Y+34	; 0x22
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9a a3       	std	Y+34, r25	; 0x22
    18f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	89 a1       	ldd	r24, Y+33	; 0x21
    18f8:	9a a1       	ldd	r25, Y+34	; 0x22
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <LCD_displayCharacter+0x1ac>
    18fe:	14 c0       	rjmp	.+40     	; 0x1928 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	6b a1       	ldd	r22, Y+35	; 0x23
    1902:	7c a1       	ldd	r23, Y+36	; 0x24
    1904:	8d a1       	ldd	r24, Y+37	; 0x25
    1906:	9e a1       	ldd	r25, Y+38	; 0x26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9a a3       	std	Y+34, r25	; 0x22
    1912:	89 a3       	std	Y+33, r24	; 0x21
    1914:	89 a1       	ldd	r24, Y+33	; 0x21
    1916:	9a a1       	ldd	r25, Y+34	; 0x22
    1918:	9e 8f       	std	Y+30, r25	; 0x1e
    191a:	8d 8f       	std	Y+29, r24	; 0x1d
    191c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    191e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_displayCharacter+0x1f4>
    1924:	9e 8f       	std	Y+30, r25	; 0x1e
    1926:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	69 ad       	ldd	r22, Y+57	; 0x39
    192c:	0e 94 77 08 	call	0x10ee	; 0x10ee <GPIO_writePort>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	a0 e8       	ldi	r26, 0x80	; 128
    1936:	bf e3       	ldi	r27, 0x3F	; 63
    1938:	89 8f       	std	Y+25, r24	; 0x19
    193a:	9a 8f       	std	Y+26, r25	; 0x1a
    193c:	ab 8f       	std	Y+27, r26	; 0x1b
    193e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1940:	69 8d       	ldd	r22, Y+25	; 0x19
    1942:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1944:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1946:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	4a e7       	ldi	r20, 0x7A	; 122
    194e:	53 e4       	ldi	r21, 0x43	; 67
    1950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	8d 8b       	std	Y+21, r24	; 0x15
    195a:	9e 8b       	std	Y+22, r25	; 0x16
    195c:	af 8b       	std	Y+23, r26	; 0x17
    195e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1960:	6d 89       	ldd	r22, Y+21	; 0x15
    1962:	7e 89       	ldd	r23, Y+22	; 0x16
    1964:	8f 89       	ldd	r24, Y+23	; 0x17
    1966:	98 8d       	ldd	r25, Y+24	; 0x18
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	5f e3       	ldi	r21, 0x3F	; 63
    1970:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1974:	88 23       	and	r24, r24
    1976:	2c f4       	brge	.+10     	; 0x1982 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 8b       	std	Y+20, r25	; 0x14
    197e:	8b 8b       	std	Y+19, r24	; 0x13
    1980:	3f c0       	rjmp	.+126    	; 0x1a00 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1982:	6d 89       	ldd	r22, Y+21	; 0x15
    1984:	7e 89       	ldd	r23, Y+22	; 0x16
    1986:	8f 89       	ldd	r24, Y+23	; 0x17
    1988:	98 8d       	ldd	r25, Y+24	; 0x18
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	3f ef       	ldi	r19, 0xFF	; 255
    198e:	4f e7       	ldi	r20, 0x7F	; 127
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1996:	18 16       	cp	r1, r24
    1998:	4c f5       	brge	.+82     	; 0x19ec <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199a:	69 8d       	ldd	r22, Y+25	; 0x19
    199c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    199e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e2       	ldi	r20, 0x20	; 32
    19a8:	51 e4       	ldi	r21, 0x41	; 65
    19aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9c 8b       	std	Y+20, r25	; 0x14
    19c0:	8b 8b       	std	Y+19, r24	; 0x13
    19c2:	0f c0       	rjmp	.+30     	; 0x19e2 <LCD_displayCharacter+0x2b6>
    19c4:	89 e1       	ldi	r24, 0x19	; 25
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	9a 8b       	std	Y+18, r25	; 0x12
    19ca:	89 8b       	std	Y+17, r24	; 0x11
    19cc:	89 89       	ldd	r24, Y+17	; 0x11
    19ce:	9a 89       	ldd	r25, Y+18	; 0x12
    19d0:	01 97       	sbiw	r24, 0x01	; 1
    19d2:	f1 f7       	brne	.-4      	; 0x19d0 <LCD_displayCharacter+0x2a4>
    19d4:	9a 8b       	std	Y+18, r25	; 0x12
    19d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d8:	8b 89       	ldd	r24, Y+19	; 0x13
    19da:	9c 89       	ldd	r25, Y+20	; 0x14
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	9c 8b       	std	Y+20, r25	; 0x14
    19e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	8b 89       	ldd	r24, Y+19	; 0x13
    19e4:	9c 89       	ldd	r25, Y+20	; 0x14
    19e6:	00 97       	sbiw	r24, 0x00	; 0
    19e8:	69 f7       	brne	.-38     	; 0x19c4 <LCD_displayCharacter+0x298>
    19ea:	14 c0       	rjmp	.+40     	; 0x1a14 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ec:	6d 89       	ldd	r22, Y+21	; 0x15
    19ee:	7e 89       	ldd	r23, Y+22	; 0x16
    19f0:	8f 89       	ldd	r24, Y+23	; 0x17
    19f2:	98 8d       	ldd	r25, Y+24	; 0x18
    19f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f8:	dc 01       	movw	r26, r24
    19fa:	cb 01       	movw	r24, r22
    19fc:	9c 8b       	std	Y+20, r25	; 0x14
    19fe:	8b 8b       	std	Y+19, r24	; 0x13
    1a00:	8b 89       	ldd	r24, Y+19	; 0x13
    1a02:	9c 89       	ldd	r25, Y+20	; 0x14
    1a04:	98 8b       	std	Y+16, r25	; 0x10
    1a06:	8f 87       	std	Y+15, r24	; 0x0f
    1a08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0a:	98 89       	ldd	r25, Y+16	; 0x10
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_displayCharacter+0x2e0>
    1a10:	98 8b       	std	Y+16, r25	; 0x10
    1a12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1a14:	83 e0       	ldi	r24, 0x03	; 3
    1a16:	66 e0       	ldi	r22, 0x06	; 6
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e8       	ldi	r26, 0x80	; 128
    1a24:	bf e3       	ldi	r27, 0x3F	; 63
    1a26:	8b 87       	std	Y+11, r24	; 0x0b
    1a28:	9c 87       	std	Y+12, r25	; 0x0c
    1a2a:	ad 87       	std	Y+13, r26	; 0x0d
    1a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a e7       	ldi	r20, 0x7A	; 122
    1a3c:	53 e4       	ldi	r21, 0x43	; 67
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8f 83       	std	Y+7, r24	; 0x07
    1a48:	98 87       	std	Y+8, r25	; 0x08
    1a4a:	a9 87       	std	Y+9, r26	; 0x09
    1a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a50:	78 85       	ldd	r23, Y+8	; 0x08
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1a70:	6f 81       	ldd	r22, Y+7	; 0x07
    1a72:	78 85       	ldd	r23, Y+8	; 0x08
    1a74:	89 85       	ldd	r24, Y+9	; 0x09
    1a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	4c f5       	brge	.+82     	; 0x1ada <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9e 83       	std	Y+6, r25	; 0x06
    1aae:	8d 83       	std	Y+5, r24	; 0x05
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <LCD_displayCharacter+0x3a4>
    1ab2:	89 e1       	ldi	r24, 0x19	; 25
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9c 83       	std	Y+4, r25	; 0x04
    1ab8:	8b 83       	std	Y+3, r24	; 0x03
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_displayCharacter+0x392>
    1ac2:	9c 83       	std	Y+4, r25	; 0x04
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9e 83       	std	Y+6, r25	; 0x06
    1ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <LCD_displayCharacter+0x386>
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6f 81       	ldd	r22, Y+7	; 0x07
    1adc:	78 85       	ldd	r23, Y+8	; 0x08
    1ade:	89 85       	ldd	r24, Y+9	; 0x09
    1ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9e 83       	std	Y+6, r25	; 0x06
    1aec:	8d 83       	std	Y+5, r24	; 0x05
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <LCD_displayCharacter+0x3ce>
    1afe:	9a 83       	std	Y+2, r25	; 0x02
    1b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */

}
    1b02:	e9 96       	adiw	r28, 0x39	; 57
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	f8 94       	cli
    1b08:	de bf       	out	0x3e, r29	; 62
    1b0a:	0f be       	out	0x3f, r0	; 63
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <LCD_displayString>:
void LCD_displayString(const char *Str){
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <LCD_displayString+0x6>
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	0a c0       	rjmp	.+20     	; 0x1b38 <LCD_displayString+0x24>
		i++;
	}
	 */

	while(*Str != '\0'){
		LCD_displayCharacter(*Str);
    1b24:	e9 81       	ldd	r30, Y+1	; 0x01
    1b26:	fa 81       	ldd	r31, Y+2	; 0x02
    1b28:	80 81       	ld	r24, Z
    1b2a:	0e 94 96 0b 	call	0x172c	; 0x172c <LCD_displayCharacter>
		Str++;
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	9a 83       	std	Y+2, r25	; 0x02
    1b36:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayCharacter(*(Str+i));
		i++;
	}
	 */

	while(*Str != '\0'){
    1b38:	e9 81       	ldd	r30, Y+1	; 0x01
    1b3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b3c:	80 81       	ld	r24, Z
    1b3e:	88 23       	and	r24, r24
    1b40:	89 f7       	brne	.-30     	; 0x1b24 <LCD_displayString+0x10>
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <LCD_moveCursor+0x6>
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <LCD_moveCursor+0x8>
    1b54:	0f 92       	push	r0
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
    1b5c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	switch(row)
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	3d 83       	std	Y+5, r19	; 0x05
    1b66:	2c 83       	std	Y+4, r18	; 0x04
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	c1 f0       	breq	.+48     	; 0x1ba2 <LCD_moveCursor+0x56>
    1b72:	2c 81       	ldd	r18, Y+4	; 0x04
    1b74:	3d 81       	ldd	r19, Y+5	; 0x05
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <LCD_moveCursor+0x3a>
    1b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <LCD_moveCursor+0x50>
    1b84:	19 c0       	rjmp	.+50     	; 0x1bb8 <LCD_moveCursor+0x6c>
    1b86:	2c 81       	ldd	r18, Y+4	; 0x04
    1b88:	3d 81       	ldd	r19, Y+5	; 0x05
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	69 f0       	breq	.+26     	; 0x1baa <LCD_moveCursor+0x5e>
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	9d 81       	ldd	r25, Y+5	; 0x05
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	61 f0       	breq	.+24     	; 0x1bb2 <LCD_moveCursor+0x66>
    1b9a:	0e c0       	rjmp	.+28     	; 0x1bb8 <LCD_moveCursor+0x6c>
	{
	case 0 :
		lcd_memory_address = col;
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	89 83       	std	Y+1, r24	; 0x01
    1ba0:	0b c0       	rjmp	.+22     	; 0x1bb8 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = 0x40+col;
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	80 5c       	subi	r24, 0xC0	; 192
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	07 c0       	rjmp	.+14     	; 0x1bb8 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = 0x10+col;
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	80 5f       	subi	r24, 0xF0	; 240
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	03 c0       	rjmp	.+6      	; 0x1bb8 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = 0x50+col;
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	80 5b       	subi	r24, 0xB0	; 176
    1bb6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	80 68       	ori	r24, 0x80	; 128
    1bbc:	0e 94 a2 09 	call	0x1344	; 0x1344 <LCD_sendCommand>
}
    1bc0:	0f 90       	pop	r0
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <LCD_displayStringRowColumn+0x6>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <LCD_displayStringRowColumn+0x8>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	6a 83       	std	Y+2, r22	; 0x02
    1be0:	5c 83       	std	Y+4, r21	; 0x04
    1be2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	6a 81       	ldd	r22, Y+2	; 0x02
    1be8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_displayString>
}
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data){
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	62 97       	sbiw	r28, 0x12	; 18
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	f8 94       	cli
    1c10:	de bf       	out	0x3e, r29	; 62
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	cd bf       	out	0x3d, r28	; 61
    1c16:	9a 8b       	std	Y+18, r25	; 0x12
    1c18:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1c1a:	89 89       	ldd	r24, Y+17	; 0x11
    1c1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c1e:	9e 01       	movw	r18, r28
    1c20:	2f 5f       	subi	r18, 0xFF	; 255
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	b9 01       	movw	r22, r18
    1c26:	4a e0       	ldi	r20, 0x0A	; 10
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	0e 94 42 10 	call	0x2084	; 0x2084 <itoa>
	LCD_displayString(buff); /* Display the string */
    1c2e:	ce 01       	movw	r24, r28
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_displayString>

}
    1c36:	62 96       	adiw	r28, 0x12	; 18
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void){
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command  0x01 */
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	0e 94 a2 09 	call	0x1344	; 0x1344 <LCD_sendCommand>
}
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <wait_using_overflow>:
boolean g_CTC_state = 0;

/*******************************************************************************
 *                      Functions Definition                                   *
 *******************************************************************************/
void wait_using_overflow(void){
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
	/* assign TCNT0 to 5 after every overflow, so overflow = 250msec */
	TCNT0 = 5;
    1c64:	e2 e5       	ldi	r30, 0x52	; 82
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	85 e0       	ldi	r24, 0x05	; 5
    1c6a:	80 83       	st	Z, r24
	if(g_overflowCounter >= no_tics_per_second_in_overflow)
    1c6c:	80 91 74 00 	lds	r24, 0x0074
    1c70:	84 30       	cpi	r24, 0x04	; 4
    1c72:	10 f0       	brcs	.+4      	; 0x1c78 <wait_using_overflow+0x1c>
		g_overflowCounter = 0;
    1c74:	10 92 74 00 	sts	0x0074, r1

	g_overflowCounter++;
    1c78:	80 91 74 00 	lds	r24, 0x0074
    1c7c:	8f 5f       	subi	r24, 0xFF	; 255
    1c7e:	80 93 74 00 	sts	0x0074, r24
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <wait_using_CTC>:
void wait_using_CTC(void){
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
	if(g_CTC_state == 0){
    1c90:	80 91 75 00 	lds	r24, 0x0075
    1c94:	88 23       	and	r24, r24
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <wait_using_CTC+0x18>
		g_CTC_state = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	80 93 75 00 	sts	0x0075, r24
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <wait_using_CTC+0x1c>
	}
	else{
		g_CTC_state = 0;
    1ca0:	10 92 75 00 	sts	0x0075, r1
	}

}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <main>:


int main(){
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	68 97       	sbiw	r28, 0x18	; 24
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61

	/*set PC0 pin as output and initialize it with logic low*/
	GPIO_setupPinDirection(PORTC_ID, PIN0_ID, PIN_OUTPUT);
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_LOW);
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>

	/*enable i-bit*/
	SREG |= (1<<7);
    1cd2:	af e5       	ldi	r26, 0x5F	; 95
    1cd4:	b0 e0       	ldi	r27, 0x00	; 0
    1cd6:	ef e5       	ldi	r30, 0x5F	; 95
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	80 68       	ori	r24, 0x80	; 128
    1cde:	8c 93       	st	X, r24
	/*Configuration structure for timer0 overflow mode*/
	TIMERS_ConfigType timer0_overflow_config = {F_CPU_1024, OVERFLOW_MODE, 5, NO_COMP_VALUE};
    1ce0:	9e 01       	movw	r18, r28
    1ce2:	2f 5f       	subi	r18, 0xFF	; 255
    1ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce6:	38 8b       	std	Y+16, r19	; 0x10
    1ce8:	2f 87       	std	Y+15, r18	; 0x0f
    1cea:	8e e6       	ldi	r24, 0x6E	; 110
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9a 8b       	std	Y+18, r25	; 0x12
    1cf0:	89 8b       	std	Y+17, r24	; 0x11
    1cf2:	96 e0       	ldi	r25, 0x06	; 6
    1cf4:	9b 8b       	std	Y+19, r25	; 0x13
    1cf6:	e9 89       	ldd	r30, Y+17	; 0x11
    1cf8:	fa 89       	ldd	r31, Y+18	; 0x12
    1cfa:	00 80       	ld	r0, Z
    1cfc:	29 89       	ldd	r18, Y+17	; 0x11
    1cfe:	3a 89       	ldd	r19, Y+18	; 0x12
    1d00:	2f 5f       	subi	r18, 0xFF	; 255
    1d02:	3f 4f       	sbci	r19, 0xFF	; 255
    1d04:	3a 8b       	std	Y+18, r19	; 0x12
    1d06:	29 8b       	std	Y+17, r18	; 0x11
    1d08:	ef 85       	ldd	r30, Y+15	; 0x0f
    1d0a:	f8 89       	ldd	r31, Y+16	; 0x10
    1d0c:	00 82       	st	Z, r0
    1d0e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1d10:	38 89       	ldd	r19, Y+16	; 0x10
    1d12:	2f 5f       	subi	r18, 0xFF	; 255
    1d14:	3f 4f       	sbci	r19, 0xFF	; 255
    1d16:	38 8b       	std	Y+16, r19	; 0x10
    1d18:	2f 87       	std	Y+15, r18	; 0x0f
    1d1a:	3b 89       	ldd	r19, Y+19	; 0x13
    1d1c:	31 50       	subi	r19, 0x01	; 1
    1d1e:	3b 8b       	std	Y+19, r19	; 0x13
    1d20:	8b 89       	ldd	r24, Y+19	; 0x13
    1d22:	88 23       	and	r24, r24
    1d24:	41 f7       	brne	.-48     	; 0x1cf6 <main+0x4c>
	/*Configuration structure for timer0 CTC mode*/
	TIMERS_ConfigType timer0_CTC_config = {F_CPU_1024, CTC_MODE, ZERO_INIT_VALUE, 1000};
    1d26:	fe 01       	movw	r30, r28
    1d28:	37 96       	adiw	r30, 0x07	; 7
    1d2a:	fd 8b       	std	Y+21, r31	; 0x15
    1d2c:	ec 8b       	std	Y+20, r30	; 0x14
    1d2e:	28 e6       	ldi	r18, 0x68	; 104
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	3f 8b       	std	Y+23, r19	; 0x17
    1d34:	2e 8b       	std	Y+22, r18	; 0x16
    1d36:	36 e0       	ldi	r19, 0x06	; 6
    1d38:	38 8f       	std	Y+24, r19	; 0x18
    1d3a:	ee 89       	ldd	r30, Y+22	; 0x16
    1d3c:	ff 89       	ldd	r31, Y+23	; 0x17
    1d3e:	00 80       	ld	r0, Z
    1d40:	2e 89       	ldd	r18, Y+22	; 0x16
    1d42:	3f 89       	ldd	r19, Y+23	; 0x17
    1d44:	2f 5f       	subi	r18, 0xFF	; 255
    1d46:	3f 4f       	sbci	r19, 0xFF	; 255
    1d48:	3f 8b       	std	Y+23, r19	; 0x17
    1d4a:	2e 8b       	std	Y+22, r18	; 0x16
    1d4c:	ec 89       	ldd	r30, Y+20	; 0x14
    1d4e:	fd 89       	ldd	r31, Y+21	; 0x15
    1d50:	00 82       	st	Z, r0
    1d52:	2c 89       	ldd	r18, Y+20	; 0x14
    1d54:	3d 89       	ldd	r19, Y+21	; 0x15
    1d56:	2f 5f       	subi	r18, 0xFF	; 255
    1d58:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5a:	3d 8b       	std	Y+21, r19	; 0x15
    1d5c:	2c 8b       	std	Y+20, r18	; 0x14
    1d5e:	38 8d       	ldd	r19, Y+24	; 0x18
    1d60:	31 50       	subi	r19, 0x01	; 1
    1d62:	38 8f       	std	Y+24, r19	; 0x18
    1d64:	88 8d       	ldd	r24, Y+24	; 0x18
    1d66:	88 23       	and	r24, r24
    1d68:	41 f7       	brne	.-48     	; 0x1d3a <main+0x90>
#ifdef OVERFLOW_TEST
	TIMERS_init(&timer0_overflow_config, TIMER0_ID);
	TIMERS_setCallBack(wait_using_overflow, TIMER0_ID);
#endif /*overflow_test*/
#ifdef CTC_TEST
	TIMERS_init(&timer0_CTC_config, TIMER0_ID);
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	07 96       	adiw	r24, 0x07	; 7
    1d6e:	60 e0       	ldi	r22, 0x00	; 0
    1d70:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <TIMERS_init>
	TIMERS_setCallBack(wait_using_CTC, TIMER0_ID);
    1d74:	84 e4       	ldi	r24, 0x44	; 68
    1d76:	9e e0       	ldi	r25, 0x0E	; 14
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <TIMERS_setCallBack>
		if(g_overflowCounter >= no_tics_per_second_in_overflow){
			TOGGLE_BIT(PORTC, 0);
		}
#endif /*overflow_test*/
#ifdef CTC_TEST
		switch(g_CTC_state){
    1d7e:	80 91 75 00 	lds	r24, 0x0075
    1d82:	e8 2f       	mov	r30, r24
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	fe 87       	std	Y+14, r31	; 0x0e
    1d88:	ed 87       	std	Y+13, r30	; 0x0d
    1d8a:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d8c:	3e 85       	ldd	r19, Y+14	; 0x0e
    1d8e:	21 15       	cp	r18, r1
    1d90:	31 05       	cpc	r19, r1
    1d92:	31 f0       	breq	.+12     	; 0x1da0 <main+0xf6>
    1d94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	39 f0       	breq	.+14     	; 0x1dac <main+0x102>
    1d9e:	ef cf       	rjmp	.-34     	; 0x1d7e <main+0xd4>
		case 0:
			GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_LOW);
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1daa:	e9 cf       	rjmp	.-46     	; 0x1d7e <main+0xd4>
			break;
		case 1:
			GPIO_writePin(PORTC_ID, PIN0_ID, LOGIC_HIGH);
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1db6:	e3 cf       	rjmp	.-58     	; 0x1d7e <main+0xd4>

00001db8 <__vector_9>:
static volatile void (*g_timer2CallBackPtr)(void) = NULL_PTR;

/*******************************************************************************
 *                      Interrupt handler                                      *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    1db8:	1f 92       	push	r1
    1dba:	0f 92       	push	r0
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	0f 92       	push	r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	2f 93       	push	r18
    1dc4:	3f 93       	push	r19
    1dc6:	4f 93       	push	r20
    1dc8:	5f 93       	push	r21
    1dca:	6f 93       	push	r22
    1dcc:	7f 93       	push	r23
    1dce:	8f 93       	push	r24
    1dd0:	9f 93       	push	r25
    1dd2:	af 93       	push	r26
    1dd4:	bf 93       	push	r27
    1dd6:	ef 93       	push	r30
    1dd8:	ff 93       	push	r31
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    1de2:	80 91 76 00 	lds	r24, 0x0076
    1de6:	90 91 77 00 	lds	r25, 0x0077
    1dea:	00 97       	sbiw	r24, 0x00	; 0
    1dec:	29 f0       	breq	.+10     	; 0x1df8 <__vector_9+0x40>
		(*g_timer0CallBackPtr)();
    1dee:	e0 91 76 00 	lds	r30, 0x0076
    1df2:	f0 91 77 00 	lds	r31, 0x0077
    1df6:	09 95       	icall
	}
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	ff 91       	pop	r31
    1dfe:	ef 91       	pop	r30
    1e00:	bf 91       	pop	r27
    1e02:	af 91       	pop	r26
    1e04:	9f 91       	pop	r25
    1e06:	8f 91       	pop	r24
    1e08:	7f 91       	pop	r23
    1e0a:	6f 91       	pop	r22
    1e0c:	5f 91       	pop	r21
    1e0e:	4f 91       	pop	r20
    1e10:	3f 91       	pop	r19
    1e12:	2f 91       	pop	r18
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	0f 90       	pop	r0
    1e1a:	1f 90       	pop	r1
    1e1c:	18 95       	reti

00001e1e <__vector_19>:
ISR(TIMER0_COMP_vect){
    1e1e:	1f 92       	push	r1
    1e20:	0f 92       	push	r0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	0f 92       	push	r0
    1e26:	11 24       	eor	r1, r1
    1e28:	2f 93       	push	r18
    1e2a:	3f 93       	push	r19
    1e2c:	4f 93       	push	r20
    1e2e:	5f 93       	push	r21
    1e30:	6f 93       	push	r22
    1e32:	7f 93       	push	r23
    1e34:	8f 93       	push	r24
    1e36:	9f 93       	push	r25
    1e38:	af 93       	push	r26
    1e3a:	bf 93       	push	r27
    1e3c:	ef 93       	push	r30
    1e3e:	ff 93       	push	r31
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    1e48:	80 91 76 00 	lds	r24, 0x0076
    1e4c:	90 91 77 00 	lds	r25, 0x0077
    1e50:	00 97       	sbiw	r24, 0x00	; 0
    1e52:	29 f0       	breq	.+10     	; 0x1e5e <__vector_19+0x40>
		(*g_timer0CallBackPtr)();
    1e54:	e0 91 76 00 	lds	r30, 0x0076
    1e58:	f0 91 77 00 	lds	r31, 0x0077
    1e5c:	09 95       	icall
	}
}
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	ff 91       	pop	r31
    1e64:	ef 91       	pop	r30
    1e66:	bf 91       	pop	r27
    1e68:	af 91       	pop	r26
    1e6a:	9f 91       	pop	r25
    1e6c:	8f 91       	pop	r24
    1e6e:	7f 91       	pop	r23
    1e70:	6f 91       	pop	r22
    1e72:	5f 91       	pop	r21
    1e74:	4f 91       	pop	r20
    1e76:	3f 91       	pop	r19
    1e78:	2f 91       	pop	r18
    1e7a:	0f 90       	pop	r0
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	0f 90       	pop	r0
    1e80:	1f 90       	pop	r1
    1e82:	18 95       	reti

00001e84 <TIMERS_init>:
 * 	4. Set timer compare value
 * 	Function Input: timer_no => select between timers0,1,2
 * 					Timer configType => setup timer configuration by passing a structure's address
 * 	Note that Timer/Counter1 and Timer/Counter0 share the same prescaler
 */
void TIMERS_init(const TIMERS_ConfigType * Timer_Config_Ptr, TIMERS_Select timer_no){
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <TIMERS_init+0x6>
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <TIMERS_init+0x8>
    1e8c:	0f 92       	push	r0
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	9a 83       	std	Y+2, r25	; 0x02
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_no)
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	00 97       	sbiw	r24, 0x00	; 0
    1ea0:	09 f0       	breq	.+2      	; 0x1ea4 <TIMERS_init+0x20>
    1ea2:	45 c0       	rjmp	.+138    	; 0x1f2e <TIMERS_init+0xaa>
		 * BIT3,6 WGM01:0 => CTC mode => 1,0
		 * Bit 5:4 – COM01:0 => 0,0 non_PWM
		 * Bit 2:0 – CS02:0: Clock Select "prescalers"
		 */
		/*set timer0 to run on the required clock select*/
		TCCR0 = (0x07 & Timer_Config_Ptr->clock);
    1ea4:	a3 e5       	ldi	r26, 0x53	; 83
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1eac:	80 81       	ld	r24, Z
    1eae:	87 70       	andi	r24, 0x07	; 7
    1eb0:	8c 93       	st	X, r24
		/*set timer0 initial value*/
		TCNT0 = Timer_Config_Ptr->timer_init_value;
    1eb2:	a2 e5       	ldi	r26, 0x52	; 82
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eba:	82 81       	ldd	r24, Z+2	; 0x02
    1ebc:	93 81       	ldd	r25, Z+3	; 0x03
    1ebe:	8c 93       	st	X, r24
		switch(Timer_Config_Ptr->mode)
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	81 81       	ldd	r24, Z+1	; 0x01
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	3d 83       	std	Y+5, r19	; 0x05
    1ecc:	2c 83       	std	Y+4, r18	; 0x04
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	31 f0       	breq	.+12     	; 0x1ee2 <TIMERS_init+0x5e>
    1ed6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eda:	21 30       	cpi	r18, 0x01	; 1
    1edc:	31 05       	cpc	r19, r1
    1ede:	89 f0       	breq	.+34     	; 0x1f02 <TIMERS_init+0x7e>
    1ee0:	26 c0       	rjmp	.+76     	; 0x1f2e <TIMERS_init+0xaa>
		{
		case OVERFLOW_MODE:
			/*set pin7 FOC0*/
			TCCR0 |= (1<<FOC0);
    1ee2:	a3 e5       	ldi	r26, 0x53	; 83
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e3 e5       	ldi	r30, 0x53	; 83
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	80 68       	ori	r24, 0x80	; 128
    1eee:	8c 93       	st	X, r24
//			TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
			/*enable timer overflow interrupt and disable CTC interrupt*/
			TIMSK = (TIMSK & 0xFC) | (1<<TOIE0);
    1ef0:	a9 e5       	ldi	r26, 0x59	; 89
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e9 e5       	ldi	r30, 0x59	; 89
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	8c 7f       	andi	r24, 0xFC	; 252
    1efc:	81 60       	ori	r24, 0x01	; 1
    1efe:	8c 93       	st	X, r24
    1f00:	16 c0       	rjmp	.+44     	; 0x1f2e <TIMERS_init+0xaa>
			break;
		case CTC_MODE:
			/*assign a compare match value to Output Compare Register – OCR0*/
			OCR0 = Timer_Config_Ptr->timer_Compare_value;
    1f02:	ac e5       	ldi	r26, 0x5C	; 92
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e9 81       	ldd	r30, Y+1	; 0x01
    1f08:	fa 81       	ldd	r31, Y+2	; 0x02
    1f0a:	84 81       	ldd	r24, Z+4	; 0x04
    1f0c:	95 81       	ldd	r25, Z+5	; 0x05
    1f0e:	8c 93       	st	X, r24
			/*set timer0 to operate on CTC mode*/
			TCCR0 |= (1<<FOC0) | (1<<WGM01);
    1f10:	a3 e5       	ldi	r26, 0x53	; 83
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e3 e5       	ldi	r30, 0x53	; 83
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	88 68       	ori	r24, 0x88	; 136
    1f1c:	8c 93       	st	X, r24
			/*disable overflow interrupt and enable CTC interrupt*/
			TIMSK = (TIMSK & 0xFC) | (1<<OCIE0);
    1f1e:	a9 e5       	ldi	r26, 0x59	; 89
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e9 e5       	ldi	r30, 0x59	; 89
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	8c 7f       	andi	r24, 0xFC	; 252
    1f2a:	82 60       	ori	r24, 0x02	; 2
    1f2c:	8c 93       	st	X, r24
	case TIMER1_ID:
		break;
	case TIMER2_ID:
		break;
	}
}
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <TIMERS_setCallBack>:

/*
 * Description: Function to set the Call Back function address for each timer.
 */
void TIMERS_setCallBack(void(*a_ptr)(void), TIMERS_Select timer_no){
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <TIMERS_setCallBack+0x6>
    1f44:	0f 92       	push	r0
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	9a 83       	std	Y+2, r25	; 0x02
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	6b 83       	std	Y+3, r22	; 0x03
	if (timer_no == TIMER0_ID)
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	88 23       	and	r24, r24
    1f54:	39 f4       	brne	.+14     	; 0x1f64 <TIMERS_setCallBack+0x26>
		g_timer0CallBackPtr = a_ptr;
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5a:	90 93 77 00 	sts	0x0077, r25
    1f5e:	80 93 76 00 	sts	0x0076, r24
    1f62:	13 c0       	rjmp	.+38     	; 0x1f8a <TIMERS_setCallBack+0x4c>
	else if(timer_no == TIMER1_ID)
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	81 30       	cpi	r24, 0x01	; 1
    1f68:	39 f4       	brne	.+14     	; 0x1f78 <TIMERS_setCallBack+0x3a>
		g_timer1CallBackPtr = a_ptr;
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f6e:	90 93 79 00 	sts	0x0079, r25
    1f72:	80 93 78 00 	sts	0x0078, r24
    1f76:	09 c0       	rjmp	.+18     	; 0x1f8a <TIMERS_setCallBack+0x4c>
	else if(timer_no == TIMER2_ID)
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	82 30       	cpi	r24, 0x02	; 2
    1f7c:	31 f4       	brne	.+12     	; 0x1f8a <TIMERS_setCallBack+0x4c>
		g_timer2CallBackPtr = a_ptr;
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	90 93 7b 00 	sts	0x007B, r25
    1f86:	80 93 7a 00 	sts	0x007A, r24
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <clearTimerValue>:

/*
 * Description: Function to clear a timer Value to start count from ZERO
 */
void clearTimerValue(TIMERS_Select timer_no){
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	0f 92       	push	r0
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	89 83       	std	Y+1, r24	; 0x01
	if (timer_no == TIMER0_ID)
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	88 23       	and	r24, r24
    1fa6:	21 f4       	brne	.+8      	; 0x1fb0 <clearTimerValue+0x1a>
		TCNT0 = 0;
    1fa8:	e2 e5       	ldi	r30, 0x52	; 82
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	10 82       	st	Z, r1
    1fae:	0e c0       	rjmp	.+28     	; 0x1fcc <clearTimerValue+0x36>
	else if(timer_no == TIMER1_ID)
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	29 f4       	brne	.+10     	; 0x1fc0 <clearTimerValue+0x2a>
		TCNT1 = 0;
    1fb6:	ec e4       	ldi	r30, 0x4C	; 76
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	11 82       	std	Z+1, r1	; 0x01
    1fbc:	10 82       	st	Z, r1
    1fbe:	06 c0       	rjmp	.+12     	; 0x1fcc <clearTimerValue+0x36>
	else if(timer_no == TIMER2_ID)
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	19 f4       	brne	.+6      	; 0x1fcc <clearTimerValue+0x36>
		TCNT2 = 0;
    1fc6:	e4 e4       	ldi	r30, 0x44	; 68
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	10 82       	st	Z, r1

}
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <TIMERS_DeInit>:

/*
 * Description: Function to disable a timer
 */
void TIMERS_DeInit(TIMERS_Select timer_no){
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	0f 92       	push	r0
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	89 83       	std	Y+1, r24	; 0x01
	if (timer_no == TIMER0_ID)
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	88 23       	and	r24, r24
    1fe4:	21 f4       	brne	.+8      	; 0x1fee <TIMERS_DeInit+0x1a>
		TCCR0 = 0;
    1fe6:	e3 e5       	ldi	r30, 0x53	; 83
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	10 82       	st	Z, r1
    1fec:	10 c0       	rjmp	.+32     	; 0x200e <TIMERS_DeInit+0x3a>
	else if(timer_no == TIMER1_ID){
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	39 f4       	brne	.+14     	; 0x2002 <TIMERS_DeInit+0x2e>
		TCCR1A = 0;
    1ff4:	ef e4       	ldi	r30, 0x4F	; 79
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	10 82       	st	Z, r1
		TCCR1B = 0;
    1ffa:	ee e4       	ldi	r30, 0x4E	; 78
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	10 82       	st	Z, r1
    2000:	06 c0       	rjmp	.+12     	; 0x200e <TIMERS_DeInit+0x3a>
	}
	else if(timer_no == TIMER2_ID)
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	82 30       	cpi	r24, 0x02	; 2
    2006:	19 f4       	brne	.+6      	; 0x200e <TIMERS_DeInit+0x3a>
		TCCR2 = 0;
    2008:	e5 e4       	ldi	r30, 0x45	; 69
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	10 82       	st	Z, r1

}
    200e:	0f 90       	pop	r0
    2010:	cf 91       	pop	r28
    2012:	df 91       	pop	r29
    2014:	08 95       	ret

00002016 <__prologue_saves__>:
    2016:	2f 92       	push	r2
    2018:	3f 92       	push	r3
    201a:	4f 92       	push	r4
    201c:	5f 92       	push	r5
    201e:	6f 92       	push	r6
    2020:	7f 92       	push	r7
    2022:	8f 92       	push	r8
    2024:	9f 92       	push	r9
    2026:	af 92       	push	r10
    2028:	bf 92       	push	r11
    202a:	cf 92       	push	r12
    202c:	df 92       	push	r13
    202e:	ef 92       	push	r14
    2030:	ff 92       	push	r15
    2032:	0f 93       	push	r16
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	ca 1b       	sub	r28, r26
    2040:	db 0b       	sbc	r29, r27
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	09 94       	ijmp

0000204e <__epilogue_restores__>:
    204e:	2a 88       	ldd	r2, Y+18	; 0x12
    2050:	39 88       	ldd	r3, Y+17	; 0x11
    2052:	48 88       	ldd	r4, Y+16	; 0x10
    2054:	5f 84       	ldd	r5, Y+15	; 0x0f
    2056:	6e 84       	ldd	r6, Y+14	; 0x0e
    2058:	7d 84       	ldd	r7, Y+13	; 0x0d
    205a:	8c 84       	ldd	r8, Y+12	; 0x0c
    205c:	9b 84       	ldd	r9, Y+11	; 0x0b
    205e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2060:	b9 84       	ldd	r11, Y+9	; 0x09
    2062:	c8 84       	ldd	r12, Y+8	; 0x08
    2064:	df 80       	ldd	r13, Y+7	; 0x07
    2066:	ee 80       	ldd	r14, Y+6	; 0x06
    2068:	fd 80       	ldd	r15, Y+5	; 0x05
    206a:	0c 81       	ldd	r16, Y+4	; 0x04
    206c:	1b 81       	ldd	r17, Y+3	; 0x03
    206e:	aa 81       	ldd	r26, Y+2	; 0x02
    2070:	b9 81       	ldd	r27, Y+1	; 0x01
    2072:	ce 0f       	add	r28, r30
    2074:	d1 1d       	adc	r29, r1
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
    2080:	ed 01       	movw	r28, r26
    2082:	08 95       	ret

00002084 <itoa>:
    2084:	fb 01       	movw	r30, r22
    2086:	9f 01       	movw	r18, r30
    2088:	e8 94       	clt
    208a:	42 30       	cpi	r20, 0x02	; 2
    208c:	c4 f0       	brlt	.+48     	; 0x20be <itoa+0x3a>
    208e:	45 32       	cpi	r20, 0x25	; 37
    2090:	b4 f4       	brge	.+44     	; 0x20be <itoa+0x3a>
    2092:	4a 30       	cpi	r20, 0x0A	; 10
    2094:	29 f4       	brne	.+10     	; 0x20a0 <itoa+0x1c>
    2096:	97 fb       	bst	r25, 7
    2098:	1e f4       	brtc	.+6      	; 0x20a0 <itoa+0x1c>
    209a:	90 95       	com	r25
    209c:	81 95       	neg	r24
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	64 2f       	mov	r22, r20
    20a2:	77 27       	eor	r23, r23
    20a4:	0e 94 73 10 	call	0x20e6	; 0x20e6 <__udivmodhi4>
    20a8:	80 5d       	subi	r24, 0xD0	; 208
    20aa:	8a 33       	cpi	r24, 0x3A	; 58
    20ac:	0c f0       	brlt	.+2      	; 0x20b0 <itoa+0x2c>
    20ae:	89 5d       	subi	r24, 0xD9	; 217
    20b0:	81 93       	st	Z+, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	a1 f7       	brne	.-24     	; 0x20a0 <itoa+0x1c>
    20b8:	16 f4       	brtc	.+4      	; 0x20be <itoa+0x3a>
    20ba:	5d e2       	ldi	r21, 0x2D	; 45
    20bc:	51 93       	st	Z+, r21
    20be:	10 82       	st	Z, r1
    20c0:	c9 01       	movw	r24, r18
    20c2:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <strrev>

000020c6 <strrev>:
    20c6:	dc 01       	movw	r26, r24
    20c8:	fc 01       	movw	r30, r24
    20ca:	67 2f       	mov	r22, r23
    20cc:	71 91       	ld	r23, Z+
    20ce:	77 23       	and	r23, r23
    20d0:	e1 f7       	brne	.-8      	; 0x20ca <strrev+0x4>
    20d2:	32 97       	sbiw	r30, 0x02	; 2
    20d4:	04 c0       	rjmp	.+8      	; 0x20de <strrev+0x18>
    20d6:	7c 91       	ld	r23, X
    20d8:	6d 93       	st	X+, r22
    20da:	70 83       	st	Z, r23
    20dc:	62 91       	ld	r22, -Z
    20de:	ae 17       	cp	r26, r30
    20e0:	bf 07       	cpc	r27, r31
    20e2:	c8 f3       	brcs	.-14     	; 0x20d6 <strrev+0x10>
    20e4:	08 95       	ret

000020e6 <__udivmodhi4>:
    20e6:	aa 1b       	sub	r26, r26
    20e8:	bb 1b       	sub	r27, r27
    20ea:	51 e1       	ldi	r21, 0x11	; 17
    20ec:	07 c0       	rjmp	.+14     	; 0x20fc <__udivmodhi4_ep>

000020ee <__udivmodhi4_loop>:
    20ee:	aa 1f       	adc	r26, r26
    20f0:	bb 1f       	adc	r27, r27
    20f2:	a6 17       	cp	r26, r22
    20f4:	b7 07       	cpc	r27, r23
    20f6:	10 f0       	brcs	.+4      	; 0x20fc <__udivmodhi4_ep>
    20f8:	a6 1b       	sub	r26, r22
    20fa:	b7 0b       	sbc	r27, r23

000020fc <__udivmodhi4_ep>:
    20fc:	88 1f       	adc	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	5a 95       	dec	r21
    2102:	a9 f7       	brne	.-22     	; 0x20ee <__udivmodhi4_loop>
    2104:	80 95       	com	r24
    2106:	90 95       	com	r25
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	08 95       	ret

0000210e <_exit>:
    210e:	f8 94       	cli

00002110 <__stop_program>:
    2110:	ff cf       	rjmp	.-2      	; 0x2110 <__stop_program>
