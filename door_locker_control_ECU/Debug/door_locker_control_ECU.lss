
door_locker_control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000f4e  00000fe2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006c  0080006c  00000fee  2**0
                  ALLOC
  3 .stab         000017dc  00000000  00000000  00000ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f2f  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
/*******************************************************************************
 *                      Global Variables                                       *
 *******************************************************************************/
uint8 g_timer0_ticks = 0;

int main(void){
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	6c 97       	sbiw	r28, 0x1c	; 28
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	 * receivedByte      	-> variable to hold byte that received from master throw UART
	 * passwordSettingState	-> uint8 variable to store if password is setting before or not
	 * index				-> index used as for loop counter
	 *
	 */
	uint8 password[PASSCODE_SIZE] = {'\0'};
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	fe 01       	movw	r30, r28
  aa:	34 96       	adiw	r30, 0x04	; 4
  ac:	df 01       	movw	r26, r30
  ae:	28 2f       	mov	r18, r24
  b0:	1d 92       	st	X+, r1
  b2:	2a 95       	dec	r18
  b4:	e9 f7       	brne	.-6      	; 0xb0 <main+0x1e>
	uint8 confirmPassword[PASSCODE_SIZE] = {'\0'};
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	fe 01       	movw	r30, r28
  ba:	3a 96       	adiw	r30, 0x0a	; 10
  bc:	df 01       	movw	r26, r30
  be:	28 2f       	mov	r18, r24
  c0:	1d 92       	st	X+, r1
  c2:	2a 95       	dec	r18
  c4:	e9 f7       	brne	.-6      	; 0xc0 <main+0x2e>
	uint8 receivedByte = DUMMY_CHAR;
  c6:	84 e4       	ldi	r24, 0x44	; 68
  c8:	8b 83       	std	Y+3, r24	; 0x03
	uint8 passwordSettingState;
	uint8 index;

	/*initialize UART with baud rate 9600*/
	UART_init(9600);
  ca:	60 e8       	ldi	r22, 0x80	; 128
  cc:	75 e2       	ldi	r23, 0x25	; 37
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 07 07 	call	0xe0e	; 0xe0e <UART_init>

	/*enable i-bit*/
	SREG |= (1<<7);
  d6:	af e5       	ldi	r26, 0x5F	; 95
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	ef e5       	ldi	r30, 0x5F	; 95
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	8c 93       	st	X, r24
	/*Configuration structure for timer0 CTC mode*/
	TIMERS_ConfigType timer0_overflow_config = {F_CPU_1024, OVERFLOW_MODE, 5, NO_COMP_VALUE};
  e4:	ce 01       	movw	r24, r28
  e6:	40 96       	adiw	r24, 0x10	; 16
  e8:	99 8f       	std	Y+25, r25	; 0x19
  ea:	88 8f       	std	Y+24, r24	; 0x18
  ec:	a0 e6       	ldi	r26, 0x60	; 96
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	bb 8f       	std	Y+27, r27	; 0x1b
  f2:	aa 8f       	std	Y+26, r26	; 0x1a
  f4:	b6 e0       	ldi	r27, 0x06	; 6
  f6:	bc 8f       	std	Y+28, r27	; 0x1c
  f8:	ea 8d       	ldd	r30, Y+26	; 0x1a
  fa:	fb 8d       	ldd	r31, Y+27	; 0x1b
  fc:	00 80       	ld	r0, Z
  fe:	2a 8d       	ldd	r18, Y+26	; 0x1a
 100:	3b 8d       	ldd	r19, Y+27	; 0x1b
 102:	2f 5f       	subi	r18, 0xFF	; 255
 104:	3f 4f       	sbci	r19, 0xFF	; 255
 106:	3b 8f       	std	Y+27, r19	; 0x1b
 108:	2a 8f       	std	Y+26, r18	; 0x1a
 10a:	a8 8d       	ldd	r26, Y+24	; 0x18
 10c:	b9 8d       	ldd	r27, Y+25	; 0x19
 10e:	0c 92       	st	X, r0
 110:	e8 8d       	ldd	r30, Y+24	; 0x18
 112:	f9 8d       	ldd	r31, Y+25	; 0x19
 114:	31 96       	adiw	r30, 0x01	; 1
 116:	f9 8f       	std	Y+25, r31	; 0x19
 118:	e8 8f       	std	Y+24, r30	; 0x18
 11a:	fc 8d       	ldd	r31, Y+28	; 0x1c
 11c:	f1 50       	subi	r31, 0x01	; 1
 11e:	fc 8f       	std	Y+28, r31	; 0x1c
 120:	2c 8d       	ldd	r18, Y+28	; 0x1c
 122:	22 23       	and	r18, r18
 124:	49 f7       	brne	.-46     	; 0xf8 <main+0x66>
	/*initialize timer */
	TIMERS_init(&timer0_overflow_config, TIMER0_ID);
 126:	ce 01       	movw	r24, r28
 128:	40 96       	adiw	r24, 0x10	; 16
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	0e 94 01 06 	call	0xc02	; 0xc02 <TIMERS_init>
	/*set call back function for timer0*/
	TIMERS_setCallBack(timer0_handler, TIMER0_ID);
 130:	80 ea       	ldi	r24, 0xA0	; 160
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	0e 94 5e 06 	call	0xcbc	; 0xcbc <TIMERS_setCallBack>


	/*initialize DC motor */
	DcMotor_Init();
 13a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DcMotor_Init>


	while(1)
	{
		/*receive byte from HMI ECU*/
		receivedByte = UART_recieveByte();
 13e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <UART_recieveByte>
 142:	8b 83       	std	Y+3, r24	; 0x03

		/*switch case on received byte*/
		switch(receivedByte)
 144:	8b 81       	ldd	r24, Y+3	; 0x03
 146:	a8 2f       	mov	r26, r24
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	bf 8b       	std	Y+23, r27	; 0x17
 14c:	ae 8b       	std	Y+22, r26	; 0x16
 14e:	ee 89       	ldd	r30, Y+22	; 0x16
 150:	ff 89       	ldd	r31, Y+23	; 0x17
 152:	ed 34       	cpi	r30, 0x4D	; 77
 154:	f1 05       	cpc	r31, r1
 156:	09 f4       	brne	.+2      	; 0x15a <main+0xc8>
 158:	5b c0       	rjmp	.+182    	; 0x210 <main+0x17e>
 15a:	2e 89       	ldd	r18, Y+22	; 0x16
 15c:	3f 89       	ldd	r19, Y+23	; 0x17
 15e:	2e 34       	cpi	r18, 0x4E	; 78
 160:	31 05       	cpc	r19, r1
 162:	64 f4       	brge	.+24     	; 0x17c <main+0xea>
 164:	8e 89       	ldd	r24, Y+22	; 0x16
 166:	9f 89       	ldd	r25, Y+23	; 0x17
 168:	8b 32       	cpi	r24, 0x2B	; 43
 16a:	91 05       	cpc	r25, r1
 16c:	09 f4       	brne	.+2      	; 0x170 <main+0xde>
 16e:	5e c0       	rjmp	.+188    	; 0x22c <main+0x19a>
 170:	ae 89       	ldd	r26, Y+22	; 0x16
 172:	bf 89       	ldd	r27, Y+23	; 0x17
 174:	ad 32       	cpi	r26, 0x2D	; 45
 176:	b1 05       	cpc	r27, r1
 178:	c9 f0       	breq	.+50     	; 0x1ac <main+0x11a>
 17a:	5a c0       	rjmp	.+180    	; 0x230 <main+0x19e>
 17c:	ee 89       	ldd	r30, Y+22	; 0x16
 17e:	ff 89       	ldd	r31, Y+23	; 0x17
 180:	e3 35       	cpi	r30, 0x53	; 83
 182:	f1 05       	cpc	r31, r1
 184:	09 f0       	breq	.+2      	; 0x188 <main+0xf6>
 186:	54 c0       	rjmp	.+168    	; 0x230 <main+0x19e>
		{
		case CHECK_PASSWORD_SETTING:
			/*call check password setting function*/
			passwordSettingState = check_password_setting_status();
 188:	0e 94 1b 01 	call	0x236	; 0x236 <check_password_setting_status>
 18c:	8a 83       	std	Y+2, r24	; 0x02
			/*if password setting state = 1 > send(set)
			 * else if = 0 > send(not set)
			 */
			if(passwordSettingState){
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	88 23       	and	r24, r24
 192:	21 f0       	breq	.+8      	; 0x19c <main+0x10a>
				UART_sendByte(PASSWORD_SET);
 194:	89 e5       	ldi	r24, 0x59	; 89
 196:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_sendByte>
 19a:	4a c0       	rjmp	.+148    	; 0x230 <main+0x19e>
			}
			else if (!passwordSettingState){
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	88 23       	and	r24, r24
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <main+0x112>
 1a2:	46 c0       	rjmp	.+140    	; 0x230 <main+0x19e>
				UART_sendByte(PASSWORD_NOT_SET);
 1a4:	8e e4       	ldi	r24, 0x4E	; 78
 1a6:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_sendByte>
 1aa:	42 c0       	rjmp	.+132    	; 0x230 <main+0x19e>
			}
			break;
		case SET_PASSWORD:
			/*receive two passwords form HMI*/
			UART_sendByte(EUC2_READY);
 1ac:	80 e4       	ldi	r24, 0x40	; 64
 1ae:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_sendByte>
			receive_password_from_HMI(password);
 1b2:	ce 01       	movw	r24, r28
 1b4:	04 96       	adiw	r24, 0x04	; 4
 1b6:	0e 94 23 01 	call	0x246	; 0x246 <receive_password_from_HMI>
			UART_sendByte(EUC2_READY);
 1ba:	80 e4       	ldi	r24, 0x40	; 64
 1bc:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_sendByte>
			receive_password_from_HMI(confirmPassword);
 1c0:	ce 01       	movw	r24, r28
 1c2:	0a 96       	adiw	r24, 0x0a	; 10
 1c4:	0e 94 23 01 	call	0x246	; 0x246 <receive_password_from_HMI>
			for(index = 0; index < PASSCODE_SIZE ; index++)
 1c8:	19 82       	std	Y+1, r1	; 0x01
 1ca:	1b c0       	rjmp	.+54     	; 0x202 <main+0x170>
			{
				if(password[index] != confirmPassword[index]){
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	ce 01       	movw	r24, r28
 1d4:	04 96       	adiw	r24, 0x04	; 4
 1d6:	fc 01       	movw	r30, r24
 1d8:	e2 0f       	add	r30, r18
 1da:	f3 1f       	adc	r31, r19
 1dc:	40 81       	ld	r20, Z
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	ce 01       	movw	r24, r28
 1e6:	0a 96       	adiw	r24, 0x0a	; 10
 1e8:	fc 01       	movw	r30, r24
 1ea:	e2 0f       	add	r30, r18
 1ec:	f3 1f       	adc	r31, r19
 1ee:	80 81       	ld	r24, Z
 1f0:	48 17       	cp	r20, r24
 1f2:	21 f0       	breq	.+8      	; 0x1fc <main+0x16a>
					UART_sendByte(PASSWORD_NOT_IDENTICAL);
 1f4:	88 e2       	ldi	r24, 0x28	; 40
 1f6:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_sendByte>
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <main+0x176>
			/*receive two passwords form HMI*/
			UART_sendByte(EUC2_READY);
			receive_password_from_HMI(password);
			UART_sendByte(EUC2_READY);
			receive_password_from_HMI(confirmPassword);
			for(index = 0; index < PASSCODE_SIZE ; index++)
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	86 30       	cpi	r24, 0x06	; 6
 206:	10 f3       	brcs	.-60     	; 0x1cc <main+0x13a>
				if(password[index] != confirmPassword[index]){
					UART_sendByte(PASSWORD_NOT_IDENTICAL);
					break;
				}
			}
			UART_sendByte(PASSWORD_IDENTICAL);
 208:	89 e2       	ldi	r24, 0x29	; 41
 20a:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_sendByte>
 20e:	10 c0       	rjmp	.+32     	; 0x230 <main+0x19e>
			break;
		case CHECK_PASSWORD_MATCH:
			UART_sendByte(EUC2_READY);
 210:	80 e4       	ldi	r24, 0x40	; 64
 212:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_sendByte>
			receive_password_from_HMI(password);
 216:	ce 01       	movw	r24, r28
 218:	04 96       	adiw	r24, 0x04	; 4
 21a:	0e 94 23 01 	call	0x246	; 0x246 <receive_password_from_HMI>
			/*call match password function*/
			UART_sendByte(check_password_match(password));
 21e:	ce 01       	movw	r24, r28
 220:	04 96       	adiw	r24, 0x04	; 4
 222:	0e 94 49 01 	call	0x292	; 0x292 <check_password_match>
 226:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_sendByte>
 22a:	02 c0       	rjmp	.+4      	; 0x230 <main+0x19e>
			break;
		case OPEN_DOOR:
			/*open door for 3 seconds*/
			open_door();
 22c:	0e 94 b1 01 	call	0x362	; 0x362 <open_door>

			break;
		default:
			break;
		}
		receivedByte  = DUMMY_CHAR;
 230:	84 e4       	ldi	r24, 0x44	; 68
 232:	8b 83       	std	Y+3, r24	; 0x03
 234:	84 cf       	rjmp	.-248    	; 0x13e <main+0xac>

00000236 <check_password_setting_status>:
 *                    Return 0 if password is not set
 *
 *
 */
uint8 check_password_setting_status(void)
{
 236:	df 93       	push	r29
 238:	cf 93       	push	r28
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
	/*check EEPROM Specific Address*/
	/*if there is one => return 1; (set)
	 *if there is 0 => return 0 (not set)
	 */
	return 1; /*just in testing phase*/
 23e:	81 e0       	ldi	r24, 0x01	; 1
}
 240:	cf 91       	pop	r28
 242:	df 91       	pop	r29
 244:	08 95       	ret

00000246 <receive_password_from_HMI>:
 * [Args] : non
 * [in] uint8 *pass: pointer to string to store the received password
 * [Returns] :
 ****************************************************/
void receive_password_from_HMI(uint8 *pass)
{
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	df 93       	push	r29
 24c:	cf 93       	push	r28
 24e:	00 d0       	rcall	.+0      	; 0x250 <receive_password_from_HMI+0xa>
 250:	0f 92       	push	r0
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	9b 83       	std	Y+3, r25	; 0x03
 258:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i = 0; i<PASSCODE_SIZE;i++){
 25a:	19 82       	std	Y+1, r1	; 0x01
 25c:	0f c0       	rjmp	.+30     	; 0x27c <receive_password_from_HMI+0x36>
		pass[i] = UART_recieveByte();
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	28 2f       	mov	r18, r24
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	9b 81       	ldd	r25, Y+3	; 0x03
 268:	8c 01       	movw	r16, r24
 26a:	02 0f       	add	r16, r18
 26c:	13 1f       	adc	r17, r19
 26e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <UART_recieveByte>
 272:	f8 01       	movw	r30, r16
 274:	80 83       	st	Z, r24
 * [Returns] :
 ****************************************************/
void receive_password_from_HMI(uint8 *pass)
{
	uint8 i;
	for(i = 0; i<PASSCODE_SIZE;i++){
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	89 83       	std	Y+1, r24	; 0x01
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	86 30       	cpi	r24, 0x06	; 6
 280:	70 f3       	brcs	.-36     	; 0x25e <receive_password_from_HMI+0x18>
		pass[i] = UART_recieveByte();
	}
}
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	cf 91       	pop	r28
 28a:	df 91       	pop	r29
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	08 95       	ret

00000292 <check_password_match>:
 * [Args] : non
 * [in] uint8 *pass: pointer to string of password that required to be checked
 * [Returns] : password matching status
 ****************************************************/
uint8 check_password_match(uint8 *pass)
{
 292:	df 93       	push	r29
 294:	cf 93       	push	r28
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
 29a:	2f 97       	sbiw	r28, 0x0f	; 15
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
 2a6:	99 87       	std	Y+9, r25	; 0x09
 2a8:	88 87       	std	Y+8, r24	; 0x08
#ifdef TESTING_PAHSE
	uint8 password [PASSCODE_SIZE]= {'2','2','2','2','2','\0'};
 2aa:	ce 01       	movw	r24, r28
 2ac:	02 96       	adiw	r24, 0x02	; 2
 2ae:	9c 87       	std	Y+12, r25	; 0x0c
 2b0:	8b 87       	std	Y+11, r24	; 0x0b
 2b2:	e6 e6       	ldi	r30, 0x66	; 102
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	fe 87       	std	Y+14, r31	; 0x0e
 2b8:	ed 87       	std	Y+13, r30	; 0x0d
 2ba:	f6 e0       	ldi	r31, 0x06	; 6
 2bc:	ff 87       	std	Y+15, r31	; 0x0f
 2be:	ed 85       	ldd	r30, Y+13	; 0x0d
 2c0:	fe 85       	ldd	r31, Y+14	; 0x0e
 2c2:	00 80       	ld	r0, Z
 2c4:	8d 85       	ldd	r24, Y+13	; 0x0d
 2c6:	9e 85       	ldd	r25, Y+14	; 0x0e
 2c8:	01 96       	adiw	r24, 0x01	; 1
 2ca:	9e 87       	std	Y+14, r25	; 0x0e
 2cc:	8d 87       	std	Y+13, r24	; 0x0d
 2ce:	eb 85       	ldd	r30, Y+11	; 0x0b
 2d0:	fc 85       	ldd	r31, Y+12	; 0x0c
 2d2:	00 82       	st	Z, r0
 2d4:	8b 85       	ldd	r24, Y+11	; 0x0b
 2d6:	9c 85       	ldd	r25, Y+12	; 0x0c
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	9c 87       	std	Y+12, r25	; 0x0c
 2dc:	8b 87       	std	Y+11, r24	; 0x0b
 2de:	9f 85       	ldd	r25, Y+15	; 0x0f
 2e0:	91 50       	subi	r25, 0x01	; 1
 2e2:	9f 87       	std	Y+15, r25	; 0x0f
 2e4:	ef 85       	ldd	r30, Y+15	; 0x0f
 2e6:	ee 23       	and	r30, r30
 2e8:	51 f7       	brne	.-44     	; 0x2be <check_password_match+0x2c>
#endif
	/*
	 * password => get stored password from EEPROM
	 */
	uint8 index;
	for(index = 0; index < PASSCODE_SIZE ; index++)
 2ea:	19 82       	std	Y+1, r1	; 0x01
 2ec:	1a c0       	rjmp	.+52     	; 0x322 <check_password_match+0x90>
	{
		if(password[index] != pass[index]){
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	ce 01       	movw	r24, r28
 2f6:	02 96       	adiw	r24, 0x02	; 2
 2f8:	fc 01       	movw	r30, r24
 2fa:	e2 0f       	add	r30, r18
 2fc:	f3 1f       	adc	r31, r19
 2fe:	40 81       	ld	r20, Z
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	28 2f       	mov	r18, r24
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	88 85       	ldd	r24, Y+8	; 0x08
 308:	99 85       	ldd	r25, Y+9	; 0x09
 30a:	fc 01       	movw	r30, r24
 30c:	e2 0f       	add	r30, r18
 30e:	f3 1f       	adc	r31, r19
 310:	80 81       	ld	r24, Z
 312:	48 17       	cp	r20, r24
 314:	19 f0       	breq	.+6      	; 0x31c <check_password_match+0x8a>
			return PASSWORD_NOT_MATCH;
 316:	fe e6       	ldi	r31, 0x6E	; 110
 318:	fa 87       	std	Y+10, r31	; 0x0a
 31a:	08 c0       	rjmp	.+16     	; 0x32c <check_password_match+0x9a>
#endif
	/*
	 * password => get stored password from EEPROM
	 */
	uint8 index;
	for(index = 0; index < PASSCODE_SIZE ; index++)
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	86 30       	cpi	r24, 0x06	; 6
 326:	18 f3       	brcs	.-58     	; 0x2ee <check_password_match+0x5c>
	{
		if(password[index] != pass[index]){
			return PASSWORD_NOT_MATCH;
		}
	}
	return PASSWORD_MATCH;
 328:	89 e7       	ldi	r24, 0x79	; 121
 32a:	8a 87       	std	Y+10, r24	; 0x0a
 32c:	8a 85       	ldd	r24, Y+10	; 0x0a
}
 32e:	2f 96       	adiw	r28, 0x0f	; 15
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
 33a:	cf 91       	pop	r28
 33c:	df 91       	pop	r29
 33e:	08 95       	ret

00000340 <timer0_handler>:
 * [Description] : function to handle
 * [Args] : non
 * [in]: non
 * [Returns] : non
 ****************************************************/
void timer0_handler(void){
 340:	df 93       	push	r29
 342:	cf 93       	push	r28
 344:	cd b7       	in	r28, 0x3d	; 61
 346:	de b7       	in	r29, 0x3e	; 62
	setTimerValue(TIMER0_ID, 5);
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	65 e0       	ldi	r22, 0x05	; 5
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	0e 94 df 06 	call	0xdbe	; 0xdbe <setTimerValue>
	g_timer0_ticks++;
 352:	80 91 6c 00 	lds	r24, 0x006C
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	80 93 6c 00 	sts	0x006C, r24
}
 35c:	cf 91       	pop	r28
 35e:	df 91       	pop	r29
 360:	08 95       	ret

00000362 <open_door>:
 * [Description] : function to open the door using DC-motor
 * [Args] : non
 * [in]: non
 * [Returns] : non
 ****************************************************/
void open_door(void){
 362:	df 93       	push	r29
 364:	cf 93       	push	r28
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
	/*rotate motor for 15 seconds CW*/
	g_timer0_ticks = 0;
 36a:	10 92 6c 00 	sts	0x006C, r1
	DcMotor_Rotate(DC_CW);
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DcMotor_Rotate>
	while(g_timer0_ticks < 60);
 374:	80 91 6c 00 	lds	r24, 0x006C
 378:	8c 33       	cpi	r24, 0x3C	; 60
 37a:	e0 f3       	brcs	.-8      	; 0x374 <open_door+0x12>

	/*hold motor for 3 seconds */
	g_timer0_ticks = 0;
 37c:	10 92 6c 00 	sts	0x006C, r1
	DcMotor_Rotate(DC_STOP);
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DcMotor_Rotate>
	while(g_timer0_ticks < 12);
 386:	80 91 6c 00 	lds	r24, 0x006C
 38a:	8c 30       	cpi	r24, 0x0C	; 12
 38c:	e0 f3       	brcs	.-8      	; 0x386 <open_door+0x24>

	/*rotate motor for 15 seconds CCW*/
	g_timer0_ticks = 0;
 38e:	10 92 6c 00 	sts	0x006C, r1
	DcMotor_Rotate(DC_A_CW);
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DcMotor_Rotate>
	while(g_timer0_ticks < 60);
 398:	80 91 6c 00 	lds	r24, 0x006C
 39c:	8c 33       	cpi	r24, 0x3C	; 60
 39e:	e0 f3       	brcs	.-8      	; 0x398 <open_door+0x36>

	/*Stop Motor*/
	DcMotor_Rotate(DC_STOP);
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DcMotor_Rotate>
}
 3a6:	cf 91       	pop	r28
 3a8:	df 91       	pop	r29
 3aa:	08 95       	ret

000003ac <DcMotor_Init>:
 *******************************************************************************/
/*
 * Function to initialize one specific motor
 */

void DcMotor_Init(void){
 3ac:	df 93       	push	r29
 3ae:	cf 93       	push	r28
 3b0:	cd b7       	in	r28, 0x3d	; 61
 3b2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_IN1, PIN_OUTPUT);
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	0e 94 3d 02 	call	0x47a	; 0x47a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_IN2, PIN_OUTPUT);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	0e 94 3d 02 	call	0x47a	; 0x47a <GPIO_setupPinDirection>

	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN1, LOGIC_LOW);
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN2, LOGIC_LOW);
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_writePin>
}
 3dc:	cf 91       	pop	r28
 3de:	df 91       	pop	r29
 3e0:	08 95       	ret

000003e2 <DcMotor_Rotate>:


/*
 * Function to rotate DC motor CW or CCW with a given speed
 */
void DcMotor_Rotate(DcMotor_State state){
 3e2:	df 93       	push	r29
 3e4:	cf 93       	push	r28
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <DcMotor_Rotate+0x6>
 3e8:	0f 92       	push	r0
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	3b 83       	std	Y+3, r19	; 0x03
 3f8:	2a 83       	std	Y+2, r18	; 0x02
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	9b 81       	ldd	r25, Y+3	; 0x03
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	91 05       	cpc	r25, r1
 402:	f9 f0       	breq	.+62     	; 0x442 <DcMotor_Rotate+0x60>
 404:	2a 81       	ldd	r18, Y+2	; 0x02
 406:	3b 81       	ldd	r19, Y+3	; 0x03
 408:	22 30       	cpi	r18, 0x02	; 2
 40a:	31 05       	cpc	r19, r1
 40c:	79 f0       	breq	.+30     	; 0x42c <DcMotor_Rotate+0x4a>
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	9b 81       	ldd	r25, Y+3	; 0x03
 412:	00 97       	sbiw	r24, 0x00	; 0
 414:	01 f5       	brne	.+64     	; 0x456 <DcMotor_Rotate+0x74>
	{
	case DC_STOP:
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN1, LOGIC_LOW);
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_writePin>
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN2, LOGIC_LOW);
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_writePin>
 42a:	15 c0       	rjmp	.+42     	; 0x456 <DcMotor_Rotate+0x74>

		break;
	case DC_CW:
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN1, LOGIC_LOW);
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_writePin>
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN2, LOGIC_HIGH);
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_writePin>
 440:	0a c0       	rjmp	.+20     	; 0x456 <DcMotor_Rotate+0x74>

		break;
	case DC_A_CW:
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN1, LOGIC_HIGH);
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_writePin>
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN2, LOGIC_LOW);
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	0e 94 37 03 	call	0x66e	; 0x66e <GPIO_writePin>
		break;
	}
	g_DcMotor_state = state;
 456:	89 81       	ldd	r24, Y+1	; 0x01
 458:	80 93 6d 00 	sts	0x006D, r24

}
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	cf 91       	pop	r28
 464:	df 91       	pop	r29
 466:	08 95       	ret

00000468 <DcMotor_return_motor_state>:
DcMotor_State DcMotor_return_motor_state(void){
 468:	df 93       	push	r29
 46a:	cf 93       	push	r28
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
	return g_DcMotor_state;
 470:	80 91 6d 00 	lds	r24, 0x006D

}
 474:	cf 91       	pop	r28
 476:	df 91       	pop	r29
 478:	08 95       	ret

0000047a <GPIO_setupPinDirection>:

/*
function to setup the dirction on specified pin Input/output
if pin number or port number ar invalid, function will not handle it
*/
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
 47a:	df 93       	push	r29
 47c:	cf 93       	push	r28
 47e:	00 d0       	rcall	.+0      	; 0x480 <GPIO_setupPinDirection+0x6>
 480:	00 d0       	rcall	.+0      	; 0x482 <GPIO_setupPinDirection+0x8>
 482:	0f 92       	push	r0
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	89 83       	std	Y+1, r24	; 0x01
 48a:	6a 83       	std	Y+2, r22	; 0x02
 48c:	4b 83       	std	Y+3, r20	; 0x03
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	85 30       	cpi	r24, 0x05	; 5
 492:	08 f0       	brcs	.+2      	; 0x496 <GPIO_setupPinDirection+0x1c>
 494:	e4 c0       	rjmp	.+456    	; 0x65e <GPIO_setupPinDirection+0x1e4>
 496:	8a 81       	ldd	r24, Y+2	; 0x02
 498:	89 30       	cpi	r24, 0x09	; 9
 49a:	08 f0       	brcs	.+2      	; 0x49e <GPIO_setupPinDirection+0x24>
 49c:	e0 c0       	rjmp	.+448    	; 0x65e <GPIO_setupPinDirection+0x1e4>

    }
    else{
        switch (port_num)
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	28 2f       	mov	r18, r24
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	3d 83       	std	Y+5, r19	; 0x05
 4a6:	2c 83       	std	Y+4, r18	; 0x04
 4a8:	8c 81       	ldd	r24, Y+4	; 0x04
 4aa:	9d 81       	ldd	r25, Y+5	; 0x05
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	91 05       	cpc	r25, r1
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <GPIO_setupPinDirection+0x3a>
 4b2:	47 c0       	rjmp	.+142    	; 0x542 <GPIO_setupPinDirection+0xc8>
 4b4:	2c 81       	ldd	r18, Y+4	; 0x04
 4b6:	3d 81       	ldd	r19, Y+5	; 0x05
 4b8:	22 30       	cpi	r18, 0x02	; 2
 4ba:	31 05       	cpc	r19, r1
 4bc:	2c f4       	brge	.+10     	; 0x4c8 <GPIO_setupPinDirection+0x4e>
 4be:	8c 81       	ldd	r24, Y+4	; 0x04
 4c0:	9d 81       	ldd	r25, Y+5	; 0x05
 4c2:	00 97       	sbiw	r24, 0x00	; 0
 4c4:	71 f0       	breq	.+28     	; 0x4e2 <GPIO_setupPinDirection+0x68>
 4c6:	cb c0       	rjmp	.+406    	; 0x65e <GPIO_setupPinDirection+0x1e4>
 4c8:	2c 81       	ldd	r18, Y+4	; 0x04
 4ca:	3d 81       	ldd	r19, Y+5	; 0x05
 4cc:	22 30       	cpi	r18, 0x02	; 2
 4ce:	31 05       	cpc	r19, r1
 4d0:	09 f4       	brne	.+2      	; 0x4d4 <GPIO_setupPinDirection+0x5a>
 4d2:	67 c0       	rjmp	.+206    	; 0x5a2 <GPIO_setupPinDirection+0x128>
 4d4:	8c 81       	ldd	r24, Y+4	; 0x04
 4d6:	9d 81       	ldd	r25, Y+5	; 0x05
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	91 05       	cpc	r25, r1
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <GPIO_setupPinDirection+0x66>
 4de:	91 c0       	rjmp	.+290    	; 0x602 <GPIO_setupPinDirection+0x188>
 4e0:	be c0       	rjmp	.+380    	; 0x65e <GPIO_setupPinDirection+0x1e4>
        {
        case PORTA_ID:
            if(PIN_OUTPUT == direction){
 4e2:	8b 81       	ldd	r24, Y+3	; 0x03
 4e4:	81 30       	cpi	r24, 0x01	; 1
 4e6:	a1 f4       	brne	.+40     	; 0x510 <GPIO_setupPinDirection+0x96>
                SET_BIT(DDRA, pin_num);
 4e8:	aa e3       	ldi	r26, 0x3A	; 58
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	ea e3       	ldi	r30, 0x3A	; 58
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	48 2f       	mov	r20, r24
 4f4:	8a 81       	ldd	r24, Y+2	; 0x02
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 2e       	mov	r0, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <GPIO_setupPinDirection+0x8c>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	0a 94       	dec	r0
 508:	e2 f7       	brpl	.-8      	; 0x502 <GPIO_setupPinDirection+0x88>
 50a:	84 2b       	or	r24, r20
 50c:	8c 93       	st	X, r24
 50e:	a7 c0       	rjmp	.+334    	; 0x65e <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
 510:	8b 81       	ldd	r24, Y+3	; 0x03
 512:	88 23       	and	r24, r24
 514:	09 f0       	breq	.+2      	; 0x518 <GPIO_setupPinDirection+0x9e>
 516:	a3 c0       	rjmp	.+326    	; 0x65e <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRA, pin_num);
 518:	aa e3       	ldi	r26, 0x3A	; 58
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	ea e3       	ldi	r30, 0x3A	; 58
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	80 81       	ld	r24, Z
 522:	48 2f       	mov	r20, r24
 524:	8a 81       	ldd	r24, Y+2	; 0x02
 526:	28 2f       	mov	r18, r24
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 2e       	mov	r0, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <GPIO_setupPinDirection+0xbc>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <GPIO_setupPinDirection+0xb8>
 53a:	80 95       	com	r24
 53c:	84 23       	and	r24, r20
 53e:	8c 93       	st	X, r24
 540:	8e c0       	rjmp	.+284    	; 0x65e <GPIO_setupPinDirection+0x1e4>

            }
            break;
        case PORTB_ID:
            if(PIN_OUTPUT == direction){
 542:	8b 81       	ldd	r24, Y+3	; 0x03
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	a1 f4       	brne	.+40     	; 0x570 <GPIO_setupPinDirection+0xf6>
                SET_BIT(DDRB, pin_num);
 548:	a7 e3       	ldi	r26, 0x37	; 55
 54a:	b0 e0       	ldi	r27, 0x00	; 0
 54c:	e7 e3       	ldi	r30, 0x37	; 55
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	48 2f       	mov	r20, r24
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	28 2f       	mov	r18, r24
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 2e       	mov	r0, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <GPIO_setupPinDirection+0xec>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	0a 94       	dec	r0
 568:	e2 f7       	brpl	.-8      	; 0x562 <GPIO_setupPinDirection+0xe8>
 56a:	84 2b       	or	r24, r20
 56c:	8c 93       	st	X, r24
 56e:	77 c0       	rjmp	.+238    	; 0x65e <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
 570:	8b 81       	ldd	r24, Y+3	; 0x03
 572:	88 23       	and	r24, r24
 574:	09 f0       	breq	.+2      	; 0x578 <GPIO_setupPinDirection+0xfe>
 576:	73 c0       	rjmp	.+230    	; 0x65e <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRB, pin_num);
 578:	a7 e3       	ldi	r26, 0x37	; 55
 57a:	b0 e0       	ldi	r27, 0x00	; 0
 57c:	e7 e3       	ldi	r30, 0x37	; 55
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	48 2f       	mov	r20, r24
 584:	8a 81       	ldd	r24, Y+2	; 0x02
 586:	28 2f       	mov	r18, r24
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 2e       	mov	r0, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <GPIO_setupPinDirection+0x11c>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	0a 94       	dec	r0
 598:	e2 f7       	brpl	.-8      	; 0x592 <GPIO_setupPinDirection+0x118>
 59a:	80 95       	com	r24
 59c:	84 23       	and	r24, r20
 59e:	8c 93       	st	X, r24
 5a0:	5e c0       	rjmp	.+188    	; 0x65e <GPIO_setupPinDirection+0x1e4>

            }
            break;
        case PORTC_ID:
            if(PIN_OUTPUT == direction){
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	a1 f4       	brne	.+40     	; 0x5d0 <GPIO_setupPinDirection+0x156>
                SET_BIT(DDRC, pin_num);
 5a8:	a4 e3       	ldi	r26, 0x34	; 52
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	e4 e3       	ldi	r30, 0x34	; 52
 5ae:	f0 e0       	ldi	r31, 0x00	; 0
 5b0:	80 81       	ld	r24, Z
 5b2:	48 2f       	mov	r20, r24
 5b4:	8a 81       	ldd	r24, Y+2	; 0x02
 5b6:	28 2f       	mov	r18, r24
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	02 2e       	mov	r0, r18
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <GPIO_setupPinDirection+0x14c>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	0a 94       	dec	r0
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <GPIO_setupPinDirection+0x148>
 5ca:	84 2b       	or	r24, r20
 5cc:	8c 93       	st	X, r24
 5ce:	47 c0       	rjmp	.+142    	; 0x65e <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	88 23       	and	r24, r24
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <GPIO_setupPinDirection+0x15e>
 5d6:	43 c0       	rjmp	.+134    	; 0x65e <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRC, pin_num);
 5d8:	a4 e3       	ldi	r26, 0x34	; 52
 5da:	b0 e0       	ldi	r27, 0x00	; 0
 5dc:	e4 e3       	ldi	r30, 0x34	; 52
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	48 2f       	mov	r20, r24
 5e4:	8a 81       	ldd	r24, Y+2	; 0x02
 5e6:	28 2f       	mov	r18, r24
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 2e       	mov	r0, r18
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <GPIO_setupPinDirection+0x17c>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	0a 94       	dec	r0
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <GPIO_setupPinDirection+0x178>
 5fa:	80 95       	com	r24
 5fc:	84 23       	and	r24, r20
 5fe:	8c 93       	st	X, r24
 600:	2e c0       	rjmp	.+92     	; 0x65e <GPIO_setupPinDirection+0x1e4>


            }
            break;
        case PORTD_ID:
            if(PIN_OUTPUT == direction){
 602:	8b 81       	ldd	r24, Y+3	; 0x03
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	a1 f4       	brne	.+40     	; 0x630 <GPIO_setupPinDirection+0x1b6>
                SET_BIT(DDRD, pin_num);
 608:	a1 e3       	ldi	r26, 0x31	; 49
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	e1 e3       	ldi	r30, 0x31	; 49
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	48 2f       	mov	r20, r24
 614:	8a 81       	ldd	r24, Y+2	; 0x02
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 2e       	mov	r0, r18
 620:	02 c0       	rjmp	.+4      	; 0x626 <GPIO_setupPinDirection+0x1ac>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	0a 94       	dec	r0
 628:	e2 f7       	brpl	.-8      	; 0x622 <GPIO_setupPinDirection+0x1a8>
 62a:	84 2b       	or	r24, r20
 62c:	8c 93       	st	X, r24
 62e:	17 c0       	rjmp	.+46     	; 0x65e <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	88 23       	and	r24, r24
 634:	a1 f4       	brne	.+40     	; 0x65e <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRD, pin_num);
 636:	a1 e3       	ldi	r26, 0x31	; 49
 638:	b0 e0       	ldi	r27, 0x00	; 0
 63a:	e1 e3       	ldi	r30, 0x31	; 49
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	80 81       	ld	r24, Z
 640:	48 2f       	mov	r20, r24
 642:	8a 81       	ldd	r24, Y+2	; 0x02
 644:	28 2f       	mov	r18, r24
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	02 2e       	mov	r0, r18
 64e:	02 c0       	rjmp	.+4      	; 0x654 <GPIO_setupPinDirection+0x1da>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	0a 94       	dec	r0
 656:	e2 f7       	brpl	.-8      	; 0x650 <GPIO_setupPinDirection+0x1d6>
 658:	80 95       	com	r24
 65a:	84 23       	and	r24, r20
 65c:	8c 93       	st	X, r24
            }
            break;

        }
    }
}
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	cf 91       	pop	r28
 66a:	df 91       	pop	r29
 66c:	08 95       	ret

0000066e <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * if pin number or port number ar invalid, function will not handle it
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
 66e:	df 93       	push	r29
 670:	cf 93       	push	r28
 672:	00 d0       	rcall	.+0      	; 0x674 <GPIO_writePin+0x6>
 674:	00 d0       	rcall	.+0      	; 0x676 <GPIO_writePin+0x8>
 676:	0f 92       	push	r0
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
 67c:	89 83       	std	Y+1, r24	; 0x01
 67e:	6a 83       	std	Y+2, r22	; 0x02
 680:	4b 83       	std	Y+3, r20	; 0x03
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){}
 682:	89 81       	ldd	r24, Y+1	; 0x01
 684:	85 30       	cpi	r24, 0x05	; 5
 686:	08 f0       	brcs	.+2      	; 0x68a <GPIO_writePin+0x1c>
 688:	e4 c0       	rjmp	.+456    	; 0x852 <GPIO_writePin+0x1e4>
 68a:	8a 81       	ldd	r24, Y+2	; 0x02
 68c:	89 30       	cpi	r24, 0x09	; 9
 68e:	08 f0       	brcs	.+2      	; 0x692 <GPIO_writePin+0x24>
 690:	e0 c0       	rjmp	.+448    	; 0x852 <GPIO_writePin+0x1e4>
    else{
        switch (port_num)
 692:	89 81       	ldd	r24, Y+1	; 0x01
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	3d 83       	std	Y+5, r19	; 0x05
 69a:	2c 83       	std	Y+4, r18	; 0x04
 69c:	8c 81       	ldd	r24, Y+4	; 0x04
 69e:	9d 81       	ldd	r25, Y+5	; 0x05
 6a0:	81 30       	cpi	r24, 0x01	; 1
 6a2:	91 05       	cpc	r25, r1
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <GPIO_writePin+0x3a>
 6a6:	47 c0       	rjmp	.+142    	; 0x736 <GPIO_writePin+0xc8>
 6a8:	2c 81       	ldd	r18, Y+4	; 0x04
 6aa:	3d 81       	ldd	r19, Y+5	; 0x05
 6ac:	22 30       	cpi	r18, 0x02	; 2
 6ae:	31 05       	cpc	r19, r1
 6b0:	2c f4       	brge	.+10     	; 0x6bc <GPIO_writePin+0x4e>
 6b2:	8c 81       	ldd	r24, Y+4	; 0x04
 6b4:	9d 81       	ldd	r25, Y+5	; 0x05
 6b6:	00 97       	sbiw	r24, 0x00	; 0
 6b8:	71 f0       	breq	.+28     	; 0x6d6 <GPIO_writePin+0x68>
 6ba:	cb c0       	rjmp	.+406    	; 0x852 <GPIO_writePin+0x1e4>
 6bc:	2c 81       	ldd	r18, Y+4	; 0x04
 6be:	3d 81       	ldd	r19, Y+5	; 0x05
 6c0:	22 30       	cpi	r18, 0x02	; 2
 6c2:	31 05       	cpc	r19, r1
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <GPIO_writePin+0x5a>
 6c6:	67 c0       	rjmp	.+206    	; 0x796 <GPIO_writePin+0x128>
 6c8:	8c 81       	ldd	r24, Y+4	; 0x04
 6ca:	9d 81       	ldd	r25, Y+5	; 0x05
 6cc:	83 30       	cpi	r24, 0x03	; 3
 6ce:	91 05       	cpc	r25, r1
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <GPIO_writePin+0x66>
 6d2:	91 c0       	rjmp	.+290    	; 0x7f6 <GPIO_writePin+0x188>
 6d4:	be c0       	rjmp	.+380    	; 0x852 <GPIO_writePin+0x1e4>
        {
        case PORTA_ID:

            if(LOGIC_HIGH == value){
 6d6:	8b 81       	ldd	r24, Y+3	; 0x03
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	a1 f4       	brne	.+40     	; 0x704 <GPIO_writePin+0x96>
                SET_BIT(PORTA, pin_num);
 6dc:	ab e3       	ldi	r26, 0x3B	; 59
 6de:	b0 e0       	ldi	r27, 0x00	; 0
 6e0:	eb e3       	ldi	r30, 0x3B	; 59
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	48 2f       	mov	r20, r24
 6e8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ea:	28 2f       	mov	r18, r24
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	02 2e       	mov	r0, r18
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <GPIO_writePin+0x8c>
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	0a 94       	dec	r0
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <GPIO_writePin+0x88>
 6fe:	84 2b       	or	r24, r20
 700:	8c 93       	st	X, r24
 702:	a7 c0       	rjmp	.+334    	; 0x852 <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
 704:	8b 81       	ldd	r24, Y+3	; 0x03
 706:	88 23       	and	r24, r24
 708:	09 f0       	breq	.+2      	; 0x70c <GPIO_writePin+0x9e>
 70a:	a3 c0       	rjmp	.+326    	; 0x852 <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTA, pin_num);
 70c:	ab e3       	ldi	r26, 0x3B	; 59
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	eb e3       	ldi	r30, 0x3B	; 59
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	80 81       	ld	r24, Z
 716:	48 2f       	mov	r20, r24
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	28 2f       	mov	r18, r24
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	02 2e       	mov	r0, r18
 724:	02 c0       	rjmp	.+4      	; 0x72a <GPIO_writePin+0xbc>
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	0a 94       	dec	r0
 72c:	e2 f7       	brpl	.-8      	; 0x726 <GPIO_writePin+0xb8>
 72e:	80 95       	com	r24
 730:	84 23       	and	r24, r20
 732:	8c 93       	st	X, r24
 734:	8e c0       	rjmp	.+284    	; 0x852 <GPIO_writePin+0x1e4>

            }
            break;
        case PORTB_ID:

            if(LOGIC_HIGH == value){
 736:	8b 81       	ldd	r24, Y+3	; 0x03
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	a1 f4       	brne	.+40     	; 0x764 <GPIO_writePin+0xf6>
                SET_BIT(PORTB, pin_num);
 73c:	a8 e3       	ldi	r26, 0x38	; 56
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	e8 e3       	ldi	r30, 0x38	; 56
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	48 2f       	mov	r20, r24
 748:	8a 81       	ldd	r24, Y+2	; 0x02
 74a:	28 2f       	mov	r18, r24
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	02 2e       	mov	r0, r18
 754:	02 c0       	rjmp	.+4      	; 0x75a <GPIO_writePin+0xec>
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	0a 94       	dec	r0
 75c:	e2 f7       	brpl	.-8      	; 0x756 <GPIO_writePin+0xe8>
 75e:	84 2b       	or	r24, r20
 760:	8c 93       	st	X, r24
 762:	77 c0       	rjmp	.+238    	; 0x852 <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
 764:	8b 81       	ldd	r24, Y+3	; 0x03
 766:	88 23       	and	r24, r24
 768:	09 f0       	breq	.+2      	; 0x76c <GPIO_writePin+0xfe>
 76a:	73 c0       	rjmp	.+230    	; 0x852 <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTB, pin_num);
 76c:	a8 e3       	ldi	r26, 0x38	; 56
 76e:	b0 e0       	ldi	r27, 0x00	; 0
 770:	e8 e3       	ldi	r30, 0x38	; 56
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	48 2f       	mov	r20, r24
 778:	8a 81       	ldd	r24, Y+2	; 0x02
 77a:	28 2f       	mov	r18, r24
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	02 2e       	mov	r0, r18
 784:	02 c0       	rjmp	.+4      	; 0x78a <GPIO_writePin+0x11c>
 786:	88 0f       	add	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	0a 94       	dec	r0
 78c:	e2 f7       	brpl	.-8      	; 0x786 <GPIO_writePin+0x118>
 78e:	80 95       	com	r24
 790:	84 23       	and	r24, r20
 792:	8c 93       	st	X, r24
 794:	5e c0       	rjmp	.+188    	; 0x852 <GPIO_writePin+0x1e4>
            }
            break;
        case PORTC_ID:

            if(LOGIC_HIGH == value){
 796:	8b 81       	ldd	r24, Y+3	; 0x03
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	a1 f4       	brne	.+40     	; 0x7c4 <GPIO_writePin+0x156>
                SET_BIT(PORTC, pin_num);
 79c:	a5 e3       	ldi	r26, 0x35	; 53
 79e:	b0 e0       	ldi	r27, 0x00	; 0
 7a0:	e5 e3       	ldi	r30, 0x35	; 53
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	48 2f       	mov	r20, r24
 7a8:	8a 81       	ldd	r24, Y+2	; 0x02
 7aa:	28 2f       	mov	r18, r24
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 2e       	mov	r0, r18
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <GPIO_writePin+0x14c>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	0a 94       	dec	r0
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <GPIO_writePin+0x148>
 7be:	84 2b       	or	r24, r20
 7c0:	8c 93       	st	X, r24
 7c2:	47 c0       	rjmp	.+142    	; 0x852 <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
 7c4:	8b 81       	ldd	r24, Y+3	; 0x03
 7c6:	88 23       	and	r24, r24
 7c8:	09 f0       	breq	.+2      	; 0x7cc <GPIO_writePin+0x15e>
 7ca:	43 c0       	rjmp	.+134    	; 0x852 <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTC, pin_num);
 7cc:	a5 e3       	ldi	r26, 0x35	; 53
 7ce:	b0 e0       	ldi	r27, 0x00	; 0
 7d0:	e5 e3       	ldi	r30, 0x35	; 53
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 81       	ld	r24, Z
 7d6:	48 2f       	mov	r20, r24
 7d8:	8a 81       	ldd	r24, Y+2	; 0x02
 7da:	28 2f       	mov	r18, r24
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	02 2e       	mov	r0, r18
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <GPIO_writePin+0x17c>
 7e6:	88 0f       	add	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	0a 94       	dec	r0
 7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <GPIO_writePin+0x178>
 7ee:	80 95       	com	r24
 7f0:	84 23       	and	r24, r20
 7f2:	8c 93       	st	X, r24
 7f4:	2e c0       	rjmp	.+92     	; 0x852 <GPIO_writePin+0x1e4>
            }
            break;
        case PORTD_ID:

            if(LOGIC_HIGH == value){
 7f6:	8b 81       	ldd	r24, Y+3	; 0x03
 7f8:	81 30       	cpi	r24, 0x01	; 1
 7fa:	a1 f4       	brne	.+40     	; 0x824 <GPIO_writePin+0x1b6>
                SET_BIT(PORTD, pin_num);
 7fc:	a2 e3       	ldi	r26, 0x32	; 50
 7fe:	b0 e0       	ldi	r27, 0x00	; 0
 800:	e2 e3       	ldi	r30, 0x32	; 50
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	48 2f       	mov	r20, r24
 808:	8a 81       	ldd	r24, Y+2	; 0x02
 80a:	28 2f       	mov	r18, r24
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	02 2e       	mov	r0, r18
 814:	02 c0       	rjmp	.+4      	; 0x81a <GPIO_writePin+0x1ac>
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	0a 94       	dec	r0
 81c:	e2 f7       	brpl	.-8      	; 0x816 <GPIO_writePin+0x1a8>
 81e:	84 2b       	or	r24, r20
 820:	8c 93       	st	X, r24
 822:	17 c0       	rjmp	.+46     	; 0x852 <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
 824:	8b 81       	ldd	r24, Y+3	; 0x03
 826:	88 23       	and	r24, r24
 828:	a1 f4       	brne	.+40     	; 0x852 <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTD, pin_num);
 82a:	a2 e3       	ldi	r26, 0x32	; 50
 82c:	b0 e0       	ldi	r27, 0x00	; 0
 82e:	e2 e3       	ldi	r30, 0x32	; 50
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	48 2f       	mov	r20, r24
 836:	8a 81       	ldd	r24, Y+2	; 0x02
 838:	28 2f       	mov	r18, r24
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 2e       	mov	r0, r18
 842:	02 c0       	rjmp	.+4      	; 0x848 <GPIO_writePin+0x1da>
 844:	88 0f       	add	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	0a 94       	dec	r0
 84a:	e2 f7       	brpl	.-8      	; 0x844 <GPIO_writePin+0x1d6>
 84c:	80 95       	com	r24
 84e:	84 23       	and	r24, r20
 850:	8c 93       	st	X, r24
            }
            break;
        }
    }    
    
}
 852:	0f 90       	pop	r0
 854:	0f 90       	pop	r0
 856:	0f 90       	pop	r0
 858:	0f 90       	pop	r0
 85a:	0f 90       	pop	r0
 85c:	cf 91       	pop	r28
 85e:	df 91       	pop	r29
 860:	08 95       	ret

00000862 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
 862:	df 93       	push	r29
 864:	cf 93       	push	r28
 866:	00 d0       	rcall	.+0      	; 0x868 <GPIO_readPin+0x6>
 868:	00 d0       	rcall	.+0      	; 0x86a <GPIO_readPin+0x8>
 86a:	0f 92       	push	r0
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	89 83       	std	Y+1, r24	; 0x01
 872:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){}
 874:	89 81       	ldd	r24, Y+1	; 0x01
 876:	85 30       	cpi	r24, 0x05	; 5
 878:	08 f0       	brcs	.+2      	; 0x87c <GPIO_readPin+0x1a>
 87a:	85 c0       	rjmp	.+266    	; 0x986 <GPIO_readPin+0x124>
 87c:	8a 81       	ldd	r24, Y+2	; 0x02
 87e:	89 30       	cpi	r24, 0x09	; 9
 880:	08 f0       	brcs	.+2      	; 0x884 <GPIO_readPin+0x22>
 882:	81 c0       	rjmp	.+258    	; 0x986 <GPIO_readPin+0x124>
    else{
        switch (port_num)
 884:	89 81       	ldd	r24, Y+1	; 0x01
 886:	28 2f       	mov	r18, r24
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	3d 83       	std	Y+5, r19	; 0x05
 88c:	2c 83       	std	Y+4, r18	; 0x04
 88e:	4c 81       	ldd	r20, Y+4	; 0x04
 890:	5d 81       	ldd	r21, Y+5	; 0x05
 892:	41 30       	cpi	r20, 0x01	; 1
 894:	51 05       	cpc	r21, r1
 896:	79 f1       	breq	.+94     	; 0x8f6 <GPIO_readPin+0x94>
 898:	8c 81       	ldd	r24, Y+4	; 0x04
 89a:	9d 81       	ldd	r25, Y+5	; 0x05
 89c:	82 30       	cpi	r24, 0x02	; 2
 89e:	91 05       	cpc	r25, r1
 8a0:	34 f4       	brge	.+12     	; 0x8ae <GPIO_readPin+0x4c>
 8a2:	2c 81       	ldd	r18, Y+4	; 0x04
 8a4:	3d 81       	ldd	r19, Y+5	; 0x05
 8a6:	21 15       	cp	r18, r1
 8a8:	31 05       	cpc	r19, r1
 8aa:	69 f0       	breq	.+26     	; 0x8c6 <GPIO_readPin+0x64>
 8ac:	6c c0       	rjmp	.+216    	; 0x986 <GPIO_readPin+0x124>
 8ae:	4c 81       	ldd	r20, Y+4	; 0x04
 8b0:	5d 81       	ldd	r21, Y+5	; 0x05
 8b2:	42 30       	cpi	r20, 0x02	; 2
 8b4:	51 05       	cpc	r21, r1
 8b6:	b9 f1       	breq	.+110    	; 0x926 <GPIO_readPin+0xc4>
 8b8:	8c 81       	ldd	r24, Y+4	; 0x04
 8ba:	9d 81       	ldd	r25, Y+5	; 0x05
 8bc:	83 30       	cpi	r24, 0x03	; 3
 8be:	91 05       	cpc	r25, r1
 8c0:	09 f4       	brne	.+2      	; 0x8c4 <GPIO_readPin+0x62>
 8c2:	49 c0       	rjmp	.+146    	; 0x956 <GPIO_readPin+0xf4>
 8c4:	60 c0       	rjmp	.+192    	; 0x986 <GPIO_readPin+0x124>
        {
        case PORTA_ID:

            if(BIT_IS_SET(PINA, pin_num)){
 8c6:	e9 e3       	ldi	r30, 0x39	; 57
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	28 2f       	mov	r18, r24
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	8a 81       	ldd	r24, Y+2	; 0x02
 8d2:	88 2f       	mov	r24, r24
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	a9 01       	movw	r20, r18
 8d8:	02 c0       	rjmp	.+4      	; 0x8de <GPIO_readPin+0x7c>
 8da:	55 95       	asr	r21
 8dc:	47 95       	ror	r20
 8de:	8a 95       	dec	r24
 8e0:	e2 f7       	brpl	.-8      	; 0x8da <GPIO_readPin+0x78>
 8e2:	ca 01       	movw	r24, r20
 8e4:	81 70       	andi	r24, 0x01	; 1
 8e6:	90 70       	andi	r25, 0x00	; 0
 8e8:	88 23       	and	r24, r24
 8ea:	19 f0       	breq	.+6      	; 0x8f2 <GPIO_readPin+0x90>
                return 1;
 8ec:	51 e0       	ldi	r21, 0x01	; 1
 8ee:	5b 83       	std	Y+3, r21	; 0x03
 8f0:	4b c0       	rjmp	.+150    	; 0x988 <GPIO_readPin+0x126>
            }
            else{
                return 0;
 8f2:	1b 82       	std	Y+3, r1	; 0x03
 8f4:	49 c0       	rjmp	.+146    	; 0x988 <GPIO_readPin+0x126>

            }
            break;
        case PORTB_ID:

            if(BIT_IS_SET(PINB, pin_num)){
 8f6:	e6 e3       	ldi	r30, 0x36	; 54
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	28 2f       	mov	r18, r24
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	8a 81       	ldd	r24, Y+2	; 0x02
 902:	88 2f       	mov	r24, r24
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	a9 01       	movw	r20, r18
 908:	02 c0       	rjmp	.+4      	; 0x90e <GPIO_readPin+0xac>
 90a:	55 95       	asr	r21
 90c:	47 95       	ror	r20
 90e:	8a 95       	dec	r24
 910:	e2 f7       	brpl	.-8      	; 0x90a <GPIO_readPin+0xa8>
 912:	ca 01       	movw	r24, r20
 914:	81 70       	andi	r24, 0x01	; 1
 916:	90 70       	andi	r25, 0x00	; 0
 918:	88 23       	and	r24, r24
 91a:	19 f0       	breq	.+6      	; 0x922 <GPIO_readPin+0xc0>
                return 1;
 91c:	51 e0       	ldi	r21, 0x01	; 1
 91e:	5b 83       	std	Y+3, r21	; 0x03
 920:	33 c0       	rjmp	.+102    	; 0x988 <GPIO_readPin+0x126>
            }
            else{
                return 0;
 922:	1b 82       	std	Y+3, r1	; 0x03
 924:	31 c0       	rjmp	.+98     	; 0x988 <GPIO_readPin+0x126>
            }
            break;
        case PORTC_ID:

            if(BIT_IS_SET(PINC, pin_num)){
 926:	e3 e3       	ldi	r30, 0x33	; 51
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	28 2f       	mov	r18, r24
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	8a 81       	ldd	r24, Y+2	; 0x02
 932:	88 2f       	mov	r24, r24
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	a9 01       	movw	r20, r18
 938:	02 c0       	rjmp	.+4      	; 0x93e <GPIO_readPin+0xdc>
 93a:	55 95       	asr	r21
 93c:	47 95       	ror	r20
 93e:	8a 95       	dec	r24
 940:	e2 f7       	brpl	.-8      	; 0x93a <GPIO_readPin+0xd8>
 942:	ca 01       	movw	r24, r20
 944:	81 70       	andi	r24, 0x01	; 1
 946:	90 70       	andi	r25, 0x00	; 0
 948:	88 23       	and	r24, r24
 94a:	19 f0       	breq	.+6      	; 0x952 <GPIO_readPin+0xf0>
                return 1;
 94c:	51 e0       	ldi	r21, 0x01	; 1
 94e:	5b 83       	std	Y+3, r21	; 0x03
 950:	1b c0       	rjmp	.+54     	; 0x988 <GPIO_readPin+0x126>
            }
            else{
                return 0;
 952:	1b 82       	std	Y+3, r1	; 0x03
 954:	19 c0       	rjmp	.+50     	; 0x988 <GPIO_readPin+0x126>
            }
            break;
        case PORTD_ID:

            if(BIT_IS_SET(PIND, pin_num)){
 956:	e0 e3       	ldi	r30, 0x30	; 48
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	28 2f       	mov	r18, r24
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	8a 81       	ldd	r24, Y+2	; 0x02
 962:	88 2f       	mov	r24, r24
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	a9 01       	movw	r20, r18
 968:	02 c0       	rjmp	.+4      	; 0x96e <GPIO_readPin+0x10c>
 96a:	55 95       	asr	r21
 96c:	47 95       	ror	r20
 96e:	8a 95       	dec	r24
 970:	e2 f7       	brpl	.-8      	; 0x96a <GPIO_readPin+0x108>
 972:	ca 01       	movw	r24, r20
 974:	81 70       	andi	r24, 0x01	; 1
 976:	90 70       	andi	r25, 0x00	; 0
 978:	88 23       	and	r24, r24
 97a:	19 f0       	breq	.+6      	; 0x982 <GPIO_readPin+0x120>
                return 1;
 97c:	51 e0       	ldi	r21, 0x01	; 1
 97e:	5b 83       	std	Y+3, r21	; 0x03
 980:	03 c0       	rjmp	.+6      	; 0x988 <GPIO_readPin+0x126>
            }
            else{
                return 0;
 982:	1b 82       	std	Y+3, r1	; 0x03
 984:	01 c0       	rjmp	.+2      	; 0x988 <GPIO_readPin+0x126>
            }
            break;
        }
    }
    return '\0';
 986:	1b 82       	std	Y+3, r1	; 0x03
 988:	8b 81       	ldd	r24, Y+3	; 0x03
}
 98a:	0f 90       	pop	r0
 98c:	0f 90       	pop	r0
 98e:	0f 90       	pop	r0
 990:	0f 90       	pop	r0
 992:	0f 90       	pop	r0
 994:	cf 91       	pop	r28
 996:	df 91       	pop	r29
 998:	08 95       	ret

0000099a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * PORT_INPUT = 0x00, PORT_OUTPUT = 0xFF
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
 99a:	df 93       	push	r29
 99c:	cf 93       	push	r28
 99e:	00 d0       	rcall	.+0      	; 0x9a0 <GPIO_setupPortDirection+0x6>
 9a0:	00 d0       	rcall	.+0      	; 0x9a2 <GPIO_setupPortDirection+0x8>
 9a2:	cd b7       	in	r28, 0x3d	; 61
 9a4:	de b7       	in	r29, 0x3e	; 62
 9a6:	89 83       	std	Y+1, r24	; 0x01
 9a8:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS){}
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	85 30       	cpi	r24, 0x05	; 5
 9ae:	90 f5       	brcc	.+100    	; 0xa14 <GPIO_setupPortDirection+0x7a>
    else{
        switch (port_num)
 9b0:	89 81       	ldd	r24, Y+1	; 0x01
 9b2:	28 2f       	mov	r18, r24
 9b4:	30 e0       	ldi	r19, 0x00	; 0
 9b6:	3c 83       	std	Y+4, r19	; 0x04
 9b8:	2b 83       	std	Y+3, r18	; 0x03
 9ba:	8b 81       	ldd	r24, Y+3	; 0x03
 9bc:	9c 81       	ldd	r25, Y+4	; 0x04
 9be:	81 30       	cpi	r24, 0x01	; 1
 9c0:	91 05       	cpc	r25, r1
 9c2:	d1 f0       	breq	.+52     	; 0x9f8 <GPIO_setupPortDirection+0x5e>
 9c4:	2b 81       	ldd	r18, Y+3	; 0x03
 9c6:	3c 81       	ldd	r19, Y+4	; 0x04
 9c8:	22 30       	cpi	r18, 0x02	; 2
 9ca:	31 05       	cpc	r19, r1
 9cc:	2c f4       	brge	.+10     	; 0x9d8 <GPIO_setupPortDirection+0x3e>
 9ce:	8b 81       	ldd	r24, Y+3	; 0x03
 9d0:	9c 81       	ldd	r25, Y+4	; 0x04
 9d2:	00 97       	sbiw	r24, 0x00	; 0
 9d4:	61 f0       	breq	.+24     	; 0x9ee <GPIO_setupPortDirection+0x54>
 9d6:	1e c0       	rjmp	.+60     	; 0xa14 <GPIO_setupPortDirection+0x7a>
 9d8:	2b 81       	ldd	r18, Y+3	; 0x03
 9da:	3c 81       	ldd	r19, Y+4	; 0x04
 9dc:	22 30       	cpi	r18, 0x02	; 2
 9de:	31 05       	cpc	r19, r1
 9e0:	81 f0       	breq	.+32     	; 0xa02 <GPIO_setupPortDirection+0x68>
 9e2:	8b 81       	ldd	r24, Y+3	; 0x03
 9e4:	9c 81       	ldd	r25, Y+4	; 0x04
 9e6:	83 30       	cpi	r24, 0x03	; 3
 9e8:	91 05       	cpc	r25, r1
 9ea:	81 f0       	breq	.+32     	; 0xa0c <GPIO_setupPortDirection+0x72>
 9ec:	13 c0       	rjmp	.+38     	; 0xa14 <GPIO_setupPortDirection+0x7a>
        {
        case PORTA_ID:
            DDRA = direction;
 9ee:	ea e3       	ldi	r30, 0x3A	; 58
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	8a 81       	ldd	r24, Y+2	; 0x02
 9f4:	80 83       	st	Z, r24
 9f6:	0e c0       	rjmp	.+28     	; 0xa14 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTB_ID:
            DDRB = direction;
 9f8:	e7 e3       	ldi	r30, 0x37	; 55
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	8a 81       	ldd	r24, Y+2	; 0x02
 9fe:	80 83       	st	Z, r24
 a00:	09 c0       	rjmp	.+18     	; 0xa14 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTC_ID:
            DDRC = direction;
 a02:	e4 e3       	ldi	r30, 0x34	; 52
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	8a 81       	ldd	r24, Y+2	; 0x02
 a08:	80 83       	st	Z, r24
 a0a:	04 c0       	rjmp	.+8      	; 0xa14 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTD_ID:
            DDRD = direction;
 a0c:	e1 e3       	ldi	r30, 0x31	; 49
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	8a 81       	ldd	r24, Y+2	; 0x02
 a12:	80 83       	st	Z, r24
            break;
        }
    }
}
 a14:	0f 90       	pop	r0
 a16:	0f 90       	pop	r0
 a18:	0f 90       	pop	r0
 a1a:	0f 90       	pop	r0
 a1c:	cf 91       	pop	r28
 a1e:	df 91       	pop	r29
 a20:	08 95       	ret

00000a22 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value){
 a22:	df 93       	push	r29
 a24:	cf 93       	push	r28
 a26:	00 d0       	rcall	.+0      	; 0xa28 <GPIO_writePort+0x6>
 a28:	00 d0       	rcall	.+0      	; 0xa2a <GPIO_writePort+0x8>
 a2a:	cd b7       	in	r28, 0x3d	; 61
 a2c:	de b7       	in	r29, 0x3e	; 62
 a2e:	89 83       	std	Y+1, r24	; 0x01
 a30:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS){}
 a32:	89 81       	ldd	r24, Y+1	; 0x01
 a34:	85 30       	cpi	r24, 0x05	; 5
 a36:	90 f5       	brcc	.+100    	; 0xa9c <GPIO_writePort+0x7a>
    else{
        switch (port_num)
 a38:	89 81       	ldd	r24, Y+1	; 0x01
 a3a:	28 2f       	mov	r18, r24
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	3c 83       	std	Y+4, r19	; 0x04
 a40:	2b 83       	std	Y+3, r18	; 0x03
 a42:	8b 81       	ldd	r24, Y+3	; 0x03
 a44:	9c 81       	ldd	r25, Y+4	; 0x04
 a46:	81 30       	cpi	r24, 0x01	; 1
 a48:	91 05       	cpc	r25, r1
 a4a:	d1 f0       	breq	.+52     	; 0xa80 <GPIO_writePort+0x5e>
 a4c:	2b 81       	ldd	r18, Y+3	; 0x03
 a4e:	3c 81       	ldd	r19, Y+4	; 0x04
 a50:	22 30       	cpi	r18, 0x02	; 2
 a52:	31 05       	cpc	r19, r1
 a54:	2c f4       	brge	.+10     	; 0xa60 <GPIO_writePort+0x3e>
 a56:	8b 81       	ldd	r24, Y+3	; 0x03
 a58:	9c 81       	ldd	r25, Y+4	; 0x04
 a5a:	00 97       	sbiw	r24, 0x00	; 0
 a5c:	61 f0       	breq	.+24     	; 0xa76 <GPIO_writePort+0x54>
 a5e:	1e c0       	rjmp	.+60     	; 0xa9c <GPIO_writePort+0x7a>
 a60:	2b 81       	ldd	r18, Y+3	; 0x03
 a62:	3c 81       	ldd	r19, Y+4	; 0x04
 a64:	22 30       	cpi	r18, 0x02	; 2
 a66:	31 05       	cpc	r19, r1
 a68:	81 f0       	breq	.+32     	; 0xa8a <GPIO_writePort+0x68>
 a6a:	8b 81       	ldd	r24, Y+3	; 0x03
 a6c:	9c 81       	ldd	r25, Y+4	; 0x04
 a6e:	83 30       	cpi	r24, 0x03	; 3
 a70:	91 05       	cpc	r25, r1
 a72:	81 f0       	breq	.+32     	; 0xa94 <GPIO_writePort+0x72>
 a74:	13 c0       	rjmp	.+38     	; 0xa9c <GPIO_writePort+0x7a>
        {
        case PORTA_ID:
            PORTA = value;
 a76:	eb e3       	ldi	r30, 0x3B	; 59
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	8a 81       	ldd	r24, Y+2	; 0x02
 a7c:	80 83       	st	Z, r24
 a7e:	0e c0       	rjmp	.+28     	; 0xa9c <GPIO_writePort+0x7a>
            break;
        case PORTB_ID:
            PORTB = value;
 a80:	e8 e3       	ldi	r30, 0x38	; 56
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	8a 81       	ldd	r24, Y+2	; 0x02
 a86:	80 83       	st	Z, r24
 a88:	09 c0       	rjmp	.+18     	; 0xa9c <GPIO_writePort+0x7a>
            break;
        case PORTC_ID:
            PORTC = value;
 a8a:	e5 e3       	ldi	r30, 0x35	; 53
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	8a 81       	ldd	r24, Y+2	; 0x02
 a90:	80 83       	st	Z, r24
 a92:	04 c0       	rjmp	.+8      	; 0xa9c <GPIO_writePort+0x7a>
            break;
        case PORTD_ID:
            PORTD = value;
 a94:	e2 e3       	ldi	r30, 0x32	; 50
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	8a 81       	ldd	r24, Y+2	; 0x02
 a9a:	80 83       	st	Z, r24
            break;
        }
    }

}
 a9c:	0f 90       	pop	r0
 a9e:	0f 90       	pop	r0
 aa0:	0f 90       	pop	r0
 aa2:	0f 90       	pop	r0
 aa4:	cf 91       	pop	r28
 aa6:	df 91       	pop	r29
 aa8:	08 95       	ret

00000aaa <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
 aaa:	df 93       	push	r29
 aac:	cf 93       	push	r28
 aae:	00 d0       	rcall	.+0      	; 0xab0 <GPIO_readPort+0x6>
 ab0:	00 d0       	rcall	.+0      	; 0xab2 <GPIO_readPort+0x8>
 ab2:	cd b7       	in	r28, 0x3d	; 61
 ab4:	de b7       	in	r29, 0x3e	; 62
 ab6:	89 83       	std	Y+1, r24	; 0x01
    if(port_num>NUM_OF_PORTS){
 ab8:	89 81       	ldd	r24, Y+1	; 0x01
 aba:	85 30       	cpi	r24, 0x05	; 5
 abc:	98 f5       	brcc	.+102    	; 0xb24 <GPIO_readPort+0x7a>
    }
    else{
        switch (port_num)
 abe:	89 81       	ldd	r24, Y+1	; 0x01
 ac0:	28 2f       	mov	r18, r24
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	3c 83       	std	Y+4, r19	; 0x04
 ac6:	2b 83       	std	Y+3, r18	; 0x03
 ac8:	8b 81       	ldd	r24, Y+3	; 0x03
 aca:	9c 81       	ldd	r25, Y+4	; 0x04
 acc:	81 30       	cpi	r24, 0x01	; 1
 ace:	91 05       	cpc	r25, r1
 ad0:	d1 f0       	breq	.+52     	; 0xb06 <GPIO_readPort+0x5c>
 ad2:	2b 81       	ldd	r18, Y+3	; 0x03
 ad4:	3c 81       	ldd	r19, Y+4	; 0x04
 ad6:	22 30       	cpi	r18, 0x02	; 2
 ad8:	31 05       	cpc	r19, r1
 ada:	2c f4       	brge	.+10     	; 0xae6 <GPIO_readPort+0x3c>
 adc:	8b 81       	ldd	r24, Y+3	; 0x03
 ade:	9c 81       	ldd	r25, Y+4	; 0x04
 ae0:	00 97       	sbiw	r24, 0x00	; 0
 ae2:	61 f0       	breq	.+24     	; 0xafc <GPIO_readPort+0x52>
 ae4:	1f c0       	rjmp	.+62     	; 0xb24 <GPIO_readPort+0x7a>
 ae6:	2b 81       	ldd	r18, Y+3	; 0x03
 ae8:	3c 81       	ldd	r19, Y+4	; 0x04
 aea:	22 30       	cpi	r18, 0x02	; 2
 aec:	31 05       	cpc	r19, r1
 aee:	81 f0       	breq	.+32     	; 0xb10 <GPIO_readPort+0x66>
 af0:	8b 81       	ldd	r24, Y+3	; 0x03
 af2:	9c 81       	ldd	r25, Y+4	; 0x04
 af4:	83 30       	cpi	r24, 0x03	; 3
 af6:	91 05       	cpc	r25, r1
 af8:	81 f0       	breq	.+32     	; 0xb1a <GPIO_readPort+0x70>
 afa:	14 c0       	rjmp	.+40     	; 0xb24 <GPIO_readPort+0x7a>
        {
        case PORTA_ID:
            return PINA;
 afc:	e9 e3       	ldi	r30, 0x39	; 57
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	90 81       	ld	r25, Z
 b02:	9a 83       	std	Y+2, r25	; 0x02
 b04:	10 c0       	rjmp	.+32     	; 0xb26 <GPIO_readPort+0x7c>
            break;
        case PORTB_ID:
            return PINB;
 b06:	e6 e3       	ldi	r30, 0x36	; 54
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	20 81       	ld	r18, Z
 b0c:	2a 83       	std	Y+2, r18	; 0x02
 b0e:	0b c0       	rjmp	.+22     	; 0xb26 <GPIO_readPort+0x7c>
            break;
        case PORTC_ID:
            return PINC;
 b10:	e3 e3       	ldi	r30, 0x33	; 51
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	30 81       	ld	r19, Z
 b16:	3a 83       	std	Y+2, r19	; 0x02
 b18:	06 c0       	rjmp	.+12     	; 0xb26 <GPIO_readPort+0x7c>
            break;
        case PORTD_ID:
            return PIND;
 b1a:	e0 e3       	ldi	r30, 0x30	; 48
 b1c:	f0 e0       	ldi	r31, 0x00	; 0
 b1e:	80 81       	ld	r24, Z
 b20:	8a 83       	std	Y+2, r24	; 0x02
 b22:	01 c0       	rjmp	.+2      	; 0xb26 <GPIO_readPort+0x7c>
            break;
        }
    }
    return '\0';
 b24:	1a 82       	std	Y+2, r1	; 0x02
 b26:	8a 81       	ldd	r24, Y+2	; 0x02
}
 b28:	0f 90       	pop	r0
 b2a:	0f 90       	pop	r0
 b2c:	0f 90       	pop	r0
 b2e:	0f 90       	pop	r0
 b30:	cf 91       	pop	r28
 b32:	df 91       	pop	r29
 b34:	08 95       	ret

00000b36 <__vector_9>:
static volatile void (*g_timer2CallBackPtr)(void) = NULL_PTR;

/*******************************************************************************
 *                      Interrupt handler                                      *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
 b36:	1f 92       	push	r1
 b38:	0f 92       	push	r0
 b3a:	0f b6       	in	r0, 0x3f	; 63
 b3c:	0f 92       	push	r0
 b3e:	11 24       	eor	r1, r1
 b40:	2f 93       	push	r18
 b42:	3f 93       	push	r19
 b44:	4f 93       	push	r20
 b46:	5f 93       	push	r21
 b48:	6f 93       	push	r22
 b4a:	7f 93       	push	r23
 b4c:	8f 93       	push	r24
 b4e:	9f 93       	push	r25
 b50:	af 93       	push	r26
 b52:	bf 93       	push	r27
 b54:	ef 93       	push	r30
 b56:	ff 93       	push	r31
 b58:	df 93       	push	r29
 b5a:	cf 93       	push	r28
 b5c:	cd b7       	in	r28, 0x3d	; 61
 b5e:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
 b60:	80 91 6e 00 	lds	r24, 0x006E
 b64:	90 91 6f 00 	lds	r25, 0x006F
 b68:	00 97       	sbiw	r24, 0x00	; 0
 b6a:	29 f0       	breq	.+10     	; 0xb76 <__vector_9+0x40>
		(*g_timer0CallBackPtr)();
 b6c:	e0 91 6e 00 	lds	r30, 0x006E
 b70:	f0 91 6f 00 	lds	r31, 0x006F
 b74:	09 95       	icall
	}
}
 b76:	cf 91       	pop	r28
 b78:	df 91       	pop	r29
 b7a:	ff 91       	pop	r31
 b7c:	ef 91       	pop	r30
 b7e:	bf 91       	pop	r27
 b80:	af 91       	pop	r26
 b82:	9f 91       	pop	r25
 b84:	8f 91       	pop	r24
 b86:	7f 91       	pop	r23
 b88:	6f 91       	pop	r22
 b8a:	5f 91       	pop	r21
 b8c:	4f 91       	pop	r20
 b8e:	3f 91       	pop	r19
 b90:	2f 91       	pop	r18
 b92:	0f 90       	pop	r0
 b94:	0f be       	out	0x3f, r0	; 63
 b96:	0f 90       	pop	r0
 b98:	1f 90       	pop	r1
 b9a:	18 95       	reti

00000b9c <__vector_19>:
ISR(TIMER0_COMP_vect){
 b9c:	1f 92       	push	r1
 b9e:	0f 92       	push	r0
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	0f 92       	push	r0
 ba4:	11 24       	eor	r1, r1
 ba6:	2f 93       	push	r18
 ba8:	3f 93       	push	r19
 baa:	4f 93       	push	r20
 bac:	5f 93       	push	r21
 bae:	6f 93       	push	r22
 bb0:	7f 93       	push	r23
 bb2:	8f 93       	push	r24
 bb4:	9f 93       	push	r25
 bb6:	af 93       	push	r26
 bb8:	bf 93       	push	r27
 bba:	ef 93       	push	r30
 bbc:	ff 93       	push	r31
 bbe:	df 93       	push	r29
 bc0:	cf 93       	push	r28
 bc2:	cd b7       	in	r28, 0x3d	; 61
 bc4:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
 bc6:	80 91 6e 00 	lds	r24, 0x006E
 bca:	90 91 6f 00 	lds	r25, 0x006F
 bce:	00 97       	sbiw	r24, 0x00	; 0
 bd0:	29 f0       	breq	.+10     	; 0xbdc <__vector_19+0x40>
		(*g_timer0CallBackPtr)();
 bd2:	e0 91 6e 00 	lds	r30, 0x006E
 bd6:	f0 91 6f 00 	lds	r31, 0x006F
 bda:	09 95       	icall
	}
}
 bdc:	cf 91       	pop	r28
 bde:	df 91       	pop	r29
 be0:	ff 91       	pop	r31
 be2:	ef 91       	pop	r30
 be4:	bf 91       	pop	r27
 be6:	af 91       	pop	r26
 be8:	9f 91       	pop	r25
 bea:	8f 91       	pop	r24
 bec:	7f 91       	pop	r23
 bee:	6f 91       	pop	r22
 bf0:	5f 91       	pop	r21
 bf2:	4f 91       	pop	r20
 bf4:	3f 91       	pop	r19
 bf6:	2f 91       	pop	r18
 bf8:	0f 90       	pop	r0
 bfa:	0f be       	out	0x3f, r0	; 63
 bfc:	0f 90       	pop	r0
 bfe:	1f 90       	pop	r1
 c00:	18 95       	reti

00000c02 <TIMERS_init>:
 * 	4. Set timer compare value
 * 	Function Input: timer_no => select between timers0,1,2
 * 					Timer configType => setup timer configuration by passing a structure's address
 * 	Note that Timer/Counter1 and Timer/Counter0 share the same prescaler
 */
void TIMERS_init(const TIMERS_ConfigType * Timer_Config_Ptr, TIMERS_Select timer_no){
 c02:	df 93       	push	r29
 c04:	cf 93       	push	r28
 c06:	00 d0       	rcall	.+0      	; 0xc08 <TIMERS_init+0x6>
 c08:	00 d0       	rcall	.+0      	; 0xc0a <TIMERS_init+0x8>
 c0a:	0f 92       	push	r0
 c0c:	cd b7       	in	r28, 0x3d	; 61
 c0e:	de b7       	in	r29, 0x3e	; 62
 c10:	9a 83       	std	Y+2, r25	; 0x02
 c12:	89 83       	std	Y+1, r24	; 0x01
 c14:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_no)
 c16:	8b 81       	ldd	r24, Y+3	; 0x03
 c18:	88 2f       	mov	r24, r24
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	00 97       	sbiw	r24, 0x00	; 0
 c1e:	09 f0       	breq	.+2      	; 0xc22 <TIMERS_init+0x20>
 c20:	45 c0       	rjmp	.+138    	; 0xcac <TIMERS_init+0xaa>
		 * BIT3,6 WGM01:0 => CTC mode => 1,0
		 * Bit 5:4 – COM01:0 => 0,0 non_PWM
		 * Bit 2:0 – CS02:0: Clock Select "prescalers"
		 */
		/*set timer0 to run on the required clock select*/
		TCCR0 = (0x07 & Timer_Config_Ptr->clock);
 c22:	a3 e5       	ldi	r26, 0x53	; 83
 c24:	b0 e0       	ldi	r27, 0x00	; 0
 c26:	e9 81       	ldd	r30, Y+1	; 0x01
 c28:	fa 81       	ldd	r31, Y+2	; 0x02
 c2a:	80 81       	ld	r24, Z
 c2c:	87 70       	andi	r24, 0x07	; 7
 c2e:	8c 93       	st	X, r24
		/*set timer0 initial value*/
		TCNT0 = Timer_Config_Ptr->timer_init_value;
 c30:	a2 e5       	ldi	r26, 0x52	; 82
 c32:	b0 e0       	ldi	r27, 0x00	; 0
 c34:	e9 81       	ldd	r30, Y+1	; 0x01
 c36:	fa 81       	ldd	r31, Y+2	; 0x02
 c38:	82 81       	ldd	r24, Z+2	; 0x02
 c3a:	93 81       	ldd	r25, Z+3	; 0x03
 c3c:	8c 93       	st	X, r24
		switch(Timer_Config_Ptr->mode)
 c3e:	e9 81       	ldd	r30, Y+1	; 0x01
 c40:	fa 81       	ldd	r31, Y+2	; 0x02
 c42:	81 81       	ldd	r24, Z+1	; 0x01
 c44:	28 2f       	mov	r18, r24
 c46:	30 e0       	ldi	r19, 0x00	; 0
 c48:	3d 83       	std	Y+5, r19	; 0x05
 c4a:	2c 83       	std	Y+4, r18	; 0x04
 c4c:	8c 81       	ldd	r24, Y+4	; 0x04
 c4e:	9d 81       	ldd	r25, Y+5	; 0x05
 c50:	00 97       	sbiw	r24, 0x00	; 0
 c52:	31 f0       	breq	.+12     	; 0xc60 <TIMERS_init+0x5e>
 c54:	2c 81       	ldd	r18, Y+4	; 0x04
 c56:	3d 81       	ldd	r19, Y+5	; 0x05
 c58:	21 30       	cpi	r18, 0x01	; 1
 c5a:	31 05       	cpc	r19, r1
 c5c:	89 f0       	breq	.+34     	; 0xc80 <TIMERS_init+0x7e>
 c5e:	26 c0       	rjmp	.+76     	; 0xcac <TIMERS_init+0xaa>
		{
		case OVERFLOW_MODE:
			/*set pin7 FOC0*/
			TCCR0 |= (1<<FOC0);
 c60:	a3 e5       	ldi	r26, 0x53	; 83
 c62:	b0 e0       	ldi	r27, 0x00	; 0
 c64:	e3 e5       	ldi	r30, 0x53	; 83
 c66:	f0 e0       	ldi	r31, 0x00	; 0
 c68:	80 81       	ld	r24, Z
 c6a:	80 68       	ori	r24, 0x80	; 128
 c6c:	8c 93       	st	X, r24
//			TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
			/*enable timer overflow interrupt and disable CTC interrupt*/
			TIMSK = (TIMSK & 0xFC) | (1<<TOIE0);
 c6e:	a9 e5       	ldi	r26, 0x59	; 89
 c70:	b0 e0       	ldi	r27, 0x00	; 0
 c72:	e9 e5       	ldi	r30, 0x59	; 89
 c74:	f0 e0       	ldi	r31, 0x00	; 0
 c76:	80 81       	ld	r24, Z
 c78:	8c 7f       	andi	r24, 0xFC	; 252
 c7a:	81 60       	ori	r24, 0x01	; 1
 c7c:	8c 93       	st	X, r24
 c7e:	16 c0       	rjmp	.+44     	; 0xcac <TIMERS_init+0xaa>
			break;
		case CTC_MODE:
			/*assign a compare match value to Output Compare Register – OCR0*/
			OCR0 = Timer_Config_Ptr->timer_Compare_value;
 c80:	ac e5       	ldi	r26, 0x5C	; 92
 c82:	b0 e0       	ldi	r27, 0x00	; 0
 c84:	e9 81       	ldd	r30, Y+1	; 0x01
 c86:	fa 81       	ldd	r31, Y+2	; 0x02
 c88:	84 81       	ldd	r24, Z+4	; 0x04
 c8a:	95 81       	ldd	r25, Z+5	; 0x05
 c8c:	8c 93       	st	X, r24
			/*set timer0 to operate on CTC mode*/
			TCCR0 |= (1<<FOC0) | (1<<WGM01);
 c8e:	a3 e5       	ldi	r26, 0x53	; 83
 c90:	b0 e0       	ldi	r27, 0x00	; 0
 c92:	e3 e5       	ldi	r30, 0x53	; 83
 c94:	f0 e0       	ldi	r31, 0x00	; 0
 c96:	80 81       	ld	r24, Z
 c98:	88 68       	ori	r24, 0x88	; 136
 c9a:	8c 93       	st	X, r24
			/*disable overflow interrupt and enable CTC interrupt*/
			TIMSK = (TIMSK & 0xFC) | (1<<OCIE0);
 c9c:	a9 e5       	ldi	r26, 0x59	; 89
 c9e:	b0 e0       	ldi	r27, 0x00	; 0
 ca0:	e9 e5       	ldi	r30, 0x59	; 89
 ca2:	f0 e0       	ldi	r31, 0x00	; 0
 ca4:	80 81       	ld	r24, Z
 ca6:	8c 7f       	andi	r24, 0xFC	; 252
 ca8:	82 60       	ori	r24, 0x02	; 2
 caa:	8c 93       	st	X, r24
	case TIMER1_ID:
		break;
	case TIMER2_ID:
		break;
	}
}
 cac:	0f 90       	pop	r0
 cae:	0f 90       	pop	r0
 cb0:	0f 90       	pop	r0
 cb2:	0f 90       	pop	r0
 cb4:	0f 90       	pop	r0
 cb6:	cf 91       	pop	r28
 cb8:	df 91       	pop	r29
 cba:	08 95       	ret

00000cbc <TIMERS_setCallBack>:

/*
 * Description: Function to set the Call Back function address for each timer.
 */
void TIMERS_setCallBack(void(*a_ptr)(void), TIMERS_Select timer_no){
 cbc:	df 93       	push	r29
 cbe:	cf 93       	push	r28
 cc0:	00 d0       	rcall	.+0      	; 0xcc2 <TIMERS_setCallBack+0x6>
 cc2:	0f 92       	push	r0
 cc4:	cd b7       	in	r28, 0x3d	; 61
 cc6:	de b7       	in	r29, 0x3e	; 62
 cc8:	9a 83       	std	Y+2, r25	; 0x02
 cca:	89 83       	std	Y+1, r24	; 0x01
 ccc:	6b 83       	std	Y+3, r22	; 0x03
	if (timer_no == TIMER0_ID)
 cce:	8b 81       	ldd	r24, Y+3	; 0x03
 cd0:	88 23       	and	r24, r24
 cd2:	39 f4       	brne	.+14     	; 0xce2 <TIMERS_setCallBack+0x26>
		g_timer0CallBackPtr = a_ptr;
 cd4:	89 81       	ldd	r24, Y+1	; 0x01
 cd6:	9a 81       	ldd	r25, Y+2	; 0x02
 cd8:	90 93 6f 00 	sts	0x006F, r25
 cdc:	80 93 6e 00 	sts	0x006E, r24
 ce0:	13 c0       	rjmp	.+38     	; 0xd08 <TIMERS_setCallBack+0x4c>
	else if(timer_no == TIMER1_ID)
 ce2:	8b 81       	ldd	r24, Y+3	; 0x03
 ce4:	81 30       	cpi	r24, 0x01	; 1
 ce6:	39 f4       	brne	.+14     	; 0xcf6 <TIMERS_setCallBack+0x3a>
		g_timer1CallBackPtr = a_ptr;
 ce8:	89 81       	ldd	r24, Y+1	; 0x01
 cea:	9a 81       	ldd	r25, Y+2	; 0x02
 cec:	90 93 71 00 	sts	0x0071, r25
 cf0:	80 93 70 00 	sts	0x0070, r24
 cf4:	09 c0       	rjmp	.+18     	; 0xd08 <TIMERS_setCallBack+0x4c>
	else if(timer_no == TIMER2_ID)
 cf6:	8b 81       	ldd	r24, Y+3	; 0x03
 cf8:	82 30       	cpi	r24, 0x02	; 2
 cfa:	31 f4       	brne	.+12     	; 0xd08 <TIMERS_setCallBack+0x4c>
		g_timer2CallBackPtr = a_ptr;
 cfc:	89 81       	ldd	r24, Y+1	; 0x01
 cfe:	9a 81       	ldd	r25, Y+2	; 0x02
 d00:	90 93 73 00 	sts	0x0073, r25
 d04:	80 93 72 00 	sts	0x0072, r24
}
 d08:	0f 90       	pop	r0
 d0a:	0f 90       	pop	r0
 d0c:	0f 90       	pop	r0
 d0e:	cf 91       	pop	r28
 d10:	df 91       	pop	r29
 d12:	08 95       	ret

00000d14 <clearTimerValue>:

/*
 * Description: Function to clear a timer Value to start count from ZERO
 */
void clearTimerValue(TIMERS_Select timer_no){
 d14:	df 93       	push	r29
 d16:	cf 93       	push	r28
 d18:	0f 92       	push	r0
 d1a:	cd b7       	in	r28, 0x3d	; 61
 d1c:	de b7       	in	r29, 0x3e	; 62
 d1e:	89 83       	std	Y+1, r24	; 0x01
	if (timer_no == TIMER0_ID)
 d20:	89 81       	ldd	r24, Y+1	; 0x01
 d22:	88 23       	and	r24, r24
 d24:	21 f4       	brne	.+8      	; 0xd2e <clearTimerValue+0x1a>
		TCNT0 = 0;
 d26:	e2 e5       	ldi	r30, 0x52	; 82
 d28:	f0 e0       	ldi	r31, 0x00	; 0
 d2a:	10 82       	st	Z, r1
 d2c:	0e c0       	rjmp	.+28     	; 0xd4a <clearTimerValue+0x36>
	else if(timer_no == TIMER1_ID)
 d2e:	89 81       	ldd	r24, Y+1	; 0x01
 d30:	81 30       	cpi	r24, 0x01	; 1
 d32:	29 f4       	brne	.+10     	; 0xd3e <clearTimerValue+0x2a>
		TCNT1 = 0;
 d34:	ec e4       	ldi	r30, 0x4C	; 76
 d36:	f0 e0       	ldi	r31, 0x00	; 0
 d38:	11 82       	std	Z+1, r1	; 0x01
 d3a:	10 82       	st	Z, r1
 d3c:	06 c0       	rjmp	.+12     	; 0xd4a <clearTimerValue+0x36>
	else if(timer_no == TIMER2_ID)
 d3e:	89 81       	ldd	r24, Y+1	; 0x01
 d40:	82 30       	cpi	r24, 0x02	; 2
 d42:	19 f4       	brne	.+6      	; 0xd4a <clearTimerValue+0x36>
		TCNT2 = 0;
 d44:	e4 e4       	ldi	r30, 0x44	; 68
 d46:	f0 e0       	ldi	r31, 0x00	; 0
 d48:	10 82       	st	Z, r1

}
 d4a:	0f 90       	pop	r0
 d4c:	cf 91       	pop	r28
 d4e:	df 91       	pop	r29
 d50:	08 95       	ret

00000d52 <TIMERS_DeInit>:

/*
 * Description: Function to disable a timer
 */
void TIMERS_DeInit(TIMERS_Select timer_no){
 d52:	df 93       	push	r29
 d54:	cf 93       	push	r28
 d56:	0f 92       	push	r0
 d58:	cd b7       	in	r28, 0x3d	; 61
 d5a:	de b7       	in	r29, 0x3e	; 62
 d5c:	89 83       	std	Y+1, r24	; 0x01
	if (timer_no == TIMER0_ID){
 d5e:	89 81       	ldd	r24, Y+1	; 0x01
 d60:	88 23       	and	r24, r24
 d62:	59 f4       	brne	.+22     	; 0xd7a <TIMERS_DeInit+0x28>
		TCCR0 = 0;
 d64:	e3 e5       	ldi	r30, 0x53	; 83
 d66:	f0 e0       	ldi	r31, 0x00	; 0
 d68:	10 82       	st	Z, r1
		TIMSK &= 0xFC;
 d6a:	a9 e5       	ldi	r26, 0x59	; 89
 d6c:	b0 e0       	ldi	r27, 0x00	; 0
 d6e:	e9 e5       	ldi	r30, 0x59	; 89
 d70:	f0 e0       	ldi	r31, 0x00	; 0
 d72:	80 81       	ld	r24, Z
 d74:	8c 7f       	andi	r24, 0xFC	; 252
 d76:	8c 93       	st	X, r24
 d78:	1e c0       	rjmp	.+60     	; 0xdb6 <TIMERS_DeInit+0x64>
	}
	else if(timer_no == TIMER1_ID){
 d7a:	89 81       	ldd	r24, Y+1	; 0x01
 d7c:	81 30       	cpi	r24, 0x01	; 1
 d7e:	71 f4       	brne	.+28     	; 0xd9c <TIMERS_DeInit+0x4a>
		TCCR1A = 0;
 d80:	ef e4       	ldi	r30, 0x4F	; 79
 d82:	f0 e0       	ldi	r31, 0x00	; 0
 d84:	10 82       	st	Z, r1
		TCCR1B = 0;
 d86:	ee e4       	ldi	r30, 0x4E	; 78
 d88:	f0 e0       	ldi	r31, 0x00	; 0
 d8a:	10 82       	st	Z, r1
		TIMSK &= 0xC3;
 d8c:	a9 e5       	ldi	r26, 0x59	; 89
 d8e:	b0 e0       	ldi	r27, 0x00	; 0
 d90:	e9 e5       	ldi	r30, 0x59	; 89
 d92:	f0 e0       	ldi	r31, 0x00	; 0
 d94:	80 81       	ld	r24, Z
 d96:	83 7c       	andi	r24, 0xC3	; 195
 d98:	8c 93       	st	X, r24
 d9a:	0d c0       	rjmp	.+26     	; 0xdb6 <TIMERS_DeInit+0x64>
	}
	else if(timer_no == TIMER2_ID)
 d9c:	89 81       	ldd	r24, Y+1	; 0x01
 d9e:	82 30       	cpi	r24, 0x02	; 2
 da0:	51 f4       	brne	.+20     	; 0xdb6 <TIMERS_DeInit+0x64>
	{
		TCCR2 = 0;
 da2:	e5 e4       	ldi	r30, 0x45	; 69
 da4:	f0 e0       	ldi	r31, 0x00	; 0
 da6:	10 82       	st	Z, r1
		TIMSK &= 0x3F;
 da8:	a9 e5       	ldi	r26, 0x59	; 89
 daa:	b0 e0       	ldi	r27, 0x00	; 0
 dac:	e9 e5       	ldi	r30, 0x59	; 89
 dae:	f0 e0       	ldi	r31, 0x00	; 0
 db0:	80 81       	ld	r24, Z
 db2:	8f 73       	andi	r24, 0x3F	; 63
 db4:	8c 93       	st	X, r24
	}

}
 db6:	0f 90       	pop	r0
 db8:	cf 91       	pop	r28
 dba:	df 91       	pop	r29
 dbc:	08 95       	ret

00000dbe <setTimerValue>:


/*
 * Description: Function to set initial value for TIMER/COUNTER Register
 */
void setTimerValue(TIMERS_Select timer_no, uint16 a_value){
 dbe:	df 93       	push	r29
 dc0:	cf 93       	push	r28
 dc2:	00 d0       	rcall	.+0      	; 0xdc4 <setTimerValue+0x6>
 dc4:	0f 92       	push	r0
 dc6:	cd b7       	in	r28, 0x3d	; 61
 dc8:	de b7       	in	r29, 0x3e	; 62
 dca:	89 83       	std	Y+1, r24	; 0x01
 dcc:	7b 83       	std	Y+3, r23	; 0x03
 dce:	6a 83       	std	Y+2, r22	; 0x02
	if (timer_no == TIMER0_ID)
 dd0:	89 81       	ldd	r24, Y+1	; 0x01
 dd2:	88 23       	and	r24, r24
 dd4:	29 f4       	brne	.+10     	; 0xde0 <setTimerValue+0x22>
		TCNT0 = a_value;
 dd6:	e2 e5       	ldi	r30, 0x52	; 82
 dd8:	f0 e0       	ldi	r31, 0x00	; 0
 dda:	8a 81       	ldd	r24, Y+2	; 0x02
 ddc:	80 83       	st	Z, r24
 dde:	11 c0       	rjmp	.+34     	; 0xe02 <setTimerValue+0x44>
	else if(timer_no == TIMER1_ID)
 de0:	89 81       	ldd	r24, Y+1	; 0x01
 de2:	81 30       	cpi	r24, 0x01	; 1
 de4:	39 f4       	brne	.+14     	; 0xdf4 <setTimerValue+0x36>
		TCNT1 = a_value;
 de6:	ec e4       	ldi	r30, 0x4C	; 76
 de8:	f0 e0       	ldi	r31, 0x00	; 0
 dea:	8a 81       	ldd	r24, Y+2	; 0x02
 dec:	9b 81       	ldd	r25, Y+3	; 0x03
 dee:	91 83       	std	Z+1, r25	; 0x01
 df0:	80 83       	st	Z, r24
 df2:	07 c0       	rjmp	.+14     	; 0xe02 <setTimerValue+0x44>
	else if(timer_no == TIMER2_ID)
 df4:	89 81       	ldd	r24, Y+1	; 0x01
 df6:	82 30       	cpi	r24, 0x02	; 2
 df8:	21 f4       	brne	.+8      	; 0xe02 <setTimerValue+0x44>
		TCNT2 = a_value;
 dfa:	e4 e4       	ldi	r30, 0x44	; 68
 dfc:	f0 e0       	ldi	r31, 0x00	; 0
 dfe:	8a 81       	ldd	r24, Y+2	; 0x02
 e00:	80 83       	st	Z, r24
}
 e02:	0f 90       	pop	r0
 e04:	0f 90       	pop	r0
 e06:	0f 90       	pop	r0
 e08:	cf 91       	pop	r28
 e0a:	df 91       	pop	r29
 e0c:	08 95       	ret

00000e0e <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate){
 e0e:	df 93       	push	r29
 e10:	cf 93       	push	r28
 e12:	00 d0       	rcall	.+0      	; 0xe14 <UART_init+0x6>
 e14:	00 d0       	rcall	.+0      	; 0xe16 <UART_init+0x8>
 e16:	00 d0       	rcall	.+0      	; 0xe18 <UART_init+0xa>
 e18:	cd b7       	in	r28, 0x3d	; 61
 e1a:	de b7       	in	r29, 0x3e	; 62
 e1c:	6b 83       	std	Y+3, r22	; 0x03
 e1e:	7c 83       	std	Y+4, r23	; 0x04
 e20:	8d 83       	std	Y+5, r24	; 0x05
 e22:	9e 83       	std	Y+6, r25	; 0x06
	uint16 a_ubrrValue = 0; /*to select the baud rate*/
 e24:	1a 82       	std	Y+2, r1	; 0x02
 e26:	19 82       	std	Y+1, r1	; 0x01
	 * 7    6   5   4   3  2   1   0
	 * RXC TXC UDRE FE DOR PE U2X MPCM
	 * most of those bits are flags
	 **********************************************************************/
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
 e28:	eb e2       	ldi	r30, 0x2B	; 43
 e2a:	f0 e0       	ldi	r31, 0x00	; 0
 e2c:	82 e0       	ldi	r24, 0x02	; 2
 e2e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
 e30:	ea e2       	ldi	r30, 0x2A	; 42
 e32:	f0 e0       	ldi	r31, 0x00	; 0
 e34:	88 e1       	ldi	r24, 0x18	; 24
 e36:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ1) |(1<<UCSZ0);
 e38:	e0 e4       	ldi	r30, 0x40	; 64
 e3a:	f0 e0       	ldi	r31, 0x00	; 0
 e3c:	86 e8       	ldi	r24, 0x86	; 134
 e3e:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	a_ubrrValue = F_CPU/16/baud_rate-1;
 e40:	84 e2       	ldi	r24, 0x24	; 36
 e42:	94 ef       	ldi	r25, 0xF4	; 244
 e44:	a0 e0       	ldi	r26, 0x00	; 0
 e46:	b0 e0       	ldi	r27, 0x00	; 0
 e48:	2b 81       	ldd	r18, Y+3	; 0x03
 e4a:	3c 81       	ldd	r19, Y+4	; 0x04
 e4c:	4d 81       	ldd	r20, Y+5	; 0x05
 e4e:	5e 81       	ldd	r21, Y+6	; 0x06
 e50:	bc 01       	movw	r22, r24
 e52:	cd 01       	movw	r24, r26
 e54:	0e 94 83 07 	call	0xf06	; 0xf06 <__udivmodsi4>
 e58:	da 01       	movw	r26, r20
 e5a:	c9 01       	movw	r24, r18
 e5c:	01 97       	sbiw	r24, 0x01	; 1
 e5e:	9a 83       	std	Y+2, r25	; 0x02
 e60:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (unsigned char)(a_ubrrValue>>8);
 e62:	e0 e4       	ldi	r30, 0x40	; 64
 e64:	f0 e0       	ldi	r31, 0x00	; 0
 e66:	89 81       	ldd	r24, Y+1	; 0x01
 e68:	9a 81       	ldd	r25, Y+2	; 0x02
 e6a:	89 2f       	mov	r24, r25
 e6c:	99 27       	eor	r25, r25
 e6e:	80 83       	st	Z, r24
	UBRRL = (unsigned char)a_ubrrValue;
 e70:	e9 e2       	ldi	r30, 0x29	; 41
 e72:	f0 e0       	ldi	r31, 0x00	; 0
 e74:	89 81       	ldd	r24, Y+1	; 0x01
 e76:	80 83       	st	Z, r24

}
 e78:	26 96       	adiw	r28, 0x06	; 6
 e7a:	0f b6       	in	r0, 0x3f	; 63
 e7c:	f8 94       	cli
 e7e:	de bf       	out	0x3e, r29	; 62
 e80:	0f be       	out	0x3f, r0	; 63
 e82:	cd bf       	out	0x3d, r28	; 61
 e84:	cf 91       	pop	r28
 e86:	df 91       	pop	r29
 e88:	08 95       	ret

00000e8a <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
 e8a:	df 93       	push	r29
 e8c:	cf 93       	push	r28
 e8e:	0f 92       	push	r0
 e90:	cd b7       	in	r28, 0x3d	; 61
 e92:	de b7       	in	r29, 0x3e	; 62
 e94:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(BIT_IS_CLEAR(UCSRA, UDRE));
 e96:	eb e2       	ldi	r30, 0x2B	; 43
 e98:	f0 e0       	ldi	r31, 0x00	; 0
 e9a:	80 81       	ld	r24, Z
 e9c:	88 2f       	mov	r24, r24
 e9e:	90 e0       	ldi	r25, 0x00	; 0
 ea0:	80 72       	andi	r24, 0x20	; 32
 ea2:	90 70       	andi	r25, 0x00	; 0
 ea4:	00 97       	sbiw	r24, 0x00	; 0
 ea6:	b9 f3       	breq	.-18     	; 0xe96 <UART_sendByte+0xc>
	/*another method found in ATMEGA16 data sheet example*/
	/*	while ( !( UCSRA & (1<<UDRE)) ); */
	/* Put data into buffer, sends the data */
	UDR = data;
 ea8:	ec e2       	ldi	r30, 0x2C	; 44
 eaa:	f0 e0       	ldi	r31, 0x00	; 0
 eac:	89 81       	ldd	r24, Y+1	; 0x01
 eae:	80 83       	st	Z, r24
}
 eb0:	0f 90       	pop	r0
 eb2:	cf 91       	pop	r28
 eb4:	df 91       	pop	r29
 eb6:	08 95       	ret

00000eb8 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void){
 eb8:	df 93       	push	r29
 eba:	cf 93       	push	r28
 ebc:	cd b7       	in	r28, 0x3d	; 61
 ebe:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	/*busy loop*/
	while ( !(UCSRA & (1<<RXC)) )
 ec0:	eb e2       	ldi	r30, 0x2B	; 43
 ec2:	f0 e0       	ldi	r31, 0x00	; 0
 ec4:	80 81       	ld	r24, Z
 ec6:	88 23       	and	r24, r24
 ec8:	dc f7       	brge	.-10     	; 0xec0 <UART_recieveByte+0x8>
		;
	/* Get and return received data from buffer */
	return UDR;
 eca:	ec e2       	ldi	r30, 0x2C	; 44
 ecc:	f0 e0       	ldi	r31, 0x00	; 0
 ece:	80 81       	ld	r24, Z

}
 ed0:	cf 91       	pop	r28
 ed2:	df 91       	pop	r29
 ed4:	08 95       	ret

00000ed6 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
 ed6:	df 93       	push	r29
 ed8:	cf 93       	push	r28
 eda:	00 d0       	rcall	.+0      	; 0xedc <UART_sendString+0x6>
 edc:	cd b7       	in	r28, 0x3d	; 61
 ede:	de b7       	in	r29, 0x3e	; 62
 ee0:	9a 83       	std	Y+2, r25	; 0x02
 ee2:	89 83       	std	Y+1, r24	; 0x01

}
 ee4:	0f 90       	pop	r0
 ee6:	0f 90       	pop	r0
 ee8:	cf 91       	pop	r28
 eea:	df 91       	pop	r29
 eec:	08 95       	ret

00000eee <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str){
 eee:	df 93       	push	r29
 ef0:	cf 93       	push	r28
 ef2:	00 d0       	rcall	.+0      	; 0xef4 <UART_receiveString+0x6>
 ef4:	cd b7       	in	r28, 0x3d	; 61
 ef6:	de b7       	in	r29, 0x3e	; 62
 ef8:	9a 83       	std	Y+2, r25	; 0x02
 efa:	89 83       	std	Y+1, r24	; 0x01
	/*Receive until # */
}
 efc:	0f 90       	pop	r0
 efe:	0f 90       	pop	r0
 f00:	cf 91       	pop	r28
 f02:	df 91       	pop	r29
 f04:	08 95       	ret

00000f06 <__udivmodsi4>:
 f06:	a1 e2       	ldi	r26, 0x21	; 33
 f08:	1a 2e       	mov	r1, r26
 f0a:	aa 1b       	sub	r26, r26
 f0c:	bb 1b       	sub	r27, r27
 f0e:	fd 01       	movw	r30, r26
 f10:	0d c0       	rjmp	.+26     	; 0xf2c <__udivmodsi4_ep>

00000f12 <__udivmodsi4_loop>:
 f12:	aa 1f       	adc	r26, r26
 f14:	bb 1f       	adc	r27, r27
 f16:	ee 1f       	adc	r30, r30
 f18:	ff 1f       	adc	r31, r31
 f1a:	a2 17       	cp	r26, r18
 f1c:	b3 07       	cpc	r27, r19
 f1e:	e4 07       	cpc	r30, r20
 f20:	f5 07       	cpc	r31, r21
 f22:	20 f0       	brcs	.+8      	; 0xf2c <__udivmodsi4_ep>
 f24:	a2 1b       	sub	r26, r18
 f26:	b3 0b       	sbc	r27, r19
 f28:	e4 0b       	sbc	r30, r20
 f2a:	f5 0b       	sbc	r31, r21

00000f2c <__udivmodsi4_ep>:
 f2c:	66 1f       	adc	r22, r22
 f2e:	77 1f       	adc	r23, r23
 f30:	88 1f       	adc	r24, r24
 f32:	99 1f       	adc	r25, r25
 f34:	1a 94       	dec	r1
 f36:	69 f7       	brne	.-38     	; 0xf12 <__udivmodsi4_loop>
 f38:	60 95       	com	r22
 f3a:	70 95       	com	r23
 f3c:	80 95       	com	r24
 f3e:	90 95       	com	r25
 f40:	9b 01       	movw	r18, r22
 f42:	ac 01       	movw	r20, r24
 f44:	bd 01       	movw	r22, r26
 f46:	cf 01       	movw	r24, r30
 f48:	08 95       	ret

00000f4a <_exit>:
 f4a:	f8 94       	cli

00000f4c <__stop_program>:
 f4c:	ff cf       	rjmp	.-2      	; 0xf4c <__stop_program>
