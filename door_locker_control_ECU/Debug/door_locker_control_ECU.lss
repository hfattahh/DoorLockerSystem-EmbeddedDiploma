
door_locker_control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001eb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001eb2  00001f46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006e  0080006e  00001f54  2**0
                  ALLOC
  3 .stab         00002010  00000000  00000000  00001f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ea  00000000  00000000  00003f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000504e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000518e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000052fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000979b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 cc 0c 	jmp	0x1998	; 0x1998 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*******************************************************************************
 *                      Global Variables                                       *
 *******************************************************************************/
uint8 g_timer0_ticks = 0;

int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	aa 97       	sbiw	r28, 0x2a	; 42
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	 * receivedByte      	-> variable to hold byte that received from master throw UART
	 * passwordSettingState	-> uint8 variable to store if password is setting before or not
	 * index				-> index used as for loop counter
	 *
	 */
	uint8 password[PASSCODE_SIZE] = {'\0'};
     b5a:	86 e0       	ldi	r24, 0x06	; 6
     b5c:	fe 01       	movw	r30, r28
     b5e:	72 96       	adiw	r30, 0x12	; 18
     b60:	df 01       	movw	r26, r30
     b62:	28 2f       	mov	r18, r24
     b64:	1d 92       	st	X+, r1
     b66:	2a 95       	dec	r18
     b68:	e9 f7       	brne	.-6      	; 0xb64 <main+0x1e>
	uint8 confirmPassword[PASSCODE_SIZE] = {'\0'};
     b6a:	86 e0       	ldi	r24, 0x06	; 6
     b6c:	fe 01       	movw	r30, r28
     b6e:	78 96       	adiw	r30, 0x18	; 24
     b70:	df 01       	movw	r26, r30
     b72:	28 2f       	mov	r18, r24
     b74:	1d 92       	st	X+, r1
     b76:	2a 95       	dec	r18
     b78:	e9 f7       	brne	.-6      	; 0xb74 <main+0x2e>
	uint8 receivedByte = DUMMY_CHAR;
     b7a:	84 e4       	ldi	r24, 0x44	; 68
     b7c:	89 8b       	std	Y+17, r24	; 0x11
	uint8 passwordSettingState;
	uint8 index;

	/*initialize UART with baud rate 9600*/
	UART_init(9600);
     b7e:	60 e8       	ldi	r22, 0x80	; 128
     b80:	75 e2       	ldi	r23, 0x25	; 37
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <UART_init>

	/*enable i-bit*/
	SREG |= (1<<7);
     b8a:	af e5       	ldi	r26, 0x5F	; 95
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	ef e5       	ldi	r30, 0x5F	; 95
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	80 68       	ori	r24, 0x80	; 128
     b96:	8c 93       	st	X, r24
	/*Configuration structure for timer0 CTC mode*/
	TIMERS_ConfigType timer0_overflow_config = {F_CPU_1024, OVERFLOW_MODE, 5, NO_COMP_VALUE};
     b98:	ce 01       	movw	r24, r28
     b9a:	4e 96       	adiw	r24, 0x1e	; 30
     b9c:	9f a3       	std	Y+39, r25	; 0x27
     b9e:	8e a3       	std	Y+38, r24	; 0x26
     ba0:	a8 e6       	ldi	r26, 0x68	; 104
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	b9 a7       	std	Y+41, r27	; 0x29
     ba6:	a8 a7       	std	Y+40, r26	; 0x28
     ba8:	b6 e0       	ldi	r27, 0x06	; 6
     baa:	ba a7       	std	Y+42, r27	; 0x2a
     bac:	e8 a5       	ldd	r30, Y+40	; 0x28
     bae:	f9 a5       	ldd	r31, Y+41	; 0x29
     bb0:	00 80       	ld	r0, Z
     bb2:	28 a5       	ldd	r18, Y+40	; 0x28
     bb4:	39 a5       	ldd	r19, Y+41	; 0x29
     bb6:	2f 5f       	subi	r18, 0xFF	; 255
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	39 a7       	std	Y+41, r19	; 0x29
     bbc:	28 a7       	std	Y+40, r18	; 0x28
     bbe:	ae a1       	ldd	r26, Y+38	; 0x26
     bc0:	bf a1       	ldd	r27, Y+39	; 0x27
     bc2:	0c 92       	st	X, r0
     bc4:	ee a1       	ldd	r30, Y+38	; 0x26
     bc6:	ff a1       	ldd	r31, Y+39	; 0x27
     bc8:	31 96       	adiw	r30, 0x01	; 1
     bca:	ff a3       	std	Y+39, r31	; 0x27
     bcc:	ee a3       	std	Y+38, r30	; 0x26
     bce:	fa a5       	ldd	r31, Y+42	; 0x2a
     bd0:	f1 50       	subi	r31, 0x01	; 1
     bd2:	fa a7       	std	Y+42, r31	; 0x2a
     bd4:	2a a5       	ldd	r18, Y+42	; 0x2a
     bd6:	22 23       	and	r18, r18
     bd8:	49 f7       	brne	.-46     	; 0xbac <main+0x66>
	/*initialize timer */
	TIMERS_init(&timer0_overflow_config, TIMER0_ID);
     bda:	ce 01       	movw	r24, r28
     bdc:	4e 96       	adiw	r24, 0x1e	; 30
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <TIMERS_init>
	/*set call back function for timer0*/
	TIMERS_setCallBack(timer0_handler, TIMER0_ID);
     be4:	86 e0       	ldi	r24, 0x06	; 6
     be6:	98 e0       	ldi	r25, 0x08	; 8
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <TIMERS_setCallBack>

	/* Initialize the TWI/I2C Driver */
	TWI_init();
     bee:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <TWI_init>



	/*initialize DC motor */
	DcMotor_Init();
     bf2:	0e 94 3c 08 	call	0x1078	; 0x1078 <DcMotor_Init>


	while(1)
	{
		/*receive byte from HMI ECU*/
		receivedByte = UART_recieveByte();
     bf6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <UART_recieveByte>
     bfa:	89 8b       	std	Y+17, r24	; 0x11

		/*switch case on received byte*/
		switch(receivedByte)
     bfc:	89 89       	ldd	r24, Y+17	; 0x11
     bfe:	a8 2f       	mov	r26, r24
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	bd a3       	std	Y+37, r27	; 0x25
     c04:	ac a3       	std	Y+36, r26	; 0x24
     c06:	ec a1       	ldd	r30, Y+36	; 0x24
     c08:	fd a1       	ldd	r31, Y+37	; 0x25
     c0a:	ed 34       	cpi	r30, 0x4D	; 77
     c0c:	f1 05       	cpc	r31, r1
     c0e:	09 f4       	brne	.+2      	; 0xc12 <main+0xcc>
     c10:	ee c0       	rjmp	.+476    	; 0xdee <main+0x2a8>
     c12:	2c a1       	ldd	r18, Y+36	; 0x24
     c14:	3d a1       	ldd	r19, Y+37	; 0x25
     c16:	2e 34       	cpi	r18, 0x4E	; 78
     c18:	31 05       	cpc	r19, r1
     c1a:	64 f4       	brge	.+24     	; 0xc34 <main+0xee>
     c1c:	8c a1       	ldd	r24, Y+36	; 0x24
     c1e:	9d a1       	ldd	r25, Y+37	; 0x25
     c20:	8b 32       	cpi	r24, 0x2B	; 43
     c22:	91 05       	cpc	r25, r1
     c24:	09 f4       	brne	.+2      	; 0xc28 <main+0xe2>
     c26:	f1 c0       	rjmp	.+482    	; 0xe0a <main+0x2c4>
     c28:	ac a1       	ldd	r26, Y+36	; 0x24
     c2a:	bd a1       	ldd	r27, Y+37	; 0x25
     c2c:	ad 32       	cpi	r26, 0x2D	; 45
     c2e:	b1 05       	cpc	r27, r1
     c30:	c9 f0       	breq	.+50     	; 0xc64 <main+0x11e>
     c32:	ed c0       	rjmp	.+474    	; 0xe0e <main+0x2c8>
     c34:	ec a1       	ldd	r30, Y+36	; 0x24
     c36:	fd a1       	ldd	r31, Y+37	; 0x25
     c38:	e3 35       	cpi	r30, 0x53	; 83
     c3a:	f1 05       	cpc	r31, r1
     c3c:	09 f0       	breq	.+2      	; 0xc40 <main+0xfa>
     c3e:	e7 c0       	rjmp	.+462    	; 0xe0e <main+0x2c8>
		{
		case CHECK_PASSWORD_SETTING:
			/*call check password setting function*/
			passwordSettingState = check_password_setting_status();
     c40:	0e 94 0a 07 	call	0xe14	; 0xe14 <check_password_setting_status>
     c44:	88 8b       	std	Y+16, r24	; 0x10
			/*if password setting state = 1 > send(set)
			 * else if = 0 > send(not set)
			 */
			if(passwordSettingState){
     c46:	88 89       	ldd	r24, Y+16	; 0x10
     c48:	88 23       	and	r24, r24
     c4a:	21 f0       	breq	.+8      	; 0xc54 <main+0x10e>
				UART_sendByte(PASSWORD_SET);
     c4c:	89 e5       	ldi	r24, 0x59	; 89
     c4e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <UART_sendByte>
     c52:	dd c0       	rjmp	.+442    	; 0xe0e <main+0x2c8>
			}
			else if (!passwordSettingState){
     c54:	88 89       	ldd	r24, Y+16	; 0x10
     c56:	88 23       	and	r24, r24
     c58:	09 f0       	breq	.+2      	; 0xc5c <main+0x116>
     c5a:	d9 c0       	rjmp	.+434    	; 0xe0e <main+0x2c8>
				UART_sendByte(PASSWORD_NOT_SET);
     c5c:	8e e4       	ldi	r24, 0x4E	; 78
     c5e:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <UART_sendByte>
     c62:	d5 c0       	rjmp	.+426    	; 0xe0e <main+0x2c8>
			}
			break;
		case SET_PASSWORD:
			/*receive two passwords form HMI*/
			UART_sendByte(EUC2_READY);
     c64:	80 e4       	ldi	r24, 0x40	; 64
     c66:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <UART_sendByte>
			receive_password_from_HMI(password);
     c6a:	ce 01       	movw	r24, r28
     c6c:	42 96       	adiw	r24, 0x12	; 18
     c6e:	0e 94 1c 07 	call	0xe38	; 0xe38 <receive_password_from_HMI>
			UART_sendByte(EUC2_READY);
     c72:	80 e4       	ldi	r24, 0x40	; 64
     c74:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <UART_sendByte>
			receive_password_from_HMI(confirmPassword);
     c78:	ce 01       	movw	r24, r28
     c7a:	48 96       	adiw	r24, 0x18	; 24
     c7c:	0e 94 1c 07 	call	0xe38	; 0xe38 <receive_password_from_HMI>
			for(index = 0; index < PASSCODE_SIZE ; index++)
     c80:	1f 86       	std	Y+15, r1	; 0x0f
     c82:	1b c0       	rjmp	.+54     	; 0xcba <main+0x174>
			{
				if(password[index] != confirmPassword[index]){
     c84:	8f 85       	ldd	r24, Y+15	; 0x0f
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	ce 01       	movw	r24, r28
     c8c:	42 96       	adiw	r24, 0x12	; 18
     c8e:	fc 01       	movw	r30, r24
     c90:	e2 0f       	add	r30, r18
     c92:	f3 1f       	adc	r31, r19
     c94:	40 81       	ld	r20, Z
     c96:	8f 85       	ldd	r24, Y+15	; 0x0f
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	ce 01       	movw	r24, r28
     c9e:	48 96       	adiw	r24, 0x18	; 24
     ca0:	fc 01       	movw	r30, r24
     ca2:	e2 0f       	add	r30, r18
     ca4:	f3 1f       	adc	r31, r19
     ca6:	80 81       	ld	r24, Z
     ca8:	48 17       	cp	r20, r24
     caa:	21 f0       	breq	.+8      	; 0xcb4 <main+0x16e>
					UART_sendByte(PASSWORD_NOT_IDENTICAL);
     cac:	88 e2       	ldi	r24, 0x28	; 40
     cae:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <UART_sendByte>
     cb2:	06 c0       	rjmp	.+12     	; 0xcc0 <main+0x17a>
			/*receive two passwords form HMI*/
			UART_sendByte(EUC2_READY);
			receive_password_from_HMI(password);
			UART_sendByte(EUC2_READY);
			receive_password_from_HMI(confirmPassword);
			for(index = 0; index < PASSCODE_SIZE ; index++)
     cb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
     cb8:	8f 87       	std	Y+15, r24	; 0x0f
     cba:	8f 85       	ldd	r24, Y+15	; 0x0f
     cbc:	86 30       	cpi	r24, 0x06	; 6
     cbe:	10 f3       	brcs	.-60     	; 0xc84 <main+0x13e>
				if(password[index] != confirmPassword[index]){
					UART_sendByte(PASSWORD_NOT_IDENTICAL);
					break;
				}
			}
			UART_sendByte(PASSWORD_IDENTICAL);
     cc0:	89 e2       	ldi	r24, 0x29	; 41
     cc2:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <UART_sendByte>
			/*****store password to external EEPROM*****/
			/*store password in eeprom*/
			for(index = 0; index < PASSCODE_SIZE ; index++){
     cc6:	1f 86       	std	Y+15, r1	; 0x0f
     cc8:	88 c0       	rjmp	.+272    	; 0xdda <main+0x294>
				/* Write password in the external EEPROM */
				EEPROM_writeByte(PASSWORD_START_ADDRESS+index, password[index]);
     cca:	8f 85       	ldd	r24, Y+15	; 0x0f
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	8e 5e       	subi	r24, 0xEE	; 238
     cd2:	9c 4f       	sbci	r25, 0xFC	; 252
     cd4:	ac 01       	movw	r20, r24
     cd6:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	ce 01       	movw	r24, r28
     cde:	42 96       	adiw	r24, 0x12	; 18
     ce0:	fc 01       	movw	r30, r24
     ce2:	e2 0f       	add	r30, r18
     ce4:	f3 1f       	adc	r31, r19
     ce6:	20 81       	ld	r18, Z
     ce8:	ca 01       	movw	r24, r20
     cea:	62 2f       	mov	r22, r18
     cec:	0e 94 a3 08 	call	0x1146	; 0x1146 <EEPROM_writeByte>
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	a0 e2       	ldi	r26, 0x20	; 32
     cf6:	b1 e4       	ldi	r27, 0x41	; 65
     cf8:	8b 87       	std	Y+11, r24	; 0x0b
     cfa:	9c 87       	std	Y+12, r25	; 0x0c
     cfc:	ad 87       	std	Y+13, r26	; 0x0d
     cfe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d00:	6b 85       	ldd	r22, Y+11	; 0x0b
     d02:	7c 85       	ldd	r23, Y+12	; 0x0c
     d04:	8d 85       	ldd	r24, Y+13	; 0x0d
     d06:	9e 85       	ldd	r25, Y+14	; 0x0e
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	4a e7       	ldi	r20, 0x7A	; 122
     d0e:	53 e4       	ldi	r21, 0x43	; 67
     d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	8f 83       	std	Y+7, r24	; 0x07
     d1a:	98 87       	std	Y+8, r25	; 0x08
     d1c:	a9 87       	std	Y+9, r26	; 0x09
     d1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d20:	6f 81       	ldd	r22, Y+7	; 0x07
     d22:	78 85       	ldd	r23, Y+8	; 0x08
     d24:	89 85       	ldd	r24, Y+9	; 0x09
     d26:	9a 85       	ldd	r25, Y+10	; 0x0a
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	40 e8       	ldi	r20, 0x80	; 128
     d2e:	5f e3       	ldi	r21, 0x3F	; 63
     d30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d34:	88 23       	and	r24, r24
     d36:	2c f4       	brge	.+10     	; 0xd42 <main+0x1fc>
		__ticks = 1;
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	9e 83       	std	Y+6, r25	; 0x06
     d3e:	8d 83       	std	Y+5, r24	; 0x05
     d40:	3f c0       	rjmp	.+126    	; 0xdc0 <main+0x27a>
	else if (__tmp > 65535)
     d42:	6f 81       	ldd	r22, Y+7	; 0x07
     d44:	78 85       	ldd	r23, Y+8	; 0x08
     d46:	89 85       	ldd	r24, Y+9	; 0x09
     d48:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	3f ef       	ldi	r19, 0xFF	; 255
     d4e:	4f e7       	ldi	r20, 0x7F	; 127
     d50:	57 e4       	ldi	r21, 0x47	; 71
     d52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d56:	18 16       	cp	r1, r24
     d58:	4c f5       	brge	.+82     	; 0xdac <main+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d60:	9e 85       	ldd	r25, Y+14	; 0x0e
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 e2       	ldi	r20, 0x20	; 32
     d68:	51 e4       	ldi	r21, 0x41	; 65
     d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	bc 01       	movw	r22, r24
     d74:	cd 01       	movw	r24, r26
     d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	9e 83       	std	Y+6, r25	; 0x06
     d80:	8d 83       	std	Y+5, r24	; 0x05
     d82:	0f c0       	rjmp	.+30     	; 0xda2 <main+0x25c>
     d84:	89 e1       	ldi	r24, 0x19	; 25
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9c 83       	std	Y+4, r25	; 0x04
     d8a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	9c 81       	ldd	r25, Y+4	; 0x04
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <main+0x24a>
     d94:	9c 83       	std	Y+4, r25	; 0x04
     d96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	9e 81       	ldd	r25, Y+6	; 0x06
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	9e 83       	std	Y+6, r25	; 0x06
     da0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da2:	8d 81       	ldd	r24, Y+5	; 0x05
     da4:	9e 81       	ldd	r25, Y+6	; 0x06
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	69 f7       	brne	.-38     	; 0xd84 <main+0x23e>
     daa:	14 c0       	rjmp	.+40     	; 0xdd4 <main+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dac:	6f 81       	ldd	r22, Y+7	; 0x07
     dae:	78 85       	ldd	r23, Y+8	; 0x08
     db0:	89 85       	ldd	r24, Y+9	; 0x09
     db2:	9a 85       	ldd	r25, Y+10	; 0x0a
     db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	9e 83       	std	Y+6, r25	; 0x06
     dbe:	8d 83       	std	Y+5, r24	; 0x05
     dc0:	8d 81       	ldd	r24, Y+5	; 0x05
     dc2:	9e 81       	ldd	r25, Y+6	; 0x06
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	f1 f7       	brne	.-4      	; 0xdcc <main+0x286>
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
				}
			}
			UART_sendByte(PASSWORD_IDENTICAL);
			/*****store password to external EEPROM*****/
			/*store password in eeprom*/
			for(index = 0; index < PASSCODE_SIZE ; index++){
     dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     dd6:	8f 5f       	subi	r24, 0xFF	; 255
     dd8:	8f 87       	std	Y+15, r24	; 0x0f
     dda:	8f 85       	ldd	r24, Y+15	; 0x0f
     ddc:	86 30       	cpi	r24, 0x06	; 6
     dde:	08 f4       	brcc	.+2      	; 0xde2 <main+0x29c>
     de0:	74 cf       	rjmp	.-280    	; 0xcca <main+0x184>
				/* Write password in the external EEPROM */
				EEPROM_writeByte(PASSWORD_START_ADDRESS+index, password[index]);
				_delay_ms(10);
			}
			/* change password setting state to 1 in a specific address in the external EEPROM */
			EEPROM_writeByte(SET_PASSWORD_STATUS_ADDRESS, 0x01);
     de2:	81 e1       	ldi	r24, 0x11	; 17
     de4:	93 e0       	ldi	r25, 0x03	; 3
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	0e 94 a3 08 	call	0x1146	; 0x1146 <EEPROM_writeByte>
     dec:	10 c0       	rjmp	.+32     	; 0xe0e <main+0x2c8>

			break;
		case CHECK_PASSWORD_MATCH:
			UART_sendByte(EUC2_READY);
     dee:	80 e4       	ldi	r24, 0x40	; 64
     df0:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <UART_sendByte>
			receive_password_from_HMI(password);
     df4:	ce 01       	movw	r24, r28
     df6:	42 96       	adiw	r24, 0x12	; 18
     df8:	0e 94 1c 07 	call	0xe38	; 0xe38 <receive_password_from_HMI>
			/*call match password function*/
			UART_sendByte(check_password_match(password));
     dfc:	ce 01       	movw	r24, r28
     dfe:	42 96       	adiw	r24, 0x12	; 18
     e00:	0e 94 42 07 	call	0xe84	; 0xe84 <check_password_match>
     e04:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <UART_sendByte>
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <main+0x2c8>
			break;
		case OPEN_DOOR:
			/*open door for 3 seconds*/
			open_door();
     e0a:	0e 94 17 08 	call	0x102e	; 0x102e <open_door>

			break;
		default:
			break;
		}
		receivedByte  = DUMMY_CHAR;
     e0e:	84 e4       	ldi	r24, 0x44	; 68
     e10:	89 8b       	std	Y+17, r24	; 0x11
     e12:	f1 ce       	rjmp	.-542    	; 0xbf6 <main+0xb0>

00000e14 <check_password_setting_status>:
 *                    Return 0 if password is not set
 *
 *
 */
uint8 check_password_setting_status(void)
{
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	0f 92       	push	r0
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
#ifdef SET_PASSWORD_STATUS_TEST
		EEPROM_writeByte(SET_PASSWORD_STATUS_ADDRESS, 0x01);
		_delay_ms(10);
#endif
	/* Read 0x0F from the external EEPROM */
	EEPROM_readByte(SET_PASSWORD_STATUS_ADDRESS, &status);
     e1e:	81 e1       	ldi	r24, 0x11	; 17
     e20:	93 e0       	ldi	r25, 0x03	; 3
     e22:	9e 01       	movw	r18, r28
     e24:	2f 5f       	subi	r18, 0xFF	; 255
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	b9 01       	movw	r22, r18
     e2a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <EEPROM_readByte>
	return status; /*just in testing phase*/
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e30:	0f 90       	pop	r0
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <receive_password_from_HMI>:
 * [Args] : non
 * [in] uint8 *pass: pointer to string to store the received password
 * [Returns] :
 ****************************************************/
void receive_password_from_HMI(uint8 *pass)
{
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <receive_password_from_HMI+0xa>
     e42:	0f 92       	push	r0
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	9b 83       	std	Y+3, r25	; 0x03
     e4a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i = 0; i<PASSCODE_SIZE;i++){
     e4c:	19 82       	std	Y+1, r1	; 0x01
     e4e:	0f c0       	rjmp	.+30     	; 0xe6e <receive_password_from_HMI+0x36>
		pass[i] = UART_recieveByte();
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	8c 01       	movw	r16, r24
     e5c:	02 0f       	add	r16, r18
     e5e:	13 1f       	adc	r17, r19
     e60:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <UART_recieveByte>
     e64:	f8 01       	movw	r30, r16
     e66:	80 83       	st	Z, r24
 * [Returns] :
 ****************************************************/
void receive_password_from_HMI(uint8 *pass)
{
	uint8 i;
	for(i = 0; i<PASSCODE_SIZE;i++){
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	86 30       	cpi	r24, 0x06	; 6
     e72:	70 f3       	brcs	.-36     	; 0xe50 <receive_password_from_HMI+0x18>
		pass[i] = UART_recieveByte();
	}
}
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	08 95       	ret

00000e84 <check_password_match>:
 * [Args] : non
 * [in] uint8 *pass: pointer to string of password that required to be checked
 * [Returns] : password matching status
 ****************************************************/
uint8 check_password_match(uint8 *pass)
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	68 97       	sbiw	r28, 0x18	; 24
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	9f 8b       	std	Y+23, r25	; 0x17
     e9a:	8e 8b       	std	Y+22, r24	; 0x16
	uint8 index;
#ifdef TESTING_PAHSE
	uint8 password [PASSCODE_SIZE]= {'2','2','2','2','2','\0'};
#else
	uint8 password[PASSCODE_SIZE]; /*to get passord from eeprom*/
	for(index = 0; index < PASSCODE_SIZE ; index++){
     e9c:	1f 86       	std	Y+15, r1	; 0x0f
     e9e:	87 c0       	rjmp	.+270    	; 0xfae <check_password_match+0x12a>
		/* Write password in the external EEPROM */
		EEPROM_readByte(PASSWORD_START_ADDRESS+index, (password+index));
     ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	8e 5e       	subi	r24, 0xEE	; 238
     ea8:	9c 4f       	sbci	r25, 0xFC	; 252
     eaa:	ac 01       	movw	r20, r24
     eac:	8f 85       	ldd	r24, Y+15	; 0x0f
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9e 01       	movw	r18, r28
     eb4:	20 5f       	subi	r18, 0xF0	; 240
     eb6:	3f 4f       	sbci	r19, 0xFF	; 255
     eb8:	28 0f       	add	r18, r24
     eba:	39 1f       	adc	r19, r25
     ebc:	ca 01       	movw	r24, r20
     ebe:	b9 01       	movw	r22, r18
     ec0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <EEPROM_readByte>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	a0 e2       	ldi	r26, 0x20	; 32
     eca:	b1 e4       	ldi	r27, 0x41	; 65
     ecc:	8b 87       	std	Y+11, r24	; 0x0b
     ece:	9c 87       	std	Y+12, r25	; 0x0c
     ed0:	ad 87       	std	Y+13, r26	; 0x0d
     ed2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eda:	9e 85       	ldd	r25, Y+14	; 0x0e
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	4a e7       	ldi	r20, 0x7A	; 122
     ee2:	53 e4       	ldi	r21, 0x43	; 67
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	8f 83       	std	Y+7, r24	; 0x07
     eee:	98 87       	std	Y+8, r25	; 0x08
     ef0:	a9 87       	std	Y+9, r26	; 0x09
     ef2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ef4:	6f 81       	ldd	r22, Y+7	; 0x07
     ef6:	78 85       	ldd	r23, Y+8	; 0x08
     ef8:	89 85       	ldd	r24, Y+9	; 0x09
     efa:	9a 85       	ldd	r25, Y+10	; 0x0a
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	40 e8       	ldi	r20, 0x80	; 128
     f02:	5f e3       	ldi	r21, 0x3F	; 63
     f04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f08:	88 23       	and	r24, r24
     f0a:	2c f4       	brge	.+10     	; 0xf16 <check_password_match+0x92>
		__ticks = 1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9e 83       	std	Y+6, r25	; 0x06
     f12:	8d 83       	std	Y+5, r24	; 0x05
     f14:	3f c0       	rjmp	.+126    	; 0xf94 <check_password_match+0x110>
	else if (__tmp > 65535)
     f16:	6f 81       	ldd	r22, Y+7	; 0x07
     f18:	78 85       	ldd	r23, Y+8	; 0x08
     f1a:	89 85       	ldd	r24, Y+9	; 0x09
     f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	3f ef       	ldi	r19, 0xFF	; 255
     f22:	4f e7       	ldi	r20, 0x7F	; 127
     f24:	57 e4       	ldi	r21, 0x47	; 71
     f26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f2a:	18 16       	cp	r1, r24
     f2c:	4c f5       	brge	.+82     	; 0xf80 <check_password_match+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f30:	7c 85       	ldd	r23, Y+12	; 0x0c
     f32:	8d 85       	ldd	r24, Y+13	; 0x0d
     f34:	9e 85       	ldd	r25, Y+14	; 0x0e
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e2       	ldi	r20, 0x20	; 32
     f3c:	51 e4       	ldi	r21, 0x41	; 65
     f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	bc 01       	movw	r22, r24
     f48:	cd 01       	movw	r24, r26
     f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	9e 83       	std	Y+6, r25	; 0x06
     f54:	8d 83       	std	Y+5, r24	; 0x05
     f56:	0f c0       	rjmp	.+30     	; 0xf76 <check_password_match+0xf2>
     f58:	89 e1       	ldi	r24, 0x19	; 25
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	8b 83       	std	Y+3, r24	; 0x03
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	f1 f7       	brne	.-4      	; 0xf64 <check_password_match+0xe0>
     f68:	9c 83       	std	Y+4, r25	; 0x04
     f6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6c:	8d 81       	ldd	r24, Y+5	; 0x05
     f6e:	9e 81       	ldd	r25, Y+6	; 0x06
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	69 f7       	brne	.-38     	; 0xf58 <check_password_match+0xd4>
     f7e:	14 c0       	rjmp	.+40     	; 0xfa8 <check_password_match+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f80:	6f 81       	ldd	r22, Y+7	; 0x07
     f82:	78 85       	ldd	r23, Y+8	; 0x08
     f84:	89 85       	ldd	r24, Y+9	; 0x09
     f86:	9a 85       	ldd	r25, Y+10	; 0x0a
     f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	9e 83       	std	Y+6, r25	; 0x06
     f92:	8d 83       	std	Y+5, r24	; 0x05
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <check_password_match+0x11c>
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
	uint8 index;
#ifdef TESTING_PAHSE
	uint8 password [PASSCODE_SIZE]= {'2','2','2','2','2','\0'};
#else
	uint8 password[PASSCODE_SIZE]; /*to get passord from eeprom*/
	for(index = 0; index < PASSCODE_SIZE ; index++){
     fa8:	8f 85       	ldd	r24, Y+15	; 0x0f
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	8f 87       	std	Y+15, r24	; 0x0f
     fae:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb0:	86 30       	cpi	r24, 0x06	; 6
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <check_password_match+0x132>
     fb4:	75 cf       	rjmp	.-278    	; 0xea0 <check_password_match+0x1c>
	}
#endif
	/*
	 * password => get stored password from EEPROM
	 */
	for(index = 0; index < PASSCODE_SIZE ; index++)
     fb6:	1f 86       	std	Y+15, r1	; 0x0f
     fb8:	1a c0       	rjmp	.+52     	; 0xfee <check_password_match+0x16a>
	{
		if(password[index] != pass[index]){
     fba:	8f 85       	ldd	r24, Y+15	; 0x0f
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	ce 01       	movw	r24, r28
     fc2:	40 96       	adiw	r24, 0x10	; 16
     fc4:	fc 01       	movw	r30, r24
     fc6:	e2 0f       	add	r30, r18
     fc8:	f3 1f       	adc	r31, r19
     fca:	40 81       	ld	r20, Z
     fcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	8e 89       	ldd	r24, Y+22	; 0x16
     fd4:	9f 89       	ldd	r25, Y+23	; 0x17
     fd6:	fc 01       	movw	r30, r24
     fd8:	e2 0f       	add	r30, r18
     fda:	f3 1f       	adc	r31, r19
     fdc:	80 81       	ld	r24, Z
     fde:	48 17       	cp	r20, r24
     fe0:	19 f0       	breq	.+6      	; 0xfe8 <check_password_match+0x164>
			return PASSWORD_NOT_MATCH;
     fe2:	8e e6       	ldi	r24, 0x6E	; 110
     fe4:	88 8f       	std	Y+24, r24	; 0x18
     fe6:	08 c0       	rjmp	.+16     	; 0xff8 <check_password_match+0x174>
	}
#endif
	/*
	 * password => get stored password from EEPROM
	 */
	for(index = 0; index < PASSCODE_SIZE ; index++)
     fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	8f 87       	std	Y+15, r24	; 0x0f
     fee:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff0:	86 30       	cpi	r24, 0x06	; 6
     ff2:	18 f3       	brcs	.-58     	; 0xfba <check_password_match+0x136>
	{
		if(password[index] != pass[index]){
			return PASSWORD_NOT_MATCH;
		}
	}
	return PASSWORD_MATCH;
     ff4:	89 e7       	ldi	r24, 0x79	; 121
     ff6:	88 8f       	std	Y+24, r24	; 0x18
     ff8:	88 8d       	ldd	r24, Y+24	; 0x18
}
     ffa:	68 96       	adiw	r28, 0x18	; 24
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	08 95       	ret

0000100c <timer0_handler>:
 * [Description] : function to handle
 * [Args] : non
 * [in]: non
 * [Returns] : non
 ****************************************************/
void timer0_handler(void){
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	setTimerValue(TIMER0_ID, 5);
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	65 e0       	ldi	r22, 0x05	; 5
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <setTimerValue>
	g_timer0_ticks++;
    101e:	80 91 6e 00 	lds	r24, 0x006E
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	80 93 6e 00 	sts	0x006E, r24
}
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <open_door>:
 * [Description] : function to open the door using DC-motor
 * [Args] : non
 * [in]: non
 * [Returns] : non
 ****************************************************/
void open_door(void){
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
	/*rotate motor for 15 seconds CW*/
	g_timer0_ticks = 0;
    1036:	10 92 6e 00 	sts	0x006E, r1
	DcMotor_Rotate(DC_CW);
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	0e 94 57 08 	call	0x10ae	; 0x10ae <DcMotor_Rotate>
	while(g_timer0_ticks < 60);
    1040:	80 91 6e 00 	lds	r24, 0x006E
    1044:	8c 33       	cpi	r24, 0x3C	; 60
    1046:	e0 f3       	brcs	.-8      	; 0x1040 <open_door+0x12>

	/*hold motor for 3 seconds */
	g_timer0_ticks = 0;
    1048:	10 92 6e 00 	sts	0x006E, r1
	DcMotor_Rotate(DC_STOP);
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	0e 94 57 08 	call	0x10ae	; 0x10ae <DcMotor_Rotate>
	while(g_timer0_ticks < 12);
    1052:	80 91 6e 00 	lds	r24, 0x006E
    1056:	8c 30       	cpi	r24, 0x0C	; 12
    1058:	e0 f3       	brcs	.-8      	; 0x1052 <open_door+0x24>

	/*rotate motor for 15 seconds CCW*/
	g_timer0_ticks = 0;
    105a:	10 92 6e 00 	sts	0x006E, r1
	DcMotor_Rotate(DC_A_CW);
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	0e 94 57 08 	call	0x10ae	; 0x10ae <DcMotor_Rotate>
	while(g_timer0_ticks < 60);
    1064:	80 91 6e 00 	lds	r24, 0x006E
    1068:	8c 33       	cpi	r24, 0x3C	; 60
    106a:	e0 f3       	brcs	.-8      	; 0x1064 <open_door+0x36>

	/*Stop Motor*/
	DcMotor_Rotate(DC_STOP);
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	0e 94 57 08 	call	0x10ae	; 0x10ae <DcMotor_Rotate>
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <DcMotor_Init>:
 *******************************************************************************/
/*
 * Function to initialize one specific motor
 */

void DcMotor_Init(void){
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_IN1, PIN_OUTPUT);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	41 e0       	ldi	r20, 0x01	; 1
    1086:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_PORT_ID, DCMOTOR_IN2, PIN_OUTPUT);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	41 e0       	ldi	r20, 0x01	; 1
    1090:	0e 94 3b 09 	call	0x1276	; 0x1276 <GPIO_setupPinDirection>

	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN1, LOGIC_LOW);
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	0e 94 35 0a 	call	0x146a	; 0x146a <GPIO_writePin>
	GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN2, LOGIC_LOW);
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	40 e0       	ldi	r20, 0x00	; 0
    10a4:	0e 94 35 0a 	call	0x146a	; 0x146a <GPIO_writePin>
}
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DcMotor_Rotate>:


/*
 * Function to rotate DC motor CW or CCW with a given speed
 */
void DcMotor_Rotate(DcMotor_State state){
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DcMotor_Rotate+0x6>
    10b4:	0f 92       	push	r0
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	3b 83       	std	Y+3, r19	; 0x03
    10c4:	2a 83       	std	Y+2, r18	; 0x02
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	f9 f0       	breq	.+62     	; 0x110e <DcMotor_Rotate+0x60>
    10d0:	2a 81       	ldd	r18, Y+2	; 0x02
    10d2:	3b 81       	ldd	r19, Y+3	; 0x03
    10d4:	22 30       	cpi	r18, 0x02	; 2
    10d6:	31 05       	cpc	r19, r1
    10d8:	79 f0       	breq	.+30     	; 0x10f8 <DcMotor_Rotate+0x4a>
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	9b 81       	ldd	r25, Y+3	; 0x03
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	01 f5       	brne	.+64     	; 0x1122 <DcMotor_Rotate+0x74>
	{
	case DC_STOP:
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN1, LOGIC_LOW);
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	40 e0       	ldi	r20, 0x00	; 0
    10e8:	0e 94 35 0a 	call	0x146a	; 0x146a <GPIO_writePin>
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN2, LOGIC_LOW);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	0e 94 35 0a 	call	0x146a	; 0x146a <GPIO_writePin>
    10f6:	15 c0       	rjmp	.+42     	; 0x1122 <DcMotor_Rotate+0x74>

		break;
	case DC_CW:
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN1, LOGIC_LOW);
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	0e 94 35 0a 	call	0x146a	; 0x146a <GPIO_writePin>
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN2, LOGIC_HIGH);
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	61 e0       	ldi	r22, 0x01	; 1
    1106:	41 e0       	ldi	r20, 0x01	; 1
    1108:	0e 94 35 0a 	call	0x146a	; 0x146a <GPIO_writePin>
    110c:	0a c0       	rjmp	.+20     	; 0x1122 <DcMotor_Rotate+0x74>

		break;
	case DC_A_CW:
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN1, LOGIC_HIGH);
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	41 e0       	ldi	r20, 0x01	; 1
    1114:	0e 94 35 0a 	call	0x146a	; 0x146a <GPIO_writePin>
		GPIO_writePin(DCMOTOR_PORT_ID, DCMOTOR_IN2, LOGIC_LOW);
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	0e 94 35 0a 	call	0x146a	; 0x146a <GPIO_writePin>
		break;
	}
	g_DcMotor_state = state;
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	80 93 6f 00 	sts	0x006F, r24

}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <DcMotor_return_motor_state>:
DcMotor_State DcMotor_return_motor_state(void){
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
	return g_DcMotor_state;
    113c:	80 91 6f 00 	lds	r24, 0x006F

}
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	08 95       	ret

00001146 <EEPROM_writeByte>:
/*******************************************************************************
 *                      Functions Definition                                   *
 *******************************************************************************/

uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <EEPROM_writeByte+0x6>
    114c:	00 d0       	rcall	.+0      	; 0x114e <EEPROM_writeByte+0x8>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1158:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    115c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <TWI_getStatus>
    1160:	88 30       	cpi	r24, 0x08	; 8
    1162:	11 f0       	breq	.+4      	; 0x1168 <EEPROM_writeByte+0x22>
		return ERROR;
    1164:	1c 82       	std	Y+4, r1	; 0x04
    1166:	28 c0       	rjmp	.+80     	; 0x11b8 <EEPROM_writeByte+0x72>
	 * memory location address and R/W=0 (write)
	 * EEPROM memory was set up as fixed address beginning with 0xA0
	 * 11 bit address for memory location divides 3bits and 8 to avoid sending 2bytes for memory addressing
	 * (Fixed 1010+ 3 MSB bits + R/W-)(the 8 LSB bits in memory address)
	 */
	TWI_writeByte(0xA0 | (uint8)((u16addr&0x0700)>>7));
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	80 70       	andi	r24, 0x00	; 0
    116e:	97 70       	andi	r25, 0x07	; 7
    1170:	88 0f       	add	r24, r24
    1172:	89 2f       	mov	r24, r25
    1174:	88 1f       	adc	r24, r24
    1176:	99 0b       	sbc	r25, r25
    1178:	91 95       	neg	r25
    117a:	80 6a       	ori	r24, 0xA0	; 160
    117c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1180:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <TWI_getStatus>
    1184:	88 31       	cpi	r24, 0x18	; 24
    1186:	11 f0       	breq	.+4      	; 0x118c <EEPROM_writeByte+0x46>
		return ERROR;
    1188:	1c 82       	std	Y+4, r1	; 0x04
    118a:	16 c0       	rjmp	.+44     	; 0x11b8 <EEPROM_writeByte+0x72>
	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr & 0x00FF));
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1192:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <TWI_getStatus>
    1196:	88 32       	cpi	r24, 0x28	; 40
    1198:	11 f0       	breq	.+4      	; 0x119e <EEPROM_writeByte+0x58>
		return ERROR;
    119a:	1c 82       	std	Y+4, r1	; 0x04
    119c:	0d c0       	rjmp	.+26     	; 0x11b8 <EEPROM_writeByte+0x72>

	/* write byte to EEPROM */
	TWI_writeByte(u8data);
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    11a4:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <TWI_getStatus>
    11a8:	88 32       	cpi	r24, 0x28	; 40
    11aa:	11 f0       	breq	.+4      	; 0x11b0 <EEPROM_writeByte+0x6a>
		return ERROR;
    11ac:	1c 82       	std	Y+4, r1	; 0x04
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <EEPROM_writeByte+0x72>
	/* Send the Stop Bit */
	TWI_stop();
    11b0:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <TWI_stop>
	/*return success*/
	return SUCCESS;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	8c 83       	std	Y+4, r24	; 0x04
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <EEPROM_readByte>:



uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <EEPROM_readByte+0x6>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <EEPROM_readByte+0x8>
    11d0:	0f 92       	push	r0
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	9a 83       	std	Y+2, r25	; 0x02
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	7c 83       	std	Y+4, r23	; 0x04
    11dc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    11de:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    11e2:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <TWI_getStatus>
    11e6:	88 30       	cpi	r24, 0x08	; 8
    11e8:	11 f0       	breq	.+4      	; 0x11ee <EEPROM_readByte+0x26>
		return ERROR;
    11ea:	1d 82       	std	Y+5, r1	; 0x05
    11ec:	3b c0       	rjmp	.+118    	; 0x1264 <EEPROM_readByte+0x9c>
	 * memory location address and R/W=1 (write)
	 * EEPROM memory was set up as fixed address beginning with 0xA0
	 * 11 bit address for memory location divides 3bits and 8 to avoid sending 2bytes for memory addressing
	 * (Fixed 1010+ 3 MSB bits + R/W-)(the 8 LSB bits in memory address)
	 */
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	80 70       	andi	r24, 0x00	; 0
    11f4:	97 70       	andi	r25, 0x07	; 7
    11f6:	88 0f       	add	r24, r24
    11f8:	89 2f       	mov	r24, r25
    11fa:	88 1f       	adc	r24, r24
    11fc:	99 0b       	sbc	r25, r25
    11fe:	91 95       	neg	r25
    1200:	81 6a       	ori	r24, 0xA1	; 161
    1202:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1206:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <TWI_getStatus>
    120a:	88 31       	cpi	r24, 0x18	; 24
    120c:	11 f0       	breq	.+4      	; 0x1212 <EEPROM_readByte+0x4a>
		return ERROR;
    120e:	1d 82       	std	Y+5, r1	; 0x05
    1210:	29 c0       	rjmp	.+82     	; 0x1264 <EEPROM_readByte+0x9c>
	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr & 0x00FF));
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1218:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <TWI_getStatus>
    121c:	88 32       	cpi	r24, 0x28	; 40
    121e:	11 f0       	breq	.+4      	; 0x1224 <EEPROM_readByte+0x5c>
		return ERROR;
    1220:	1d 82       	std	Y+5, r1	; 0x05
    1222:	20 c0       	rjmp	.+64     	; 0x1264 <EEPROM_readByte+0x9c>
	/***********************Repeat start*************************/
	TWI_start();
    1224:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    1228:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <TWI_getStatus>
    122c:	80 31       	cpi	r24, 0x10	; 16
    122e:	11 f0       	breq	.+4      	; 0x1234 <EEPROM_readByte+0x6c>
		return ERROR;
    1230:	1d 82       	std	Y+5, r1	; 0x05
    1232:	18 c0       	rjmp	.+48     	; 0x1264 <EEPROM_readByte+0x9c>
	 */

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */

	TWI_writeByte(0xA0 | 0x01);
    1234:	81 ea       	ldi	r24, 0xA1	; 161
    1236:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    123a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <TWI_getStatus>
    123e:	80 34       	cpi	r24, 0x40	; 64
    1240:	11 f0       	breq	.+4      	; 0x1246 <EEPROM_readByte+0x7e>
		return ERROR;
    1242:	1d 82       	std	Y+5, r1	; 0x05
    1244:	0f c0       	rjmp	.+30     	; 0x1264 <EEPROM_readByte+0x9c>

	/* Read Byte from Memory without send ACK */
	*u8data = TWI_readByteWithNACK();
    1246:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <TWI_readByteWithNACK>
    124a:	eb 81       	ldd	r30, Y+3	; 0x03
    124c:	fc 81       	ldd	r31, Y+4	; 0x04
    124e:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1250:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <TWI_getStatus>
    1254:	88 35       	cpi	r24, 0x58	; 88
    1256:	11 f0       	breq	.+4      	; 0x125c <EEPROM_readByte+0x94>
		return ERROR;
    1258:	1d 82       	std	Y+5, r1	; 0x05
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <EEPROM_readByte+0x9c>

	/* Send the Stop Bit */
	TWI_stop();
    125c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <TWI_stop>
	/*return success*/
	return SUCCESS;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	8d 83       	std	Y+5, r24	; 0x05
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <GPIO_setupPinDirection>:

/*
function to setup the dirction on specified pin Input/output
if pin number or port number ar invalid, function will not handle it
*/
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	00 d0       	rcall	.+0      	; 0x127c <GPIO_setupPinDirection+0x6>
    127c:	00 d0       	rcall	.+0      	; 0x127e <GPIO_setupPinDirection+0x8>
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	6a 83       	std	Y+2, r22	; 0x02
    1288:	4b 83       	std	Y+3, r20	; 0x03
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	85 30       	cpi	r24, 0x05	; 5
    128e:	08 f0       	brcs	.+2      	; 0x1292 <GPIO_setupPinDirection+0x1c>
    1290:	e4 c0       	rjmp	.+456    	; 0x145a <GPIO_setupPinDirection+0x1e4>
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	89 30       	cpi	r24, 0x09	; 9
    1296:	08 f0       	brcs	.+2      	; 0x129a <GPIO_setupPinDirection+0x24>
    1298:	e0 c0       	rjmp	.+448    	; 0x145a <GPIO_setupPinDirection+0x1e4>

    }
    else{
        switch (port_num)
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	3d 83       	std	Y+5, r19	; 0x05
    12a2:	2c 83       	std	Y+4, r18	; 0x04
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	9d 81       	ldd	r25, Y+5	; 0x05
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <GPIO_setupPinDirection+0x3a>
    12ae:	47 c0       	rjmp	.+142    	; 0x133e <GPIO_setupPinDirection+0xc8>
    12b0:	2c 81       	ldd	r18, Y+4	; 0x04
    12b2:	3d 81       	ldd	r19, Y+5	; 0x05
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	2c f4       	brge	.+10     	; 0x12c4 <GPIO_setupPinDirection+0x4e>
    12ba:	8c 81       	ldd	r24, Y+4	; 0x04
    12bc:	9d 81       	ldd	r25, Y+5	; 0x05
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	71 f0       	breq	.+28     	; 0x12de <GPIO_setupPinDirection+0x68>
    12c2:	cb c0       	rjmp	.+406    	; 0x145a <GPIO_setupPinDirection+0x1e4>
    12c4:	2c 81       	ldd	r18, Y+4	; 0x04
    12c6:	3d 81       	ldd	r19, Y+5	; 0x05
    12c8:	22 30       	cpi	r18, 0x02	; 2
    12ca:	31 05       	cpc	r19, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <GPIO_setupPinDirection+0x5a>
    12ce:	67 c0       	rjmp	.+206    	; 0x139e <GPIO_setupPinDirection+0x128>
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	83 30       	cpi	r24, 0x03	; 3
    12d6:	91 05       	cpc	r25, r1
    12d8:	09 f4       	brne	.+2      	; 0x12dc <GPIO_setupPinDirection+0x66>
    12da:	91 c0       	rjmp	.+290    	; 0x13fe <GPIO_setupPinDirection+0x188>
    12dc:	be c0       	rjmp	.+380    	; 0x145a <GPIO_setupPinDirection+0x1e4>
        {
        case PORTA_ID:
            if(PIN_OUTPUT == direction){
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	a1 f4       	brne	.+40     	; 0x130c <GPIO_setupPinDirection+0x96>
                SET_BIT(DDRA, pin_num);
    12e4:	aa e3       	ldi	r26, 0x3A	; 58
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	ea e3       	ldi	r30, 0x3A	; 58
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <GPIO_setupPinDirection+0x8c>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <GPIO_setupPinDirection+0x88>
    1306:	84 2b       	or	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	a7 c0       	rjmp	.+334    	; 0x145a <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	88 23       	and	r24, r24
    1310:	09 f0       	breq	.+2      	; 0x1314 <GPIO_setupPinDirection+0x9e>
    1312:	a3 c0       	rjmp	.+326    	; 0x145a <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRA, pin_num);
    1314:	aa e3       	ldi	r26, 0x3A	; 58
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	ea e3       	ldi	r30, 0x3A	; 58
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <GPIO_setupPinDirection+0xbc>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <GPIO_setupPinDirection+0xb8>
    1336:	80 95       	com	r24
    1338:	84 23       	and	r24, r20
    133a:	8c 93       	st	X, r24
    133c:	8e c0       	rjmp	.+284    	; 0x145a <GPIO_setupPinDirection+0x1e4>

            }
            break;
        case PORTB_ID:
            if(PIN_OUTPUT == direction){
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	a1 f4       	brne	.+40     	; 0x136c <GPIO_setupPinDirection+0xf6>
                SET_BIT(DDRB, pin_num);
    1344:	a7 e3       	ldi	r26, 0x37	; 55
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e7 e3       	ldi	r30, 0x37	; 55
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <GPIO_setupPinDirection+0xec>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <GPIO_setupPinDirection+0xe8>
    1366:	84 2b       	or	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	77 c0       	rjmp	.+238    	; 0x145a <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	88 23       	and	r24, r24
    1370:	09 f0       	breq	.+2      	; 0x1374 <GPIO_setupPinDirection+0xfe>
    1372:	73 c0       	rjmp	.+230    	; 0x145a <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRB, pin_num);
    1374:	a7 e3       	ldi	r26, 0x37	; 55
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e7 e3       	ldi	r30, 0x37	; 55
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_setupPinDirection+0x11c>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_setupPinDirection+0x118>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	5e c0       	rjmp	.+188    	; 0x145a <GPIO_setupPinDirection+0x1e4>

            }
            break;
        case PORTC_ID:
            if(PIN_OUTPUT == direction){
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	a1 f4       	brne	.+40     	; 0x13cc <GPIO_setupPinDirection+0x156>
                SET_BIT(DDRC, pin_num);
    13a4:	a4 e3       	ldi	r26, 0x34	; 52
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e4 e3       	ldi	r30, 0x34	; 52
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <GPIO_setupPinDirection+0x14c>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <GPIO_setupPinDirection+0x148>
    13c6:	84 2b       	or	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	47 c0       	rjmp	.+142    	; 0x145a <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	88 23       	and	r24, r24
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <GPIO_setupPinDirection+0x15e>
    13d2:	43 c0       	rjmp	.+134    	; 0x145a <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRC, pin_num);
    13d4:	a4 e3       	ldi	r26, 0x34	; 52
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e4 e3       	ldi	r30, 0x34	; 52
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <GPIO_setupPinDirection+0x17c>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <GPIO_setupPinDirection+0x178>
    13f6:	80 95       	com	r24
    13f8:	84 23       	and	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	2e c0       	rjmp	.+92     	; 0x145a <GPIO_setupPinDirection+0x1e4>


            }
            break;
        case PORTD_ID:
            if(PIN_OUTPUT == direction){
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	a1 f4       	brne	.+40     	; 0x142c <GPIO_setupPinDirection+0x1b6>
                SET_BIT(DDRD, pin_num);
    1404:	a1 e3       	ldi	r26, 0x31	; 49
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e1 e3       	ldi	r30, 0x31	; 49
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <GPIO_setupPinDirection+0x1ac>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <GPIO_setupPinDirection+0x1a8>
    1426:	84 2b       	or	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	17 c0       	rjmp	.+46     	; 0x145a <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	88 23       	and	r24, r24
    1430:	a1 f4       	brne	.+40     	; 0x145a <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRD, pin_num);
    1432:	a1 e3       	ldi	r26, 0x31	; 49
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e1 e3       	ldi	r30, 0x31	; 49
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <GPIO_setupPinDirection+0x1da>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <GPIO_setupPinDirection+0x1d6>
    1454:	80 95       	com	r24
    1456:	84 23       	and	r24, r20
    1458:	8c 93       	st	X, r24
            }
            break;

        }
    }
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	0f 90       	pop	r0
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * if pin number or port number ar invalid, function will not handle it
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <GPIO_writePin+0x6>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <GPIO_writePin+0x8>
    1472:	0f 92       	push	r0
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	6a 83       	std	Y+2, r22	; 0x02
    147c:	4b 83       	std	Y+3, r20	; 0x03
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){}
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	85 30       	cpi	r24, 0x05	; 5
    1482:	08 f0       	brcs	.+2      	; 0x1486 <GPIO_writePin+0x1c>
    1484:	e4 c0       	rjmp	.+456    	; 0x164e <GPIO_writePin+0x1e4>
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	89 30       	cpi	r24, 0x09	; 9
    148a:	08 f0       	brcs	.+2      	; 0x148e <GPIO_writePin+0x24>
    148c:	e0 c0       	rjmp	.+448    	; 0x164e <GPIO_writePin+0x1e4>
    else{
        switch (port_num)
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	3d 83       	std	Y+5, r19	; 0x05
    1496:	2c 83       	std	Y+4, r18	; 0x04
    1498:	8c 81       	ldd	r24, Y+4	; 0x04
    149a:	9d 81       	ldd	r25, Y+5	; 0x05
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	91 05       	cpc	r25, r1
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <GPIO_writePin+0x3a>
    14a2:	47 c0       	rjmp	.+142    	; 0x1532 <GPIO_writePin+0xc8>
    14a4:	2c 81       	ldd	r18, Y+4	; 0x04
    14a6:	3d 81       	ldd	r19, Y+5	; 0x05
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <GPIO_writePin+0x4e>
    14ae:	8c 81       	ldd	r24, Y+4	; 0x04
    14b0:	9d 81       	ldd	r25, Y+5	; 0x05
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	71 f0       	breq	.+28     	; 0x14d2 <GPIO_writePin+0x68>
    14b6:	cb c0       	rjmp	.+406    	; 0x164e <GPIO_writePin+0x1e4>
    14b8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ba:	3d 81       	ldd	r19, Y+5	; 0x05
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	31 05       	cpc	r19, r1
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <GPIO_writePin+0x5a>
    14c2:	67 c0       	rjmp	.+206    	; 0x1592 <GPIO_writePin+0x128>
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	83 30       	cpi	r24, 0x03	; 3
    14ca:	91 05       	cpc	r25, r1
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <GPIO_writePin+0x66>
    14ce:	91 c0       	rjmp	.+290    	; 0x15f2 <GPIO_writePin+0x188>
    14d0:	be c0       	rjmp	.+380    	; 0x164e <GPIO_writePin+0x1e4>
        {
        case PORTA_ID:

            if(LOGIC_HIGH == value){
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	a1 f4       	brne	.+40     	; 0x1500 <GPIO_writePin+0x96>
                SET_BIT(PORTA, pin_num);
    14d8:	ab e3       	ldi	r26, 0x3B	; 59
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	eb e3       	ldi	r30, 0x3B	; 59
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <GPIO_writePin+0x8c>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <GPIO_writePin+0x88>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	a7 c0       	rjmp	.+334    	; 0x164e <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	88 23       	and	r24, r24
    1504:	09 f0       	breq	.+2      	; 0x1508 <GPIO_writePin+0x9e>
    1506:	a3 c0       	rjmp	.+326    	; 0x164e <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTA, pin_num);
    1508:	ab e3       	ldi	r26, 0x3B	; 59
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	eb e3       	ldi	r30, 0x3B	; 59
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	48 2f       	mov	r20, r24
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	02 2e       	mov	r0, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <GPIO_writePin+0xbc>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <GPIO_writePin+0xb8>
    152a:	80 95       	com	r24
    152c:	84 23       	and	r24, r20
    152e:	8c 93       	st	X, r24
    1530:	8e c0       	rjmp	.+284    	; 0x164e <GPIO_writePin+0x1e4>

            }
            break;
        case PORTB_ID:

            if(LOGIC_HIGH == value){
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	a1 f4       	brne	.+40     	; 0x1560 <GPIO_writePin+0xf6>
                SET_BIT(PORTB, pin_num);
    1538:	a8 e3       	ldi	r26, 0x38	; 56
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	e8 e3       	ldi	r30, 0x38	; 56
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	48 2f       	mov	r20, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	02 2e       	mov	r0, r18
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <GPIO_writePin+0xec>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <GPIO_writePin+0xe8>
    155a:	84 2b       	or	r24, r20
    155c:	8c 93       	st	X, r24
    155e:	77 c0       	rjmp	.+238    	; 0x164e <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	88 23       	and	r24, r24
    1564:	09 f0       	breq	.+2      	; 0x1568 <GPIO_writePin+0xfe>
    1566:	73 c0       	rjmp	.+230    	; 0x164e <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTB, pin_num);
    1568:	a8 e3       	ldi	r26, 0x38	; 56
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e8 e3       	ldi	r30, 0x38	; 56
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <GPIO_writePin+0x11c>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <GPIO_writePin+0x118>
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	5e c0       	rjmp	.+188    	; 0x164e <GPIO_writePin+0x1e4>
            }
            break;
        case PORTC_ID:

            if(LOGIC_HIGH == value){
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	a1 f4       	brne	.+40     	; 0x15c0 <GPIO_writePin+0x156>
                SET_BIT(PORTC, pin_num);
    1598:	a5 e3       	ldi	r26, 0x35	; 53
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e5 e3       	ldi	r30, 0x35	; 53
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <GPIO_writePin+0x14c>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <GPIO_writePin+0x148>
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	47 c0       	rjmp	.+142    	; 0x164e <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	88 23       	and	r24, r24
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <GPIO_writePin+0x15e>
    15c6:	43 c0       	rjmp	.+134    	; 0x164e <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTC, pin_num);
    15c8:	a5 e3       	ldi	r26, 0x35	; 53
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e5 e3       	ldi	r30, 0x35	; 53
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <GPIO_writePin+0x17c>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <GPIO_writePin+0x178>
    15ea:	80 95       	com	r24
    15ec:	84 23       	and	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	2e c0       	rjmp	.+92     	; 0x164e <GPIO_writePin+0x1e4>
            }
            break;
        case PORTD_ID:

            if(LOGIC_HIGH == value){
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	a1 f4       	brne	.+40     	; 0x1620 <GPIO_writePin+0x1b6>
                SET_BIT(PORTD, pin_num);
    15f8:	a2 e3       	ldi	r26, 0x32	; 50
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e2 e3       	ldi	r30, 0x32	; 50
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GPIO_writePin+0x1ac>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <GPIO_writePin+0x1a8>
    161a:	84 2b       	or	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	17 c0       	rjmp	.+46     	; 0x164e <GPIO_writePin+0x1e4>
            }
            else if(LOGIC_LOW == value){
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 23       	and	r24, r24
    1624:	a1 f4       	brne	.+40     	; 0x164e <GPIO_writePin+0x1e4>
                CLEAR_BIT(PORTD, pin_num);
    1626:	a2 e3       	ldi	r26, 0x32	; 50
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e2 e3       	ldi	r30, 0x32	; 50
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <GPIO_writePin+0x1da>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <GPIO_writePin+0x1d6>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
            }
            break;
        }
    }    
    
}
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <GPIO_readPin+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <GPIO_readPin+0x8>
    1666:	0f 92       	push	r0
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){}
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	85 30       	cpi	r24, 0x05	; 5
    1674:	08 f0       	brcs	.+2      	; 0x1678 <GPIO_readPin+0x1a>
    1676:	85 c0       	rjmp	.+266    	; 0x1782 <GPIO_readPin+0x124>
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	89 30       	cpi	r24, 0x09	; 9
    167c:	08 f0       	brcs	.+2      	; 0x1680 <GPIO_readPin+0x22>
    167e:	81 c0       	rjmp	.+258    	; 0x1782 <GPIO_readPin+0x124>
    else{
        switch (port_num)
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	3d 83       	std	Y+5, r19	; 0x05
    1688:	2c 83       	std	Y+4, r18	; 0x04
    168a:	4c 81       	ldd	r20, Y+4	; 0x04
    168c:	5d 81       	ldd	r21, Y+5	; 0x05
    168e:	41 30       	cpi	r20, 0x01	; 1
    1690:	51 05       	cpc	r21, r1
    1692:	79 f1       	breq	.+94     	; 0x16f2 <GPIO_readPin+0x94>
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	9d 81       	ldd	r25, Y+5	; 0x05
    1698:	82 30       	cpi	r24, 0x02	; 2
    169a:	91 05       	cpc	r25, r1
    169c:	34 f4       	brge	.+12     	; 0x16aa <GPIO_readPin+0x4c>
    169e:	2c 81       	ldd	r18, Y+4	; 0x04
    16a0:	3d 81       	ldd	r19, Y+5	; 0x05
    16a2:	21 15       	cp	r18, r1
    16a4:	31 05       	cpc	r19, r1
    16a6:	69 f0       	breq	.+26     	; 0x16c2 <GPIO_readPin+0x64>
    16a8:	6c c0       	rjmp	.+216    	; 0x1782 <GPIO_readPin+0x124>
    16aa:	4c 81       	ldd	r20, Y+4	; 0x04
    16ac:	5d 81       	ldd	r21, Y+5	; 0x05
    16ae:	42 30       	cpi	r20, 0x02	; 2
    16b0:	51 05       	cpc	r21, r1
    16b2:	b9 f1       	breq	.+110    	; 0x1722 <GPIO_readPin+0xc4>
    16b4:	8c 81       	ldd	r24, Y+4	; 0x04
    16b6:	9d 81       	ldd	r25, Y+5	; 0x05
    16b8:	83 30       	cpi	r24, 0x03	; 3
    16ba:	91 05       	cpc	r25, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <GPIO_readPin+0x62>
    16be:	49 c0       	rjmp	.+146    	; 0x1752 <GPIO_readPin+0xf4>
    16c0:	60 c0       	rjmp	.+192    	; 0x1782 <GPIO_readPin+0x124>
        {
        case PORTA_ID:

            if(BIT_IS_SET(PINA, pin_num)){
    16c2:	e9 e3       	ldi	r30, 0x39	; 57
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	88 2f       	mov	r24, r24
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a9 01       	movw	r20, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <GPIO_readPin+0x7c>
    16d6:	55 95       	asr	r21
    16d8:	47 95       	ror	r20
    16da:	8a 95       	dec	r24
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <GPIO_readPin+0x78>
    16de:	ca 01       	movw	r24, r20
    16e0:	81 70       	andi	r24, 0x01	; 1
    16e2:	90 70       	andi	r25, 0x00	; 0
    16e4:	88 23       	and	r24, r24
    16e6:	19 f0       	breq	.+6      	; 0x16ee <GPIO_readPin+0x90>
                return 1;
    16e8:	51 e0       	ldi	r21, 0x01	; 1
    16ea:	5b 83       	std	Y+3, r21	; 0x03
    16ec:	4b c0       	rjmp	.+150    	; 0x1784 <GPIO_readPin+0x126>
            }
            else{
                return 0;
    16ee:	1b 82       	std	Y+3, r1	; 0x03
    16f0:	49 c0       	rjmp	.+146    	; 0x1784 <GPIO_readPin+0x126>

            }
            break;
        case PORTB_ID:

            if(BIT_IS_SET(PINB, pin_num)){
    16f2:	e6 e3       	ldi	r30, 0x36	; 54
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	88 2f       	mov	r24, r24
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a9 01       	movw	r20, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <GPIO_readPin+0xac>
    1706:	55 95       	asr	r21
    1708:	47 95       	ror	r20
    170a:	8a 95       	dec	r24
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <GPIO_readPin+0xa8>
    170e:	ca 01       	movw	r24, r20
    1710:	81 70       	andi	r24, 0x01	; 1
    1712:	90 70       	andi	r25, 0x00	; 0
    1714:	88 23       	and	r24, r24
    1716:	19 f0       	breq	.+6      	; 0x171e <GPIO_readPin+0xc0>
                return 1;
    1718:	51 e0       	ldi	r21, 0x01	; 1
    171a:	5b 83       	std	Y+3, r21	; 0x03
    171c:	33 c0       	rjmp	.+102    	; 0x1784 <GPIO_readPin+0x126>
            }
            else{
                return 0;
    171e:	1b 82       	std	Y+3, r1	; 0x03
    1720:	31 c0       	rjmp	.+98     	; 0x1784 <GPIO_readPin+0x126>
            }
            break;
        case PORTC_ID:

            if(BIT_IS_SET(PINC, pin_num)){
    1722:	e3 e3       	ldi	r30, 0x33	; 51
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a9 01       	movw	r20, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <GPIO_readPin+0xdc>
    1736:	55 95       	asr	r21
    1738:	47 95       	ror	r20
    173a:	8a 95       	dec	r24
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <GPIO_readPin+0xd8>
    173e:	ca 01       	movw	r24, r20
    1740:	81 70       	andi	r24, 0x01	; 1
    1742:	90 70       	andi	r25, 0x00	; 0
    1744:	88 23       	and	r24, r24
    1746:	19 f0       	breq	.+6      	; 0x174e <GPIO_readPin+0xf0>
                return 1;
    1748:	51 e0       	ldi	r21, 0x01	; 1
    174a:	5b 83       	std	Y+3, r21	; 0x03
    174c:	1b c0       	rjmp	.+54     	; 0x1784 <GPIO_readPin+0x126>
            }
            else{
                return 0;
    174e:	1b 82       	std	Y+3, r1	; 0x03
    1750:	19 c0       	rjmp	.+50     	; 0x1784 <GPIO_readPin+0x126>
            }
            break;
        case PORTD_ID:

            if(BIT_IS_SET(PIND, pin_num)){
    1752:	e0 e3       	ldi	r30, 0x30	; 48
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a9 01       	movw	r20, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <GPIO_readPin+0x10c>
    1766:	55 95       	asr	r21
    1768:	47 95       	ror	r20
    176a:	8a 95       	dec	r24
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <GPIO_readPin+0x108>
    176e:	ca 01       	movw	r24, r20
    1770:	81 70       	andi	r24, 0x01	; 1
    1772:	90 70       	andi	r25, 0x00	; 0
    1774:	88 23       	and	r24, r24
    1776:	19 f0       	breq	.+6      	; 0x177e <GPIO_readPin+0x120>
                return 1;
    1778:	51 e0       	ldi	r21, 0x01	; 1
    177a:	5b 83       	std	Y+3, r21	; 0x03
    177c:	03 c0       	rjmp	.+6      	; 0x1784 <GPIO_readPin+0x126>
            }
            else{
                return 0;
    177e:	1b 82       	std	Y+3, r1	; 0x03
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <GPIO_readPin+0x126>
            }
            break;
        }
    }
    return '\0';
    1782:	1b 82       	std	Y+3, r1	; 0x03
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * PORT_INPUT = 0x00, PORT_OUTPUT = 0xFF
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <GPIO_setupPortDirection+0x6>
    179c:	00 d0       	rcall	.+0      	; 0x179e <GPIO_setupPortDirection+0x8>
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS){}
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	85 30       	cpi	r24, 0x05	; 5
    17aa:	90 f5       	brcc	.+100    	; 0x1810 <GPIO_setupPortDirection+0x7a>
    else{
        switch (port_num)
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	3c 83       	std	Y+4, r19	; 0x04
    17b4:	2b 83       	std	Y+3, r18	; 0x03
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	91 05       	cpc	r25, r1
    17be:	d1 f0       	breq	.+52     	; 0x17f4 <GPIO_setupPortDirection+0x5e>
    17c0:	2b 81       	ldd	r18, Y+3	; 0x03
    17c2:	3c 81       	ldd	r19, Y+4	; 0x04
    17c4:	22 30       	cpi	r18, 0x02	; 2
    17c6:	31 05       	cpc	r19, r1
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <GPIO_setupPortDirection+0x3e>
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	61 f0       	breq	.+24     	; 0x17ea <GPIO_setupPortDirection+0x54>
    17d2:	1e c0       	rjmp	.+60     	; 0x1810 <GPIO_setupPortDirection+0x7a>
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	31 05       	cpc	r19, r1
    17dc:	81 f0       	breq	.+32     	; 0x17fe <GPIO_setupPortDirection+0x68>
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	83 30       	cpi	r24, 0x03	; 3
    17e4:	91 05       	cpc	r25, r1
    17e6:	81 f0       	breq	.+32     	; 0x1808 <GPIO_setupPortDirection+0x72>
    17e8:	13 c0       	rjmp	.+38     	; 0x1810 <GPIO_setupPortDirection+0x7a>
        {
        case PORTA_ID:
            DDRA = direction;
    17ea:	ea e3       	ldi	r30, 0x3A	; 58
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	80 83       	st	Z, r24
    17f2:	0e c0       	rjmp	.+28     	; 0x1810 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTB_ID:
            DDRB = direction;
    17f4:	e7 e3       	ldi	r30, 0x37	; 55
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	80 83       	st	Z, r24
    17fc:	09 c0       	rjmp	.+18     	; 0x1810 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTC_ID:
            DDRC = direction;
    17fe:	e4 e3       	ldi	r30, 0x34	; 52
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	80 83       	st	Z, r24
    1806:	04 c0       	rjmp	.+8      	; 0x1810 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTD_ID:
            DDRD = direction;
    1808:	e1 e3       	ldi	r30, 0x31	; 49
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	80 83       	st	Z, r24
            break;
        }
    }
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value){
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <GPIO_writePort+0x6>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <GPIO_writePort+0x8>
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS){}
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	85 30       	cpi	r24, 0x05	; 5
    1832:	90 f5       	brcc	.+100    	; 0x1898 <GPIO_writePort+0x7a>
    else{
        switch (port_num)
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3c 83       	std	Y+4, r19	; 0x04
    183c:	2b 83       	std	Y+3, r18	; 0x03
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	81 30       	cpi	r24, 0x01	; 1
    1844:	91 05       	cpc	r25, r1
    1846:	d1 f0       	breq	.+52     	; 0x187c <GPIO_writePort+0x5e>
    1848:	2b 81       	ldd	r18, Y+3	; 0x03
    184a:	3c 81       	ldd	r19, Y+4	; 0x04
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	2c f4       	brge	.+10     	; 0x185c <GPIO_writePort+0x3e>
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	61 f0       	breq	.+24     	; 0x1872 <GPIO_writePort+0x54>
    185a:	1e c0       	rjmp	.+60     	; 0x1898 <GPIO_writePort+0x7a>
    185c:	2b 81       	ldd	r18, Y+3	; 0x03
    185e:	3c 81       	ldd	r19, Y+4	; 0x04
    1860:	22 30       	cpi	r18, 0x02	; 2
    1862:	31 05       	cpc	r19, r1
    1864:	81 f0       	breq	.+32     	; 0x1886 <GPIO_writePort+0x68>
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	83 30       	cpi	r24, 0x03	; 3
    186c:	91 05       	cpc	r25, r1
    186e:	81 f0       	breq	.+32     	; 0x1890 <GPIO_writePort+0x72>
    1870:	13 c0       	rjmp	.+38     	; 0x1898 <GPIO_writePort+0x7a>
        {
        case PORTA_ID:
            PORTA = value;
    1872:	eb e3       	ldi	r30, 0x3B	; 59
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	80 83       	st	Z, r24
    187a:	0e c0       	rjmp	.+28     	; 0x1898 <GPIO_writePort+0x7a>
            break;
        case PORTB_ID:
            PORTB = value;
    187c:	e8 e3       	ldi	r30, 0x38	; 56
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	80 83       	st	Z, r24
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <GPIO_writePort+0x7a>
            break;
        case PORTC_ID:
            PORTC = value;
    1886:	e5 e3       	ldi	r30, 0x35	; 53
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	80 83       	st	Z, r24
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <GPIO_writePort+0x7a>
            break;
        case PORTD_ID:
            PORTD = value;
    1890:	e2 e3       	ldi	r30, 0x32	; 50
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	80 83       	st	Z, r24
            break;
        }
    }

}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <GPIO_readPort+0x6>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <GPIO_readPort+0x8>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	89 83       	std	Y+1, r24	; 0x01
    if(port_num>NUM_OF_PORTS){
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	85 30       	cpi	r24, 0x05	; 5
    18b8:	98 f5       	brcc	.+102    	; 0x1920 <GPIO_readPort+0x7a>
    }
    else{
        switch (port_num)
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	3c 83       	std	Y+4, r19	; 0x04
    18c2:	2b 83       	std	Y+3, r18	; 0x03
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	91 05       	cpc	r25, r1
    18cc:	d1 f0       	breq	.+52     	; 0x1902 <GPIO_readPort+0x5c>
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	22 30       	cpi	r18, 0x02	; 2
    18d4:	31 05       	cpc	r19, r1
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <GPIO_readPort+0x3c>
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	61 f0       	breq	.+24     	; 0x18f8 <GPIO_readPort+0x52>
    18e0:	1f c0       	rjmp	.+62     	; 0x1920 <GPIO_readPort+0x7a>
    18e2:	2b 81       	ldd	r18, Y+3	; 0x03
    18e4:	3c 81       	ldd	r19, Y+4	; 0x04
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	81 f0       	breq	.+32     	; 0x190c <GPIO_readPort+0x66>
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	91 05       	cpc	r25, r1
    18f4:	81 f0       	breq	.+32     	; 0x1916 <GPIO_readPort+0x70>
    18f6:	14 c0       	rjmp	.+40     	; 0x1920 <GPIO_readPort+0x7a>
        {
        case PORTA_ID:
            return PINA;
    18f8:	e9 e3       	ldi	r30, 0x39	; 57
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	90 81       	ld	r25, Z
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	10 c0       	rjmp	.+32     	; 0x1922 <GPIO_readPort+0x7c>
            break;
        case PORTB_ID:
            return PINB;
    1902:	e6 e3       	ldi	r30, 0x36	; 54
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	20 81       	ld	r18, Z
    1908:	2a 83       	std	Y+2, r18	; 0x02
    190a:	0b c0       	rjmp	.+22     	; 0x1922 <GPIO_readPort+0x7c>
            break;
        case PORTC_ID:
            return PINC;
    190c:	e3 e3       	ldi	r30, 0x33	; 51
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	30 81       	ld	r19, Z
    1912:	3a 83       	std	Y+2, r19	; 0x02
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <GPIO_readPort+0x7c>
            break;
        case PORTD_ID:
            return PIND;
    1916:	e0 e3       	ldi	r30, 0x30	; 48
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	8a 83       	std	Y+2, r24	; 0x02
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <GPIO_readPort+0x7c>
            break;
        }
    }
    return '\0';
    1920:	1a 82       	std	Y+2, r1	; 0x02
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <__vector_9>:
static volatile void (*g_timer2CallBackPtr)(void) = NULL_PTR;

/*******************************************************************************
 *                      Interrupt handler                                      *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    1932:	1f 92       	push	r1
    1934:	0f 92       	push	r0
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	0f 92       	push	r0
    193a:	11 24       	eor	r1, r1
    193c:	2f 93       	push	r18
    193e:	3f 93       	push	r19
    1940:	4f 93       	push	r20
    1942:	5f 93       	push	r21
    1944:	6f 93       	push	r22
    1946:	7f 93       	push	r23
    1948:	8f 93       	push	r24
    194a:	9f 93       	push	r25
    194c:	af 93       	push	r26
    194e:	bf 93       	push	r27
    1950:	ef 93       	push	r30
    1952:	ff 93       	push	r31
    1954:	df 93       	push	r29
    1956:	cf 93       	push	r28
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    195c:	80 91 70 00 	lds	r24, 0x0070
    1960:	90 91 71 00 	lds	r25, 0x0071
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	29 f0       	breq	.+10     	; 0x1972 <__vector_9+0x40>
		(*g_timer0CallBackPtr)();
    1968:	e0 91 70 00 	lds	r30, 0x0070
    196c:	f0 91 71 00 	lds	r31, 0x0071
    1970:	09 95       	icall
	}
}
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	ff 91       	pop	r31
    1978:	ef 91       	pop	r30
    197a:	bf 91       	pop	r27
    197c:	af 91       	pop	r26
    197e:	9f 91       	pop	r25
    1980:	8f 91       	pop	r24
    1982:	7f 91       	pop	r23
    1984:	6f 91       	pop	r22
    1986:	5f 91       	pop	r21
    1988:	4f 91       	pop	r20
    198a:	3f 91       	pop	r19
    198c:	2f 91       	pop	r18
    198e:	0f 90       	pop	r0
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	0f 90       	pop	r0
    1994:	1f 90       	pop	r1
    1996:	18 95       	reti

00001998 <__vector_19>:
ISR(TIMER0_COMP_vect){
    1998:	1f 92       	push	r1
    199a:	0f 92       	push	r0
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	0f 92       	push	r0
    19a0:	11 24       	eor	r1, r1
    19a2:	2f 93       	push	r18
    19a4:	3f 93       	push	r19
    19a6:	4f 93       	push	r20
    19a8:	5f 93       	push	r21
    19aa:	6f 93       	push	r22
    19ac:	7f 93       	push	r23
    19ae:	8f 93       	push	r24
    19b0:	9f 93       	push	r25
    19b2:	af 93       	push	r26
    19b4:	bf 93       	push	r27
    19b6:	ef 93       	push	r30
    19b8:	ff 93       	push	r31
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
    19c2:	80 91 70 00 	lds	r24, 0x0070
    19c6:	90 91 71 00 	lds	r25, 0x0071
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	29 f0       	breq	.+10     	; 0x19d8 <__vector_19+0x40>
		(*g_timer0CallBackPtr)();
    19ce:	e0 91 70 00 	lds	r30, 0x0070
    19d2:	f0 91 71 00 	lds	r31, 0x0071
    19d6:	09 95       	icall
	}
}
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	ff 91       	pop	r31
    19de:	ef 91       	pop	r30
    19e0:	bf 91       	pop	r27
    19e2:	af 91       	pop	r26
    19e4:	9f 91       	pop	r25
    19e6:	8f 91       	pop	r24
    19e8:	7f 91       	pop	r23
    19ea:	6f 91       	pop	r22
    19ec:	5f 91       	pop	r21
    19ee:	4f 91       	pop	r20
    19f0:	3f 91       	pop	r19
    19f2:	2f 91       	pop	r18
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	0f 90       	pop	r0
    19fa:	1f 90       	pop	r1
    19fc:	18 95       	reti

000019fe <TIMERS_init>:
 * 	4. Set timer compare value
 * 	Function Input: timer_no => select between timers0,1,2
 * 					Timer configType => setup timer configuration by passing a structure's address
 * 	Note that Timer/Counter1 and Timer/Counter0 share the same prescaler
 */
void TIMERS_init(const TIMERS_ConfigType * Timer_Config_Ptr, TIMERS_Select timer_no){
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	00 d0       	rcall	.+0      	; 0x1a04 <TIMERS_init+0x6>
    1a04:	00 d0       	rcall	.+0      	; 0x1a06 <TIMERS_init+0x8>
    1a06:	0f 92       	push	r0
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_no)
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <TIMERS_init+0x20>
    1a1c:	45 c0       	rjmp	.+138    	; 0x1aa8 <TIMERS_init+0xaa>
		 * BIT3,6 WGM01:0 => CTC mode => 1,0
		 * Bit 5:4 – COM01:0 => 0,0 non_PWM
		 * Bit 2:0 – CS02:0: Clock Select "prescalers"
		 */
		/*set timer0 to run on the required clock select*/
		TCCR0 = (0x07 & Timer_Config_Ptr->clock);
    1a1e:	a3 e5       	ldi	r26, 0x53	; 83
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e9 81       	ldd	r30, Y+1	; 0x01
    1a24:	fa 81       	ldd	r31, Y+2	; 0x02
    1a26:	80 81       	ld	r24, Z
    1a28:	87 70       	andi	r24, 0x07	; 7
    1a2a:	8c 93       	st	X, r24
		/*set timer0 initial value*/
		TCNT0 = Timer_Config_Ptr->timer_init_value;
    1a2c:	a2 e5       	ldi	r26, 0x52	; 82
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e9 81       	ldd	r30, Y+1	; 0x01
    1a32:	fa 81       	ldd	r31, Y+2	; 0x02
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	8c 93       	st	X, r24
		switch(Timer_Config_Ptr->mode)
    1a3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a3e:	81 81       	ldd	r24, Z+1	; 0x01
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	3d 83       	std	Y+5, r19	; 0x05
    1a46:	2c 83       	std	Y+4, r18	; 0x04
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	31 f0       	breq	.+12     	; 0x1a5c <TIMERS_init+0x5e>
    1a50:	2c 81       	ldd	r18, Y+4	; 0x04
    1a52:	3d 81       	ldd	r19, Y+5	; 0x05
    1a54:	21 30       	cpi	r18, 0x01	; 1
    1a56:	31 05       	cpc	r19, r1
    1a58:	89 f0       	breq	.+34     	; 0x1a7c <TIMERS_init+0x7e>
    1a5a:	26 c0       	rjmp	.+76     	; 0x1aa8 <TIMERS_init+0xaa>
		{
		case OVERFLOW_MODE:
			/*set pin7 FOC0*/
			TCCR0 |= (1<<FOC0);
    1a5c:	a3 e5       	ldi	r26, 0x53	; 83
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e3 e5       	ldi	r30, 0x53	; 83
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 68       	ori	r24, 0x80	; 128
    1a68:	8c 93       	st	X, r24
//			TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
			/*enable timer overflow interrupt and disable CTC interrupt*/
			TIMSK = (TIMSK & 0xFC) | (1<<TOIE0);
    1a6a:	a9 e5       	ldi	r26, 0x59	; 89
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e9 e5       	ldi	r30, 0x59	; 89
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	8c 7f       	andi	r24, 0xFC	; 252
    1a76:	81 60       	ori	r24, 0x01	; 1
    1a78:	8c 93       	st	X, r24
    1a7a:	16 c0       	rjmp	.+44     	; 0x1aa8 <TIMERS_init+0xaa>
			break;
		case CTC_MODE:
			/*assign a compare match value to Output Compare Register – OCR0*/
			OCR0 = Timer_Config_Ptr->timer_Compare_value;
    1a7c:	ac e5       	ldi	r26, 0x5C	; 92
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e9 81       	ldd	r30, Y+1	; 0x01
    1a82:	fa 81       	ldd	r31, Y+2	; 0x02
    1a84:	84 81       	ldd	r24, Z+4	; 0x04
    1a86:	95 81       	ldd	r25, Z+5	; 0x05
    1a88:	8c 93       	st	X, r24
			/*set timer0 to operate on CTC mode*/
			TCCR0 |= (1<<FOC0) | (1<<WGM01);
    1a8a:	a3 e5       	ldi	r26, 0x53	; 83
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e3 e5       	ldi	r30, 0x53	; 83
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	88 68       	ori	r24, 0x88	; 136
    1a96:	8c 93       	st	X, r24
			/*disable overflow interrupt and enable CTC interrupt*/
			TIMSK = (TIMSK & 0xFC) | (1<<OCIE0);
    1a98:	a9 e5       	ldi	r26, 0x59	; 89
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e9 e5       	ldi	r30, 0x59	; 89
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8c 7f       	andi	r24, 0xFC	; 252
    1aa4:	82 60       	ori	r24, 0x02	; 2
    1aa6:	8c 93       	st	X, r24
	case TIMER1_ID:
		break;
	case TIMER2_ID:
		break;
	}
}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <TIMERS_setCallBack>:

/*
 * Description: Function to set the Call Back function address for each timer.
 */
void TIMERS_setCallBack(void(*a_ptr)(void), TIMERS_Select timer_no){
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <TIMERS_setCallBack+0x6>
    1abe:	0f 92       	push	r0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	6b 83       	std	Y+3, r22	; 0x03
	if (timer_no == TIMER0_ID)
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	88 23       	and	r24, r24
    1ace:	39 f4       	brne	.+14     	; 0x1ade <TIMERS_setCallBack+0x26>
		g_timer0CallBackPtr = a_ptr;
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad4:	90 93 71 00 	sts	0x0071, r25
    1ad8:	80 93 70 00 	sts	0x0070, r24
    1adc:	13 c0       	rjmp	.+38     	; 0x1b04 <TIMERS_setCallBack+0x4c>
	else if(timer_no == TIMER1_ID)
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	39 f4       	brne	.+14     	; 0x1af2 <TIMERS_setCallBack+0x3a>
		g_timer1CallBackPtr = a_ptr;
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae8:	90 93 73 00 	sts	0x0073, r25
    1aec:	80 93 72 00 	sts	0x0072, r24
    1af0:	09 c0       	rjmp	.+18     	; 0x1b04 <TIMERS_setCallBack+0x4c>
	else if(timer_no == TIMER2_ID)
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	82 30       	cpi	r24, 0x02	; 2
    1af6:	31 f4       	brne	.+12     	; 0x1b04 <TIMERS_setCallBack+0x4c>
		g_timer2CallBackPtr = a_ptr;
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	90 93 75 00 	sts	0x0075, r25
    1b00:	80 93 74 00 	sts	0x0074, r24
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <clearTimerValue>:

/*
 * Description: Function to clear a timer Value to start count from ZERO
 */
void clearTimerValue(TIMERS_Select timer_no){
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	0f 92       	push	r0
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	89 83       	std	Y+1, r24	; 0x01
	if (timer_no == TIMER0_ID)
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	88 23       	and	r24, r24
    1b20:	21 f4       	brne	.+8      	; 0x1b2a <clearTimerValue+0x1a>
		TCNT0 = 0;
    1b22:	e2 e5       	ldi	r30, 0x52	; 82
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	10 82       	st	Z, r1
    1b28:	0e c0       	rjmp	.+28     	; 0x1b46 <clearTimerValue+0x36>
	else if(timer_no == TIMER1_ID)
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	81 30       	cpi	r24, 0x01	; 1
    1b2e:	29 f4       	brne	.+10     	; 0x1b3a <clearTimerValue+0x2a>
		TCNT1 = 0;
    1b30:	ec e4       	ldi	r30, 0x4C	; 76
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	11 82       	std	Z+1, r1	; 0x01
    1b36:	10 82       	st	Z, r1
    1b38:	06 c0       	rjmp	.+12     	; 0x1b46 <clearTimerValue+0x36>
	else if(timer_no == TIMER2_ID)
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	82 30       	cpi	r24, 0x02	; 2
    1b3e:	19 f4       	brne	.+6      	; 0x1b46 <clearTimerValue+0x36>
		TCNT2 = 0;
    1b40:	e4 e4       	ldi	r30, 0x44	; 68
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	10 82       	st	Z, r1

}
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <TIMERS_DeInit>:

/*
 * Description: Function to disable a timer
 */
void TIMERS_DeInit(TIMERS_Select timer_no){
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	0f 92       	push	r0
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	89 83       	std	Y+1, r24	; 0x01
	if (timer_no == TIMER0_ID){
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	88 23       	and	r24, r24
    1b5e:	59 f4       	brne	.+22     	; 0x1b76 <TIMERS_DeInit+0x28>
		TCCR0 = 0;
    1b60:	e3 e5       	ldi	r30, 0x53	; 83
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	10 82       	st	Z, r1
		TIMSK &= 0xFC;
    1b66:	a9 e5       	ldi	r26, 0x59	; 89
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e9 e5       	ldi	r30, 0x59	; 89
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	8c 7f       	andi	r24, 0xFC	; 252
    1b72:	8c 93       	st	X, r24
    1b74:	1e c0       	rjmp	.+60     	; 0x1bb2 <TIMERS_DeInit+0x64>
	}
	else if(timer_no == TIMER1_ID){
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	71 f4       	brne	.+28     	; 0x1b98 <TIMERS_DeInit+0x4a>
		TCCR1A = 0;
    1b7c:	ef e4       	ldi	r30, 0x4F	; 79
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	10 82       	st	Z, r1
		TCCR1B = 0;
    1b82:	ee e4       	ldi	r30, 0x4E	; 78
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	10 82       	st	Z, r1
		TIMSK &= 0xC3;
    1b88:	a9 e5       	ldi	r26, 0x59	; 89
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e9 e5       	ldi	r30, 0x59	; 89
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	83 7c       	andi	r24, 0xC3	; 195
    1b94:	8c 93       	st	X, r24
    1b96:	0d c0       	rjmp	.+26     	; 0x1bb2 <TIMERS_DeInit+0x64>
	}
	else if(timer_no == TIMER2_ID)
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	82 30       	cpi	r24, 0x02	; 2
    1b9c:	51 f4       	brne	.+20     	; 0x1bb2 <TIMERS_DeInit+0x64>
	{
		TCCR2 = 0;
    1b9e:	e5 e4       	ldi	r30, 0x45	; 69
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	10 82       	st	Z, r1
		TIMSK &= 0x3F;
    1ba4:	a9 e5       	ldi	r26, 0x59	; 89
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e9 e5       	ldi	r30, 0x59	; 89
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	8f 73       	andi	r24, 0x3F	; 63
    1bb0:	8c 93       	st	X, r24
	}

}
    1bb2:	0f 90       	pop	r0
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <setTimerValue>:


/*
 * Description: Function to set initial value for TIMER/COUNTER Register
 */
void setTimerValue(TIMERS_Select timer_no, uint16 a_value){
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <setTimerValue+0x6>
    1bc0:	0f 92       	push	r0
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	7b 83       	std	Y+3, r23	; 0x03
    1bca:	6a 83       	std	Y+2, r22	; 0x02
	if (timer_no == TIMER0_ID)
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	88 23       	and	r24, r24
    1bd0:	29 f4       	brne	.+10     	; 0x1bdc <setTimerValue+0x22>
		TCNT0 = a_value;
    1bd2:	e2 e5       	ldi	r30, 0x52	; 82
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	80 83       	st	Z, r24
    1bda:	11 c0       	rjmp	.+34     	; 0x1bfe <setTimerValue+0x44>
	else if(timer_no == TIMER1_ID)
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	39 f4       	brne	.+14     	; 0x1bf0 <setTimerValue+0x36>
		TCNT1 = a_value;
    1be2:	ec e4       	ldi	r30, 0x4C	; 76
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bea:	91 83       	std	Z+1, r25	; 0x01
    1bec:	80 83       	st	Z, r24
    1bee:	07 c0       	rjmp	.+14     	; 0x1bfe <setTimerValue+0x44>
	else if(timer_no == TIMER2_ID)
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	82 30       	cpi	r24, 0x02	; 2
    1bf4:	21 f4       	brne	.+8      	; 0x1bfe <setTimerValue+0x44>
		TCNT2 = a_value;
    1bf6:	e4 e4       	ldi	r30, 0x44	; 68
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	80 83       	st	Z, r24
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <TWI_init>:
#include"twi.h"
#include<avr/io.h>
#include"common_macros.h"


void TWI_init(void){
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62



    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    1c12:	e0 e2       	ldi	r30, 0x20	; 32
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	80 83       	st	Z, r24
	/*TWSR
	 * TWI Status Register – TWSR
	 *7     6    5 	   4   3   2   1    0
	 *TWS7 TWS6 TWS5 TWS4 TWS3 – TWPS1 TWPS0
	 */
	TWSR = 0x00; /*TWI Bit Rate Prescaler*/
    1c1a:	e1 e2       	ldi	r30, 0x21	; 33
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	10 82       	st	Z, r1
	/*TWCR
	 * TWI Control Register – TWCR
	 *   7    6 	5 	  4 	3 	2	 1	 0
	 * TWINT TWEA TWSTA TWSTO TWWC TWEN  –  TWIE
	 */
	TWCR = (1<<TWEN); /*enable TWI*/
    1c20:	e6 e5       	ldi	r30, 0x56	; 86
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	84 e0       	ldi	r24, 0x04	; 4
    1c26:	80 83       	st	Z, r24

	/*TWAR
	 * TWI (Slave) Address Register – TWAR
	 */
	TWAR = 0x02; /*set my address as address 1 (0b00000010)*/
    1c28:	e2 e2       	ldi	r30, 0x22	; 34
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	80 83       	st	Z, r24

 }
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <TWI_start>:
void TWI_start(void)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) | (1<<TWEN) |  (1<<TWSTA);
    1c3e:	e6 e5       	ldi	r30, 0x56	; 86
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	84 ea       	ldi	r24, 0xA4	; 164
    1c44:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c46:	e6 e5       	ldi	r30, 0x56	; 86
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	88 23       	and	r24, r24
    1c4e:	dc f7       	brge	.-10     	; 0x1c46 <TWI_start+0x10>

}
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <TWI_stop>:
void TWI_stop(void)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1<<TWINT) | (1<<TWEN) |  (1<<TWSTO);
    1c5e:	e6 e5       	ldi	r30, 0x56	; 86
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	84 e9       	ldi	r24, 0x94	; 148
    1c64:	80 83       	st	Z, r24
}
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <TWI_writeByte>:
void TWI_writeByte(uint8 data){
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	0f 92       	push	r0
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	89 83       	std	Y+1, r24	; 0x01

    /* Put data On TWI data Register */
    TWDR = data;
    1c78:	e3 e2       	ldi	r30, 0x23	; 35
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1c80:	e6 e5       	ldi	r30, 0x56	; 86
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	84 e8       	ldi	r24, 0x84	; 132
    1c86:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c88:	e6 e5       	ldi	r30, 0x56	; 86
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	88 23       	and	r24, r24
    1c90:	dc f7       	brge	.-10     	; 0x1c88 <TWI_writeByte+0x1c>
}
    1c92:	0f 90       	pop	r0
    1c94:	cf 91       	pop	r28
    1c96:	df 91       	pop	r29
    1c98:	08 95       	ret

00001c9a <TWI_readByteWithACK>:
uint8 TWI_readByteWithACK(void){
    1c9a:	df 93       	push	r29
    1c9c:	cf 93       	push	r28
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 * Enable ACK bit TWEA = 1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1<< TWEA);
    1ca2:	e6 e5       	ldi	r30, 0x56	; 86
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	84 ec       	ldi	r24, 0xC4	; 196
    1ca8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1caa:	e6 e5       	ldi	r30, 0x56	; 86
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	88 23       	and	r24, r24
    1cb2:	dc f7       	brge	.-10     	; 0x1caa <TWI_readByteWithACK+0x10>
    /* Read Data */
	return TWDR;
    1cb4:	e3 e2       	ldi	r30, 0x23	; 35
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z

}
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	08 95       	ret

00001cc0 <TWI_readByteWithNACK>:
uint8 TWI_readByteWithNACK(void)
{
    1cc0:	df 93       	push	r29
    1cc2:	cf 93       	push	r28
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    1cc8:	e6 e5       	ldi	r30, 0x56	; 86
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	84 e8       	ldi	r24, 0x84	; 132
    1cce:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1cd0:	e6 e5       	ldi	r30, 0x56	; 86
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 23       	and	r24, r24
    1cd8:	dc f7       	brge	.-10     	; 0x1cd0 <TWI_readByteWithNACK+0x10>
    /* Read Data */
	return TWDR;
    1cda:	e3 e2       	ldi	r30, 0x23	; 35
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z

}
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <TWI_getStatus>:
uint8 TWI_getStatus(void){
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = (TWSR & 0xF8);
    1cf0:	e1 e2       	ldi	r30, 0x21	; 33
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	88 7f       	andi	r24, 0xF8	; 248
    1cf8:	89 83       	std	Y+1, r24	; 0x01

	return status;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfc:	0f 90       	pop	r0
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate){
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <UART_init+0x6>
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <UART_init+0x8>
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <UART_init+0xa>
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	6b 83       	std	Y+3, r22	; 0x03
    1d14:	7c 83       	std	Y+4, r23	; 0x04
    1d16:	8d 83       	std	Y+5, r24	; 0x05
    1d18:	9e 83       	std	Y+6, r25	; 0x06
	uint16 a_ubrrValue = 0; /*to select the baud rate*/
    1d1a:	1a 82       	std	Y+2, r1	; 0x02
    1d1c:	19 82       	std	Y+1, r1	; 0x01
	 * 7    6   5   4   3  2   1   0
	 * RXC TXC UDRE FE DOR PE U2X MPCM
	 * most of those bits are flags
	 **********************************************************************/
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1d1e:	eb e2       	ldi	r30, 0x2B	; 43
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1d26:	ea e2       	ldi	r30, 0x2A	; 42
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	88 e1       	ldi	r24, 0x18	; 24
    1d2c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ1) |(1<<UCSZ0);
    1d2e:	e0 e4       	ldi	r30, 0x40	; 64
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	86 e8       	ldi	r24, 0x86	; 134
    1d34:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	a_ubrrValue = F_CPU/16/baud_rate-1;
    1d36:	84 e2       	ldi	r24, 0x24	; 36
    1d38:	94 ef       	ldi	r25, 0xF4	; 244
    1d3a:	a0 e0       	ldi	r26, 0x00	; 0
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d40:	3c 81       	ldd	r19, Y+4	; 0x04
    1d42:	4d 81       	ldd	r20, Y+5	; 0x05
    1d44:	5e 81       	ldd	r21, Y+6	; 0x06
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__udivmodsi4>
    1d4e:	da 01       	movw	r26, r20
    1d50:	c9 01       	movw	r24, r18
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	9a 83       	std	Y+2, r25	; 0x02
    1d56:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (unsigned char)(a_ubrrValue>>8);
    1d58:	e0 e4       	ldi	r30, 0x40	; 64
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	89 2f       	mov	r24, r25
    1d62:	99 27       	eor	r25, r25
    1d64:	80 83       	st	Z, r24
	UBRRL = (unsigned char)a_ubrrValue;
    1d66:	e9 e2       	ldi	r30, 0x29	; 41
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	80 83       	st	Z, r24

}
    1d6e:	26 96       	adiw	r28, 0x06	; 6
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	0f 92       	push	r0
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(BIT_IS_CLEAR(UCSRA, UDRE));
    1d8c:	eb e2       	ldi	r30, 0x2B	; 43
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	88 2f       	mov	r24, r24
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	80 72       	andi	r24, 0x20	; 32
    1d98:	90 70       	andi	r25, 0x00	; 0
    1d9a:	00 97       	sbiw	r24, 0x00	; 0
    1d9c:	b9 f3       	breq	.-18     	; 0x1d8c <UART_sendByte+0xc>
	/*another method found in ATMEGA16 data sheet example*/
	/*	while ( !( UCSRA & (1<<UDRE)) ); */
	/* Put data into buffer, sends the data */
	UDR = data;
    1d9e:	ec e2       	ldi	r30, 0x2C	; 44
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	80 83       	st	Z, r24
}
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void){
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	/*busy loop*/
	while ( !(UCSRA & (1<<RXC)) )
    1db6:	eb e2       	ldi	r30, 0x2B	; 43
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	88 23       	and	r24, r24
    1dbe:	dc f7       	brge	.-10     	; 0x1db6 <UART_recieveByte+0x8>
		;
	/* Get and return received data from buffer */
	return UDR;
    1dc0:	ec e2       	ldi	r30, 0x2C	; 44
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z

}
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <UART_sendString+0x6>
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01

}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str){
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <UART_receiveString+0x6>
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	9a 83       	std	Y+2, r25	; 0x02
    1df0:	89 83       	std	Y+1, r24	; 0x01
	/*Receive until # */
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <__udivmodsi4>:
    1dfc:	a1 e2       	ldi	r26, 0x21	; 33
    1dfe:	1a 2e       	mov	r1, r26
    1e00:	aa 1b       	sub	r26, r26
    1e02:	bb 1b       	sub	r27, r27
    1e04:	fd 01       	movw	r30, r26
    1e06:	0d c0       	rjmp	.+26     	; 0x1e22 <__udivmodsi4_ep>

00001e08 <__udivmodsi4_loop>:
    1e08:	aa 1f       	adc	r26, r26
    1e0a:	bb 1f       	adc	r27, r27
    1e0c:	ee 1f       	adc	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	a2 17       	cp	r26, r18
    1e12:	b3 07       	cpc	r27, r19
    1e14:	e4 07       	cpc	r30, r20
    1e16:	f5 07       	cpc	r31, r21
    1e18:	20 f0       	brcs	.+8      	; 0x1e22 <__udivmodsi4_ep>
    1e1a:	a2 1b       	sub	r26, r18
    1e1c:	b3 0b       	sbc	r27, r19
    1e1e:	e4 0b       	sbc	r30, r20
    1e20:	f5 0b       	sbc	r31, r21

00001e22 <__udivmodsi4_ep>:
    1e22:	66 1f       	adc	r22, r22
    1e24:	77 1f       	adc	r23, r23
    1e26:	88 1f       	adc	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	1a 94       	dec	r1
    1e2c:	69 f7       	brne	.-38     	; 0x1e08 <__udivmodsi4_loop>
    1e2e:	60 95       	com	r22
    1e30:	70 95       	com	r23
    1e32:	80 95       	com	r24
    1e34:	90 95       	com	r25
    1e36:	9b 01       	movw	r18, r22
    1e38:	ac 01       	movw	r20, r24
    1e3a:	bd 01       	movw	r22, r26
    1e3c:	cf 01       	movw	r24, r30
    1e3e:	08 95       	ret

00001e40 <__prologue_saves__>:
    1e40:	2f 92       	push	r2
    1e42:	3f 92       	push	r3
    1e44:	4f 92       	push	r4
    1e46:	5f 92       	push	r5
    1e48:	6f 92       	push	r6
    1e4a:	7f 92       	push	r7
    1e4c:	8f 92       	push	r8
    1e4e:	9f 92       	push	r9
    1e50:	af 92       	push	r10
    1e52:	bf 92       	push	r11
    1e54:	cf 92       	push	r12
    1e56:	df 92       	push	r13
    1e58:	ef 92       	push	r14
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	ca 1b       	sub	r28, r26
    1e6a:	db 0b       	sbc	r29, r27
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	09 94       	ijmp

00001e78 <__epilogue_restores__>:
    1e78:	2a 88       	ldd	r2, Y+18	; 0x12
    1e7a:	39 88       	ldd	r3, Y+17	; 0x11
    1e7c:	48 88       	ldd	r4, Y+16	; 0x10
    1e7e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e80:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e82:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e84:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e86:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e88:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e8a:	b9 84       	ldd	r11, Y+9	; 0x09
    1e8c:	c8 84       	ldd	r12, Y+8	; 0x08
    1e8e:	df 80       	ldd	r13, Y+7	; 0x07
    1e90:	ee 80       	ldd	r14, Y+6	; 0x06
    1e92:	fd 80       	ldd	r15, Y+5	; 0x05
    1e94:	0c 81       	ldd	r16, Y+4	; 0x04
    1e96:	1b 81       	ldd	r17, Y+3	; 0x03
    1e98:	aa 81       	ldd	r26, Y+2	; 0x02
    1e9a:	b9 81       	ldd	r27, Y+1	; 0x01
    1e9c:	ce 0f       	add	r28, r30
    1e9e:	d1 1d       	adc	r29, r1
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	ed 01       	movw	r28, r26
    1eac:	08 95       	ret

00001eae <_exit>:
    1eae:	f8 94       	cli

00001eb0 <__stop_program>:
    1eb0:	ff cf       	rjmp	.-2      	; 0x1eb0 <__stop_program>
