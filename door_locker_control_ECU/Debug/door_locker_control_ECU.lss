
door_locker_control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b5e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800060  00800060  00000bd2  2**0
                  ALLOC
  2 .stab         000011dc  00000000  00000000  00000bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d40  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
 *                      Global Variables                                       *
 *******************************************************************************/
uint8 password[PASSCODE_SIZE] = {'\0'};


int main(void){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <main+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	uint8 receviedByte, passwordSettingState;
	UART_init(9600);
  86:	60 e8       	ldi	r22, 0x80	; 128
  88:	75 e2       	ldi	r23, 0x25	; 37
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <UART_init>


	while(1)
	{
		/*receive byte from HMI ECU*/
		receviedByte = UART_recieveByte();
  92:	0e 94 64 05 	call	0xac8	; 0xac8 <UART_recieveByte>
  96:	8a 83       	std	Y+2, r24	; 0x02

		/*switch case on received byte*/
		switch(receviedByte)
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	88 2f       	mov	r24, r24
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	83 35       	cpi	r24, 0x53	; 83
  a0:	91 05       	cpc	r25, r1
  a2:	81 f4       	brne	.+32     	; 0xc4 <main+0x48>
		{
		case CHECK_PASSWORD_SETTING:
			/*call check password setting function*/
			passwordSettingState = check_password_setting_status();
  a4:	0e 94 65 00 	call	0xca	; 0xca <check_password_setting_status>
  a8:	89 83       	std	Y+1, r24	; 0x01
			/*if password setting state = 1 > send(set)
			 * else if = 0 > send(not set)
			 */
			if(passwordSettingState == 1){
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	21 f4       	brne	.+8      	; 0xb8 <main+0x3c>
				UART_sendByte(PASSWORD_SET);
  b0:	89 e5       	ldi	r24, 0x59	; 89
  b2:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_sendByte>
  b6:	06 c0       	rjmp	.+12     	; 0xc4 <main+0x48>
			}
			else if (passwordSettingState){
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	88 23       	and	r24, r24
  bc:	19 f0       	breq	.+6      	; 0xc4 <main+0x48>
				UART_sendByte(PASSWORD_NOT_SET);
  be:	8e e4       	ldi	r24, 0x4E	; 78
  c0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <UART_sendByte>
			/*open door for 1 minutes*/
			break;
		default:
			break;
		}
		receviedByte  = DUMMY_CHAR;
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	8a 83       	std	Y+2, r24	; 0x02
  c8:	e4 cf       	rjmp	.-56     	; 0x92 <main+0x16>

000000ca <check_password_setting_status>:
 *                    Return 0 if password is not set
 *
 *
 */
uint8 check_password_setting_status(void)
{
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	/*check EEPROM Specific Address*/
	/*if there is one => return 1; (set)
	 *if there is 0 => return 0 (not set)
	 */
	return 1; /*just in testing phase*/
  d2:	81 e0       	ldi	r24, 0x01	; 1
}
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	08 95       	ret

000000da <GPIO_setupPinDirection>:

/*
function to setup the dirction on specified pin Input/output
if pin number or port number ar invalid, function will not handle it
*/
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction){
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	00 d0       	rcall	.+0      	; 0xe0 <GPIO_setupPinDirection+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <GPIO_setupPinDirection+0x8>
  e2:	0f 92       	push	r0
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	89 83       	std	Y+1, r24	; 0x01
  ea:	6a 83       	std	Y+2, r22	; 0x02
  ec:	4b 83       	std	Y+3, r20	; 0x03
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	85 30       	cpi	r24, 0x05	; 5
  f2:	08 f0       	brcs	.+2      	; 0xf6 <GPIO_setupPinDirection+0x1c>
  f4:	e4 c0       	rjmp	.+456    	; 0x2be <GPIO_setupPinDirection+0x1e4>
  f6:	8a 81       	ldd	r24, Y+2	; 0x02
  f8:	89 30       	cpi	r24, 0x09	; 9
  fa:	08 f0       	brcs	.+2      	; 0xfe <GPIO_setupPinDirection+0x24>
  fc:	e0 c0       	rjmp	.+448    	; 0x2be <GPIO_setupPinDirection+0x1e4>

    }
    else{
        switch (port_num)
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	3d 83       	std	Y+5, r19	; 0x05
 106:	2c 83       	std	Y+4, r18	; 0x04
 108:	8c 81       	ldd	r24, Y+4	; 0x04
 10a:	9d 81       	ldd	r25, Y+5	; 0x05
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 05       	cpc	r25, r1
 110:	09 f4       	brne	.+2      	; 0x114 <GPIO_setupPinDirection+0x3a>
 112:	47 c0       	rjmp	.+142    	; 0x1a2 <GPIO_setupPinDirection+0xc8>
 114:	2c 81       	ldd	r18, Y+4	; 0x04
 116:	3d 81       	ldd	r19, Y+5	; 0x05
 118:	22 30       	cpi	r18, 0x02	; 2
 11a:	31 05       	cpc	r19, r1
 11c:	2c f4       	brge	.+10     	; 0x128 <GPIO_setupPinDirection+0x4e>
 11e:	8c 81       	ldd	r24, Y+4	; 0x04
 120:	9d 81       	ldd	r25, Y+5	; 0x05
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	71 f0       	breq	.+28     	; 0x142 <GPIO_setupPinDirection+0x68>
 126:	cb c0       	rjmp	.+406    	; 0x2be <GPIO_setupPinDirection+0x1e4>
 128:	2c 81       	ldd	r18, Y+4	; 0x04
 12a:	3d 81       	ldd	r19, Y+5	; 0x05
 12c:	22 30       	cpi	r18, 0x02	; 2
 12e:	31 05       	cpc	r19, r1
 130:	09 f4       	brne	.+2      	; 0x134 <GPIO_setupPinDirection+0x5a>
 132:	67 c0       	rjmp	.+206    	; 0x202 <GPIO_setupPinDirection+0x128>
 134:	8c 81       	ldd	r24, Y+4	; 0x04
 136:	9d 81       	ldd	r25, Y+5	; 0x05
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	91 05       	cpc	r25, r1
 13c:	09 f4       	brne	.+2      	; 0x140 <GPIO_setupPinDirection+0x66>
 13e:	91 c0       	rjmp	.+290    	; 0x262 <GPIO_setupPinDirection+0x188>
 140:	be c0       	rjmp	.+380    	; 0x2be <GPIO_setupPinDirection+0x1e4>
        {
        case PORTA_ID:
            if(PIN_OUTPUT == direction){
 142:	8b 81       	ldd	r24, Y+3	; 0x03
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	a1 f4       	brne	.+40     	; 0x170 <GPIO_setupPinDirection+0x96>
                SET_BIT(DDRA, pin_num);
 148:	aa e3       	ldi	r26, 0x3A	; 58
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	ea e3       	ldi	r30, 0x3A	; 58
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	48 2f       	mov	r20, r24
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	28 2f       	mov	r18, r24
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 2e       	mov	r0, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <GPIO_setupPinDirection+0x8c>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <GPIO_setupPinDirection+0x88>
 16a:	84 2b       	or	r24, r20
 16c:	8c 93       	st	X, r24
 16e:	a7 c0       	rjmp	.+334    	; 0x2be <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	88 23       	and	r24, r24
 174:	09 f0       	breq	.+2      	; 0x178 <GPIO_setupPinDirection+0x9e>
 176:	a3 c0       	rjmp	.+326    	; 0x2be <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRA, pin_num);
 178:	aa e3       	ldi	r26, 0x3A	; 58
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	ea e3       	ldi	r30, 0x3A	; 58
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	48 2f       	mov	r20, r24
 184:	8a 81       	ldd	r24, Y+2	; 0x02
 186:	28 2f       	mov	r18, r24
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 2e       	mov	r0, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <GPIO_setupPinDirection+0xbc>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <GPIO_setupPinDirection+0xb8>
 19a:	80 95       	com	r24
 19c:	84 23       	and	r24, r20
 19e:	8c 93       	st	X, r24
 1a0:	8e c0       	rjmp	.+284    	; 0x2be <GPIO_setupPinDirection+0x1e4>

            }
            break;
        case PORTB_ID:
            if(PIN_OUTPUT == direction){
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	a1 f4       	brne	.+40     	; 0x1d0 <GPIO_setupPinDirection+0xf6>
                SET_BIT(DDRB, pin_num);
 1a8:	a7 e3       	ldi	r26, 0x37	; 55
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	e7 e3       	ldi	r30, 0x37	; 55
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	48 2f       	mov	r20, r24
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 2e       	mov	r0, r18
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <GPIO_setupPinDirection+0xec>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	0a 94       	dec	r0
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <GPIO_setupPinDirection+0xe8>
 1ca:	84 2b       	or	r24, r20
 1cc:	8c 93       	st	X, r24
 1ce:	77 c0       	rjmp	.+238    	; 0x2be <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	88 23       	and	r24, r24
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <GPIO_setupPinDirection+0xfe>
 1d6:	73 c0       	rjmp	.+230    	; 0x2be <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRB, pin_num);
 1d8:	a7 e3       	ldi	r26, 0x37	; 55
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e7 e3       	ldi	r30, 0x37	; 55
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	48 2f       	mov	r20, r24
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	28 2f       	mov	r18, r24
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 2e       	mov	r0, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <GPIO_setupPinDirection+0x11c>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <GPIO_setupPinDirection+0x118>
 1fa:	80 95       	com	r24
 1fc:	84 23       	and	r24, r20
 1fe:	8c 93       	st	X, r24
 200:	5e c0       	rjmp	.+188    	; 0x2be <GPIO_setupPinDirection+0x1e4>

            }
            break;
        case PORTC_ID:
            if(PIN_OUTPUT == direction){
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	a1 f4       	brne	.+40     	; 0x230 <GPIO_setupPinDirection+0x156>
                SET_BIT(DDRC, pin_num);
 208:	a4 e3       	ldi	r26, 0x34	; 52
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e4 e3       	ldi	r30, 0x34	; 52
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	48 2f       	mov	r20, r24
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	28 2f       	mov	r18, r24
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 2e       	mov	r0, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <GPIO_setupPinDirection+0x14c>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <GPIO_setupPinDirection+0x148>
 22a:	84 2b       	or	r24, r20
 22c:	8c 93       	st	X, r24
 22e:	47 c0       	rjmp	.+142    	; 0x2be <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	88 23       	and	r24, r24
 234:	09 f0       	breq	.+2      	; 0x238 <GPIO_setupPinDirection+0x15e>
 236:	43 c0       	rjmp	.+134    	; 0x2be <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRC, pin_num);
 238:	a4 e3       	ldi	r26, 0x34	; 52
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	e4 e3       	ldi	r30, 0x34	; 52
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	48 2f       	mov	r20, r24
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	28 2f       	mov	r18, r24
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 2e       	mov	r0, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <GPIO_setupPinDirection+0x17c>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	0a 94       	dec	r0
 258:	e2 f7       	brpl	.-8      	; 0x252 <GPIO_setupPinDirection+0x178>
 25a:	80 95       	com	r24
 25c:	84 23       	and	r24, r20
 25e:	8c 93       	st	X, r24
 260:	2e c0       	rjmp	.+92     	; 0x2be <GPIO_setupPinDirection+0x1e4>


            }
            break;
        case PORTD_ID:
            if(PIN_OUTPUT == direction){
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	a1 f4       	brne	.+40     	; 0x290 <GPIO_setupPinDirection+0x1b6>
                SET_BIT(DDRD, pin_num);
 268:	a1 e3       	ldi	r26, 0x31	; 49
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	e1 e3       	ldi	r30, 0x31	; 49
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	48 2f       	mov	r20, r24
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	28 2f       	mov	r18, r24
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 2e       	mov	r0, r18
 280:	02 c0       	rjmp	.+4      	; 0x286 <GPIO_setupPinDirection+0x1ac>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	0a 94       	dec	r0
 288:	e2 f7       	brpl	.-8      	; 0x282 <GPIO_setupPinDirection+0x1a8>
 28a:	84 2b       	or	r24, r20
 28c:	8c 93       	st	X, r24
 28e:	17 c0       	rjmp	.+46     	; 0x2be <GPIO_setupPinDirection+0x1e4>
            }
            else if(PIN_INPUT == direction){
 290:	8b 81       	ldd	r24, Y+3	; 0x03
 292:	88 23       	and	r24, r24
 294:	a1 f4       	brne	.+40     	; 0x2be <GPIO_setupPinDirection+0x1e4>
                CLEAR_BIT(DDRD, pin_num);
 296:	a1 e3       	ldi	r26, 0x31	; 49
 298:	b0 e0       	ldi	r27, 0x00	; 0
 29a:	e1 e3       	ldi	r30, 0x31	; 49
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	48 2f       	mov	r20, r24
 2a2:	8a 81       	ldd	r24, Y+2	; 0x02
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 2e       	mov	r0, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <GPIO_setupPinDirection+0x1da>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <GPIO_setupPinDirection+0x1d6>
 2b8:	80 95       	com	r24
 2ba:	84 23       	and	r24, r20
 2bc:	8c 93       	st	X, r24
            }
            break;

        }
    }
}
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	cf 91       	pop	r28
 2ca:	df 91       	pop	r29
 2cc:	08 95       	ret

000002ce <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * if pin number or port number ar invalid, function will not handle it
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
 2ce:	df 93       	push	r29
 2d0:	cf 93       	push	r28
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <GPIO_writePin+0x6>
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <GPIO_writePin+0x8>
 2d6:	0f 92       	push	r0
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	89 83       	std	Y+1, r24	; 0x01
 2de:	6a 83       	std	Y+2, r22	; 0x02
 2e0:	4b 83       	std	Y+3, r20	; 0x03
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){}
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	85 30       	cpi	r24, 0x05	; 5
 2e6:	08 f0       	brcs	.+2      	; 0x2ea <GPIO_writePin+0x1c>
 2e8:	e4 c0       	rjmp	.+456    	; 0x4b2 <__stack+0x53>
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	89 30       	cpi	r24, 0x09	; 9
 2ee:	08 f0       	brcs	.+2      	; 0x2f2 <GPIO_writePin+0x24>
 2f0:	e0 c0       	rjmp	.+448    	; 0x4b2 <__stack+0x53>
    else{
        switch (port_num)
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	3d 83       	std	Y+5, r19	; 0x05
 2fa:	2c 83       	std	Y+4, r18	; 0x04
 2fc:	8c 81       	ldd	r24, Y+4	; 0x04
 2fe:	9d 81       	ldd	r25, Y+5	; 0x05
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	91 05       	cpc	r25, r1
 304:	09 f4       	brne	.+2      	; 0x308 <GPIO_writePin+0x3a>
 306:	47 c0       	rjmp	.+142    	; 0x396 <GPIO_writePin+0xc8>
 308:	2c 81       	ldd	r18, Y+4	; 0x04
 30a:	3d 81       	ldd	r19, Y+5	; 0x05
 30c:	22 30       	cpi	r18, 0x02	; 2
 30e:	31 05       	cpc	r19, r1
 310:	2c f4       	brge	.+10     	; 0x31c <GPIO_writePin+0x4e>
 312:	8c 81       	ldd	r24, Y+4	; 0x04
 314:	9d 81       	ldd	r25, Y+5	; 0x05
 316:	00 97       	sbiw	r24, 0x00	; 0
 318:	71 f0       	breq	.+28     	; 0x336 <GPIO_writePin+0x68>
 31a:	cb c0       	rjmp	.+406    	; 0x4b2 <__stack+0x53>
 31c:	2c 81       	ldd	r18, Y+4	; 0x04
 31e:	3d 81       	ldd	r19, Y+5	; 0x05
 320:	22 30       	cpi	r18, 0x02	; 2
 322:	31 05       	cpc	r19, r1
 324:	09 f4       	brne	.+2      	; 0x328 <GPIO_writePin+0x5a>
 326:	67 c0       	rjmp	.+206    	; 0x3f6 <GPIO_writePin+0x128>
 328:	8c 81       	ldd	r24, Y+4	; 0x04
 32a:	9d 81       	ldd	r25, Y+5	; 0x05
 32c:	83 30       	cpi	r24, 0x03	; 3
 32e:	91 05       	cpc	r25, r1
 330:	09 f4       	brne	.+2      	; 0x334 <GPIO_writePin+0x66>
 332:	91 c0       	rjmp	.+290    	; 0x456 <GPIO_writePin+0x188>
 334:	be c0       	rjmp	.+380    	; 0x4b2 <__stack+0x53>
        {
        case PORTA_ID:

            if(LOGIC_HIGH == value){
 336:	8b 81       	ldd	r24, Y+3	; 0x03
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	a1 f4       	brne	.+40     	; 0x364 <GPIO_writePin+0x96>
                SET_BIT(PORTA, pin_num);
 33c:	ab e3       	ldi	r26, 0x3B	; 59
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	eb e3       	ldi	r30, 0x3B	; 59
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	48 2f       	mov	r20, r24
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	28 2f       	mov	r18, r24
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 2e       	mov	r0, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <GPIO_writePin+0x8c>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <GPIO_writePin+0x88>
 35e:	84 2b       	or	r24, r20
 360:	8c 93       	st	X, r24
 362:	a7 c0       	rjmp	.+334    	; 0x4b2 <__stack+0x53>
            }
            else if(LOGIC_LOW == value){
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	88 23       	and	r24, r24
 368:	09 f0       	breq	.+2      	; 0x36c <GPIO_writePin+0x9e>
 36a:	a3 c0       	rjmp	.+326    	; 0x4b2 <__stack+0x53>
                CLEAR_BIT(PORTA, pin_num);
 36c:	ab e3       	ldi	r26, 0x3B	; 59
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	eb e3       	ldi	r30, 0x3B	; 59
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	48 2f       	mov	r20, r24
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	28 2f       	mov	r18, r24
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 2e       	mov	r0, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <GPIO_writePin+0xbc>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <GPIO_writePin+0xb8>
 38e:	80 95       	com	r24
 390:	84 23       	and	r24, r20
 392:	8c 93       	st	X, r24
 394:	8e c0       	rjmp	.+284    	; 0x4b2 <__stack+0x53>

            }
            break;
        case PORTB_ID:

            if(LOGIC_HIGH == value){
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	a1 f4       	brne	.+40     	; 0x3c4 <GPIO_writePin+0xf6>
                SET_BIT(PORTB, pin_num);
 39c:	a8 e3       	ldi	r26, 0x38	; 56
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	e8 e3       	ldi	r30, 0x38	; 56
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	48 2f       	mov	r20, r24
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	28 2f       	mov	r18, r24
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	02 2e       	mov	r0, r18
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <GPIO_writePin+0xec>
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	0a 94       	dec	r0
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <GPIO_writePin+0xe8>
 3be:	84 2b       	or	r24, r20
 3c0:	8c 93       	st	X, r24
 3c2:	77 c0       	rjmp	.+238    	; 0x4b2 <__stack+0x53>
            }
            else if(LOGIC_LOW == value){
 3c4:	8b 81       	ldd	r24, Y+3	; 0x03
 3c6:	88 23       	and	r24, r24
 3c8:	09 f0       	breq	.+2      	; 0x3cc <GPIO_writePin+0xfe>
 3ca:	73 c0       	rjmp	.+230    	; 0x4b2 <__stack+0x53>
                CLEAR_BIT(PORTB, pin_num);
 3cc:	a8 e3       	ldi	r26, 0x38	; 56
 3ce:	b0 e0       	ldi	r27, 0x00	; 0
 3d0:	e8 e3       	ldi	r30, 0x38	; 56
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	48 2f       	mov	r20, r24
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	28 2f       	mov	r18, r24
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 2e       	mov	r0, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <GPIO_writePin+0x11c>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <GPIO_writePin+0x118>
 3ee:	80 95       	com	r24
 3f0:	84 23       	and	r24, r20
 3f2:	8c 93       	st	X, r24
 3f4:	5e c0       	rjmp	.+188    	; 0x4b2 <__stack+0x53>
            }
            break;
        case PORTC_ID:

            if(LOGIC_HIGH == value){
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	a1 f4       	brne	.+40     	; 0x424 <GPIO_writePin+0x156>
                SET_BIT(PORTC, pin_num);
 3fc:	a5 e3       	ldi	r26, 0x35	; 53
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	e5 e3       	ldi	r30, 0x35	; 53
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	48 2f       	mov	r20, r24
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 2e       	mov	r0, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <GPIO_writePin+0x14c>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	0a 94       	dec	r0
 41c:	e2 f7       	brpl	.-8      	; 0x416 <GPIO_writePin+0x148>
 41e:	84 2b       	or	r24, r20
 420:	8c 93       	st	X, r24
 422:	47 c0       	rjmp	.+142    	; 0x4b2 <__stack+0x53>
            }
            else if(LOGIC_LOW == value){
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	88 23       	and	r24, r24
 428:	09 f0       	breq	.+2      	; 0x42c <GPIO_writePin+0x15e>
 42a:	43 c0       	rjmp	.+134    	; 0x4b2 <__stack+0x53>
                CLEAR_BIT(PORTC, pin_num);
 42c:	a5 e3       	ldi	r26, 0x35	; 53
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	e5 e3       	ldi	r30, 0x35	; 53
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <GPIO_writePin+0x17c>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <GPIO_writePin+0x178>
 44e:	80 95       	com	r24
 450:	84 23       	and	r24, r20
 452:	8c 93       	st	X, r24
 454:	2e c0       	rjmp	.+92     	; 0x4b2 <__stack+0x53>
            }
            break;
        case PORTD_ID:

            if(LOGIC_HIGH == value){
 456:	8b 81       	ldd	r24, Y+3	; 0x03
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	a1 f4       	brne	.+40     	; 0x484 <__stack+0x25>
                SET_BIT(PORTD, pin_num);
 45c:	a2 e3       	ldi	r26, 0x32	; 50
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	e2 e3       	ldi	r30, 0x32	; 50
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	48 2f       	mov	r20, r24
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 2e       	mov	r0, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <__stack+0x1b>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__stack+0x17>
 47e:	84 2b       	or	r24, r20
 480:	8c 93       	st	X, r24
 482:	17 c0       	rjmp	.+46     	; 0x4b2 <__stack+0x53>
            }
            else if(LOGIC_LOW == value){
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	88 23       	and	r24, r24
 488:	a1 f4       	brne	.+40     	; 0x4b2 <__stack+0x53>
                CLEAR_BIT(PORTD, pin_num);
 48a:	a2 e3       	ldi	r26, 0x32	; 50
 48c:	b0 e0       	ldi	r27, 0x00	; 0
 48e:	e2 e3       	ldi	r30, 0x32	; 50
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	48 2f       	mov	r20, r24
 496:	8a 81       	ldd	r24, Y+2	; 0x02
 498:	28 2f       	mov	r18, r24
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 2e       	mov	r0, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__stack+0x49>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	0a 94       	dec	r0
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <__stack+0x45>
 4ac:	80 95       	com	r24
 4ae:	84 23       	and	r24, r20
 4b0:	8c 93       	st	X, r24
            }
            break;
        }
    }    
    
}
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	0f 90       	pop	r0
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	cf 91       	pop	r28
 4be:	df 91       	pop	r29
 4c0:	08 95       	ret

000004c2 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
 4c2:	df 93       	push	r29
 4c4:	cf 93       	push	r28
 4c6:	00 d0       	rcall	.+0      	; 0x4c8 <GPIO_readPin+0x6>
 4c8:	00 d0       	rcall	.+0      	; 0x4ca <GPIO_readPin+0x8>
 4ca:	0f 92       	push	r0
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	89 83       	std	Y+1, r24	; 0x01
 4d2:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS || pin_num > NUM_OF_PINS_PER_PORT){}
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	85 30       	cpi	r24, 0x05	; 5
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <GPIO_readPin+0x1a>
 4da:	85 c0       	rjmp	.+266    	; 0x5e6 <GPIO_readPin+0x124>
 4dc:	8a 81       	ldd	r24, Y+2	; 0x02
 4de:	89 30       	cpi	r24, 0x09	; 9
 4e0:	08 f0       	brcs	.+2      	; 0x4e4 <GPIO_readPin+0x22>
 4e2:	81 c0       	rjmp	.+258    	; 0x5e6 <GPIO_readPin+0x124>
    else{
        switch (port_num)
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	28 2f       	mov	r18, r24
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	3d 83       	std	Y+5, r19	; 0x05
 4ec:	2c 83       	std	Y+4, r18	; 0x04
 4ee:	4c 81       	ldd	r20, Y+4	; 0x04
 4f0:	5d 81       	ldd	r21, Y+5	; 0x05
 4f2:	41 30       	cpi	r20, 0x01	; 1
 4f4:	51 05       	cpc	r21, r1
 4f6:	79 f1       	breq	.+94     	; 0x556 <GPIO_readPin+0x94>
 4f8:	8c 81       	ldd	r24, Y+4	; 0x04
 4fa:	9d 81       	ldd	r25, Y+5	; 0x05
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	91 05       	cpc	r25, r1
 500:	34 f4       	brge	.+12     	; 0x50e <GPIO_readPin+0x4c>
 502:	2c 81       	ldd	r18, Y+4	; 0x04
 504:	3d 81       	ldd	r19, Y+5	; 0x05
 506:	21 15       	cp	r18, r1
 508:	31 05       	cpc	r19, r1
 50a:	69 f0       	breq	.+26     	; 0x526 <GPIO_readPin+0x64>
 50c:	6c c0       	rjmp	.+216    	; 0x5e6 <GPIO_readPin+0x124>
 50e:	4c 81       	ldd	r20, Y+4	; 0x04
 510:	5d 81       	ldd	r21, Y+5	; 0x05
 512:	42 30       	cpi	r20, 0x02	; 2
 514:	51 05       	cpc	r21, r1
 516:	b9 f1       	breq	.+110    	; 0x586 <GPIO_readPin+0xc4>
 518:	8c 81       	ldd	r24, Y+4	; 0x04
 51a:	9d 81       	ldd	r25, Y+5	; 0x05
 51c:	83 30       	cpi	r24, 0x03	; 3
 51e:	91 05       	cpc	r25, r1
 520:	09 f4       	brne	.+2      	; 0x524 <GPIO_readPin+0x62>
 522:	49 c0       	rjmp	.+146    	; 0x5b6 <GPIO_readPin+0xf4>
 524:	60 c0       	rjmp	.+192    	; 0x5e6 <GPIO_readPin+0x124>
        {
        case PORTA_ID:

            if(BIT_IS_SET(PINA, pin_num)){
 526:	e9 e3       	ldi	r30, 0x39	; 57
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	8a 81       	ldd	r24, Y+2	; 0x02
 532:	88 2f       	mov	r24, r24
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	a9 01       	movw	r20, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <GPIO_readPin+0x7c>
 53a:	55 95       	asr	r21
 53c:	47 95       	ror	r20
 53e:	8a 95       	dec	r24
 540:	e2 f7       	brpl	.-8      	; 0x53a <GPIO_readPin+0x78>
 542:	ca 01       	movw	r24, r20
 544:	81 70       	andi	r24, 0x01	; 1
 546:	90 70       	andi	r25, 0x00	; 0
 548:	88 23       	and	r24, r24
 54a:	19 f0       	breq	.+6      	; 0x552 <GPIO_readPin+0x90>
                return 1;
 54c:	51 e0       	ldi	r21, 0x01	; 1
 54e:	5b 83       	std	Y+3, r21	; 0x03
 550:	4b c0       	rjmp	.+150    	; 0x5e8 <GPIO_readPin+0x126>
            }
            else{
                return 0;
 552:	1b 82       	std	Y+3, r1	; 0x03
 554:	49 c0       	rjmp	.+146    	; 0x5e8 <GPIO_readPin+0x126>

            }
            break;
        case PORTB_ID:

            if(BIT_IS_SET(PINB, pin_num)){
 556:	e6 e3       	ldi	r30, 0x36	; 54
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	28 2f       	mov	r18, r24
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	8a 81       	ldd	r24, Y+2	; 0x02
 562:	88 2f       	mov	r24, r24
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	a9 01       	movw	r20, r18
 568:	02 c0       	rjmp	.+4      	; 0x56e <GPIO_readPin+0xac>
 56a:	55 95       	asr	r21
 56c:	47 95       	ror	r20
 56e:	8a 95       	dec	r24
 570:	e2 f7       	brpl	.-8      	; 0x56a <GPIO_readPin+0xa8>
 572:	ca 01       	movw	r24, r20
 574:	81 70       	andi	r24, 0x01	; 1
 576:	90 70       	andi	r25, 0x00	; 0
 578:	88 23       	and	r24, r24
 57a:	19 f0       	breq	.+6      	; 0x582 <GPIO_readPin+0xc0>
                return 1;
 57c:	51 e0       	ldi	r21, 0x01	; 1
 57e:	5b 83       	std	Y+3, r21	; 0x03
 580:	33 c0       	rjmp	.+102    	; 0x5e8 <GPIO_readPin+0x126>
            }
            else{
                return 0;
 582:	1b 82       	std	Y+3, r1	; 0x03
 584:	31 c0       	rjmp	.+98     	; 0x5e8 <GPIO_readPin+0x126>
            }
            break;
        case PORTC_ID:

            if(BIT_IS_SET(PINC, pin_num)){
 586:	e3 e3       	ldi	r30, 0x33	; 51
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	28 2f       	mov	r18, r24
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	8a 81       	ldd	r24, Y+2	; 0x02
 592:	88 2f       	mov	r24, r24
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	a9 01       	movw	r20, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <GPIO_readPin+0xdc>
 59a:	55 95       	asr	r21
 59c:	47 95       	ror	r20
 59e:	8a 95       	dec	r24
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <GPIO_readPin+0xd8>
 5a2:	ca 01       	movw	r24, r20
 5a4:	81 70       	andi	r24, 0x01	; 1
 5a6:	90 70       	andi	r25, 0x00	; 0
 5a8:	88 23       	and	r24, r24
 5aa:	19 f0       	breq	.+6      	; 0x5b2 <GPIO_readPin+0xf0>
                return 1;
 5ac:	51 e0       	ldi	r21, 0x01	; 1
 5ae:	5b 83       	std	Y+3, r21	; 0x03
 5b0:	1b c0       	rjmp	.+54     	; 0x5e8 <GPIO_readPin+0x126>
            }
            else{
                return 0;
 5b2:	1b 82       	std	Y+3, r1	; 0x03
 5b4:	19 c0       	rjmp	.+50     	; 0x5e8 <GPIO_readPin+0x126>
            }
            break;
        case PORTD_ID:

            if(BIT_IS_SET(PIND, pin_num)){
 5b6:	e0 e3       	ldi	r30, 0x30	; 48
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	28 2f       	mov	r18, r24
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	8a 81       	ldd	r24, Y+2	; 0x02
 5c2:	88 2f       	mov	r24, r24
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	a9 01       	movw	r20, r18
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <GPIO_readPin+0x10c>
 5ca:	55 95       	asr	r21
 5cc:	47 95       	ror	r20
 5ce:	8a 95       	dec	r24
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <GPIO_readPin+0x108>
 5d2:	ca 01       	movw	r24, r20
 5d4:	81 70       	andi	r24, 0x01	; 1
 5d6:	90 70       	andi	r25, 0x00	; 0
 5d8:	88 23       	and	r24, r24
 5da:	19 f0       	breq	.+6      	; 0x5e2 <GPIO_readPin+0x120>
                return 1;
 5dc:	51 e0       	ldi	r21, 0x01	; 1
 5de:	5b 83       	std	Y+3, r21	; 0x03
 5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <GPIO_readPin+0x126>
            }
            else{
                return 0;
 5e2:	1b 82       	std	Y+3, r1	; 0x03
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <GPIO_readPin+0x126>
            }
            break;
        }
    }
    return '\0';
 5e6:	1b 82       	std	Y+3, r1	; 0x03
 5e8:	8b 81       	ldd	r24, Y+3	; 0x03
}
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	0f 90       	pop	r0
 5f4:	cf 91       	pop	r28
 5f6:	df 91       	pop	r29
 5f8:	08 95       	ret

000005fa <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * PORT_INPUT = 0x00, PORT_OUTPUT = 0xFF
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, uint8 direction){
 5fa:	df 93       	push	r29
 5fc:	cf 93       	push	r28
 5fe:	00 d0       	rcall	.+0      	; 0x600 <GPIO_setupPortDirection+0x6>
 600:	00 d0       	rcall	.+0      	; 0x602 <GPIO_setupPortDirection+0x8>
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
 606:	89 83       	std	Y+1, r24	; 0x01
 608:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS){}
 60a:	89 81       	ldd	r24, Y+1	; 0x01
 60c:	85 30       	cpi	r24, 0x05	; 5
 60e:	90 f5       	brcc	.+100    	; 0x674 <GPIO_setupPortDirection+0x7a>
    else{
        switch (port_num)
 610:	89 81       	ldd	r24, Y+1	; 0x01
 612:	28 2f       	mov	r18, r24
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	3c 83       	std	Y+4, r19	; 0x04
 618:	2b 83       	std	Y+3, r18	; 0x03
 61a:	8b 81       	ldd	r24, Y+3	; 0x03
 61c:	9c 81       	ldd	r25, Y+4	; 0x04
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	91 05       	cpc	r25, r1
 622:	d1 f0       	breq	.+52     	; 0x658 <GPIO_setupPortDirection+0x5e>
 624:	2b 81       	ldd	r18, Y+3	; 0x03
 626:	3c 81       	ldd	r19, Y+4	; 0x04
 628:	22 30       	cpi	r18, 0x02	; 2
 62a:	31 05       	cpc	r19, r1
 62c:	2c f4       	brge	.+10     	; 0x638 <GPIO_setupPortDirection+0x3e>
 62e:	8b 81       	ldd	r24, Y+3	; 0x03
 630:	9c 81       	ldd	r25, Y+4	; 0x04
 632:	00 97       	sbiw	r24, 0x00	; 0
 634:	61 f0       	breq	.+24     	; 0x64e <GPIO_setupPortDirection+0x54>
 636:	1e c0       	rjmp	.+60     	; 0x674 <GPIO_setupPortDirection+0x7a>
 638:	2b 81       	ldd	r18, Y+3	; 0x03
 63a:	3c 81       	ldd	r19, Y+4	; 0x04
 63c:	22 30       	cpi	r18, 0x02	; 2
 63e:	31 05       	cpc	r19, r1
 640:	81 f0       	breq	.+32     	; 0x662 <GPIO_setupPortDirection+0x68>
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	9c 81       	ldd	r25, Y+4	; 0x04
 646:	83 30       	cpi	r24, 0x03	; 3
 648:	91 05       	cpc	r25, r1
 64a:	81 f0       	breq	.+32     	; 0x66c <GPIO_setupPortDirection+0x72>
 64c:	13 c0       	rjmp	.+38     	; 0x674 <GPIO_setupPortDirection+0x7a>
        {
        case PORTA_ID:
            DDRA = direction;
 64e:	ea e3       	ldi	r30, 0x3A	; 58
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	8a 81       	ldd	r24, Y+2	; 0x02
 654:	80 83       	st	Z, r24
 656:	0e c0       	rjmp	.+28     	; 0x674 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTB_ID:
            DDRB = direction;
 658:	e7 e3       	ldi	r30, 0x37	; 55
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	8a 81       	ldd	r24, Y+2	; 0x02
 65e:	80 83       	st	Z, r24
 660:	09 c0       	rjmp	.+18     	; 0x674 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTC_ID:
            DDRC = direction;
 662:	e4 e3       	ldi	r30, 0x34	; 52
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	8a 81       	ldd	r24, Y+2	; 0x02
 668:	80 83       	st	Z, r24
 66a:	04 c0       	rjmp	.+8      	; 0x674 <GPIO_setupPortDirection+0x7a>
            break;
        case PORTD_ID:
            DDRD = direction;
 66c:	e1 e3       	ldi	r30, 0x31	; 49
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	8a 81       	ldd	r24, Y+2	; 0x02
 672:	80 83       	st	Z, r24
            break;
        }
    }
}
 674:	0f 90       	pop	r0
 676:	0f 90       	pop	r0
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	cf 91       	pop	r28
 67e:	df 91       	pop	r29
 680:	08 95       	ret

00000682 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value){
 682:	df 93       	push	r29
 684:	cf 93       	push	r28
 686:	00 d0       	rcall	.+0      	; 0x688 <GPIO_writePort+0x6>
 688:	00 d0       	rcall	.+0      	; 0x68a <GPIO_writePort+0x8>
 68a:	cd b7       	in	r28, 0x3d	; 61
 68c:	de b7       	in	r29, 0x3e	; 62
 68e:	89 83       	std	Y+1, r24	; 0x01
 690:	6a 83       	std	Y+2, r22	; 0x02
    if(port_num>NUM_OF_PORTS){}
 692:	89 81       	ldd	r24, Y+1	; 0x01
 694:	85 30       	cpi	r24, 0x05	; 5
 696:	90 f5       	brcc	.+100    	; 0x6fc <GPIO_writePort+0x7a>
    else{
        switch (port_num)
 698:	89 81       	ldd	r24, Y+1	; 0x01
 69a:	28 2f       	mov	r18, r24
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	3c 83       	std	Y+4, r19	; 0x04
 6a0:	2b 83       	std	Y+3, r18	; 0x03
 6a2:	8b 81       	ldd	r24, Y+3	; 0x03
 6a4:	9c 81       	ldd	r25, Y+4	; 0x04
 6a6:	81 30       	cpi	r24, 0x01	; 1
 6a8:	91 05       	cpc	r25, r1
 6aa:	d1 f0       	breq	.+52     	; 0x6e0 <GPIO_writePort+0x5e>
 6ac:	2b 81       	ldd	r18, Y+3	; 0x03
 6ae:	3c 81       	ldd	r19, Y+4	; 0x04
 6b0:	22 30       	cpi	r18, 0x02	; 2
 6b2:	31 05       	cpc	r19, r1
 6b4:	2c f4       	brge	.+10     	; 0x6c0 <GPIO_writePort+0x3e>
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ba:	00 97       	sbiw	r24, 0x00	; 0
 6bc:	61 f0       	breq	.+24     	; 0x6d6 <GPIO_writePort+0x54>
 6be:	1e c0       	rjmp	.+60     	; 0x6fc <GPIO_writePort+0x7a>
 6c0:	2b 81       	ldd	r18, Y+3	; 0x03
 6c2:	3c 81       	ldd	r19, Y+4	; 0x04
 6c4:	22 30       	cpi	r18, 0x02	; 2
 6c6:	31 05       	cpc	r19, r1
 6c8:	81 f0       	breq	.+32     	; 0x6ea <GPIO_writePort+0x68>
 6ca:	8b 81       	ldd	r24, Y+3	; 0x03
 6cc:	9c 81       	ldd	r25, Y+4	; 0x04
 6ce:	83 30       	cpi	r24, 0x03	; 3
 6d0:	91 05       	cpc	r25, r1
 6d2:	81 f0       	breq	.+32     	; 0x6f4 <GPIO_writePort+0x72>
 6d4:	13 c0       	rjmp	.+38     	; 0x6fc <GPIO_writePort+0x7a>
        {
        case PORTA_ID:
            PORTA = value;
 6d6:	eb e3       	ldi	r30, 0x3B	; 59
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	8a 81       	ldd	r24, Y+2	; 0x02
 6dc:	80 83       	st	Z, r24
 6de:	0e c0       	rjmp	.+28     	; 0x6fc <GPIO_writePort+0x7a>
            break;
        case PORTB_ID:
            PORTB = value;
 6e0:	e8 e3       	ldi	r30, 0x38	; 56
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	8a 81       	ldd	r24, Y+2	; 0x02
 6e6:	80 83       	st	Z, r24
 6e8:	09 c0       	rjmp	.+18     	; 0x6fc <GPIO_writePort+0x7a>
            break;
        case PORTC_ID:
            PORTC = value;
 6ea:	e5 e3       	ldi	r30, 0x35	; 53
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	80 83       	st	Z, r24
 6f2:	04 c0       	rjmp	.+8      	; 0x6fc <GPIO_writePort+0x7a>
            break;
        case PORTD_ID:
            PORTD = value;
 6f4:	e2 e3       	ldi	r30, 0x32	; 50
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	80 83       	st	Z, r24
            break;
        }
    }

}
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	cf 91       	pop	r28
 706:	df 91       	pop	r29
 708:	08 95       	ret

0000070a <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
 70a:	df 93       	push	r29
 70c:	cf 93       	push	r28
 70e:	00 d0       	rcall	.+0      	; 0x710 <GPIO_readPort+0x6>
 710:	00 d0       	rcall	.+0      	; 0x712 <GPIO_readPort+0x8>
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
 716:	89 83       	std	Y+1, r24	; 0x01
    if(port_num>NUM_OF_PORTS){
 718:	89 81       	ldd	r24, Y+1	; 0x01
 71a:	85 30       	cpi	r24, 0x05	; 5
 71c:	98 f5       	brcc	.+102    	; 0x784 <GPIO_readPort+0x7a>
    }
    else{
        switch (port_num)
 71e:	89 81       	ldd	r24, Y+1	; 0x01
 720:	28 2f       	mov	r18, r24
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	3c 83       	std	Y+4, r19	; 0x04
 726:	2b 83       	std	Y+3, r18	; 0x03
 728:	8b 81       	ldd	r24, Y+3	; 0x03
 72a:	9c 81       	ldd	r25, Y+4	; 0x04
 72c:	81 30       	cpi	r24, 0x01	; 1
 72e:	91 05       	cpc	r25, r1
 730:	d1 f0       	breq	.+52     	; 0x766 <GPIO_readPort+0x5c>
 732:	2b 81       	ldd	r18, Y+3	; 0x03
 734:	3c 81       	ldd	r19, Y+4	; 0x04
 736:	22 30       	cpi	r18, 0x02	; 2
 738:	31 05       	cpc	r19, r1
 73a:	2c f4       	brge	.+10     	; 0x746 <GPIO_readPort+0x3c>
 73c:	8b 81       	ldd	r24, Y+3	; 0x03
 73e:	9c 81       	ldd	r25, Y+4	; 0x04
 740:	00 97       	sbiw	r24, 0x00	; 0
 742:	61 f0       	breq	.+24     	; 0x75c <GPIO_readPort+0x52>
 744:	1f c0       	rjmp	.+62     	; 0x784 <GPIO_readPort+0x7a>
 746:	2b 81       	ldd	r18, Y+3	; 0x03
 748:	3c 81       	ldd	r19, Y+4	; 0x04
 74a:	22 30       	cpi	r18, 0x02	; 2
 74c:	31 05       	cpc	r19, r1
 74e:	81 f0       	breq	.+32     	; 0x770 <GPIO_readPort+0x66>
 750:	8b 81       	ldd	r24, Y+3	; 0x03
 752:	9c 81       	ldd	r25, Y+4	; 0x04
 754:	83 30       	cpi	r24, 0x03	; 3
 756:	91 05       	cpc	r25, r1
 758:	81 f0       	breq	.+32     	; 0x77a <GPIO_readPort+0x70>
 75a:	14 c0       	rjmp	.+40     	; 0x784 <GPIO_readPort+0x7a>
        {
        case PORTA_ID:
            return PINA;
 75c:	e9 e3       	ldi	r30, 0x39	; 57
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	90 81       	ld	r25, Z
 762:	9a 83       	std	Y+2, r25	; 0x02
 764:	10 c0       	rjmp	.+32     	; 0x786 <GPIO_readPort+0x7c>
            break;
        case PORTB_ID:
            return PINB;
 766:	e6 e3       	ldi	r30, 0x36	; 54
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	20 81       	ld	r18, Z
 76c:	2a 83       	std	Y+2, r18	; 0x02
 76e:	0b c0       	rjmp	.+22     	; 0x786 <GPIO_readPort+0x7c>
            break;
        case PORTC_ID:
            return PINC;
 770:	e3 e3       	ldi	r30, 0x33	; 51
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	30 81       	ld	r19, Z
 776:	3a 83       	std	Y+2, r19	; 0x02
 778:	06 c0       	rjmp	.+12     	; 0x786 <GPIO_readPort+0x7c>
            break;
        case PORTD_ID:
            return PIND;
 77a:	e0 e3       	ldi	r30, 0x30	; 48
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	80 81       	ld	r24, Z
 780:	8a 83       	std	Y+2, r24	; 0x02
 782:	01 c0       	rjmp	.+2      	; 0x786 <GPIO_readPort+0x7c>
            break;
        }
    }
    return '\0';
 784:	1a 82       	std	Y+2, r1	; 0x02
 786:	8a 81       	ldd	r24, Y+2	; 0x02
}
 788:	0f 90       	pop	r0
 78a:	0f 90       	pop	r0
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	cf 91       	pop	r28
 792:	df 91       	pop	r29
 794:	08 95       	ret

00000796 <__vector_9>:
static volatile void (*g_timer2CallBackPtr)(void) = NULL_PTR;

/*******************************************************************************
 *                      Interrupt handler                                      *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	2f 93       	push	r18
 7a2:	3f 93       	push	r19
 7a4:	4f 93       	push	r20
 7a6:	5f 93       	push	r21
 7a8:	6f 93       	push	r22
 7aa:	7f 93       	push	r23
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	af 93       	push	r26
 7b2:	bf 93       	push	r27
 7b4:	ef 93       	push	r30
 7b6:	ff 93       	push	r31
 7b8:	df 93       	push	r29
 7ba:	cf 93       	push	r28
 7bc:	cd b7       	in	r28, 0x3d	; 61
 7be:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
 7c0:	80 91 66 00 	lds	r24, 0x0066
 7c4:	90 91 67 00 	lds	r25, 0x0067
 7c8:	00 97       	sbiw	r24, 0x00	; 0
 7ca:	29 f0       	breq	.+10     	; 0x7d6 <__vector_9+0x40>
		(*g_timer0CallBackPtr)();
 7cc:	e0 91 66 00 	lds	r30, 0x0066
 7d0:	f0 91 67 00 	lds	r31, 0x0067
 7d4:	09 95       	icall
	}
}
 7d6:	cf 91       	pop	r28
 7d8:	df 91       	pop	r29
 7da:	ff 91       	pop	r31
 7dc:	ef 91       	pop	r30
 7de:	bf 91       	pop	r27
 7e0:	af 91       	pop	r26
 7e2:	9f 91       	pop	r25
 7e4:	8f 91       	pop	r24
 7e6:	7f 91       	pop	r23
 7e8:	6f 91       	pop	r22
 7ea:	5f 91       	pop	r21
 7ec:	4f 91       	pop	r20
 7ee:	3f 91       	pop	r19
 7f0:	2f 91       	pop	r18
 7f2:	0f 90       	pop	r0
 7f4:	0f be       	out	0x3f, r0	; 63
 7f6:	0f 90       	pop	r0
 7f8:	1f 90       	pop	r1
 7fa:	18 95       	reti

000007fc <__vector_19>:
ISR(TIMER0_COMP_vect){
 7fc:	1f 92       	push	r1
 7fe:	0f 92       	push	r0
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	0f 92       	push	r0
 804:	11 24       	eor	r1, r1
 806:	2f 93       	push	r18
 808:	3f 93       	push	r19
 80a:	4f 93       	push	r20
 80c:	5f 93       	push	r21
 80e:	6f 93       	push	r22
 810:	7f 93       	push	r23
 812:	8f 93       	push	r24
 814:	9f 93       	push	r25
 816:	af 93       	push	r26
 818:	bf 93       	push	r27
 81a:	ef 93       	push	r30
 81c:	ff 93       	push	r31
 81e:	df 93       	push	r29
 820:	cf 93       	push	r28
 822:	cd b7       	in	r28, 0x3d	; 61
 824:	de b7       	in	r29, 0x3e	; 62
	if(g_timer0CallBackPtr != NULL_PTR){
 826:	80 91 66 00 	lds	r24, 0x0066
 82a:	90 91 67 00 	lds	r25, 0x0067
 82e:	00 97       	sbiw	r24, 0x00	; 0
 830:	29 f0       	breq	.+10     	; 0x83c <__vector_19+0x40>
		(*g_timer0CallBackPtr)();
 832:	e0 91 66 00 	lds	r30, 0x0066
 836:	f0 91 67 00 	lds	r31, 0x0067
 83a:	09 95       	icall
	}
}
 83c:	cf 91       	pop	r28
 83e:	df 91       	pop	r29
 840:	ff 91       	pop	r31
 842:	ef 91       	pop	r30
 844:	bf 91       	pop	r27
 846:	af 91       	pop	r26
 848:	9f 91       	pop	r25
 84a:	8f 91       	pop	r24
 84c:	7f 91       	pop	r23
 84e:	6f 91       	pop	r22
 850:	5f 91       	pop	r21
 852:	4f 91       	pop	r20
 854:	3f 91       	pop	r19
 856:	2f 91       	pop	r18
 858:	0f 90       	pop	r0
 85a:	0f be       	out	0x3f, r0	; 63
 85c:	0f 90       	pop	r0
 85e:	1f 90       	pop	r1
 860:	18 95       	reti

00000862 <TIMERS_init>:
 * 	4. Set timer compare value
 * 	Function Input: timer_no => select between timers0,1,2
 * 					Timer configType => setup timer configuration by passing a structure's address
 * 	Note that Timer/Counter1 and Timer/Counter0 share the same prescaler
 */
void TIMERS_init(const TIMERS_ConfigType * Timer_Config_Ptr, TIMERS_Select timer_no){
 862:	df 93       	push	r29
 864:	cf 93       	push	r28
 866:	00 d0       	rcall	.+0      	; 0x868 <TIMERS_init+0x6>
 868:	00 d0       	rcall	.+0      	; 0x86a <TIMERS_init+0x8>
 86a:	0f 92       	push	r0
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	9a 83       	std	Y+2, r25	; 0x02
 872:	89 83       	std	Y+1, r24	; 0x01
 874:	6b 83       	std	Y+3, r22	; 0x03
	switch(timer_no)
 876:	8b 81       	ldd	r24, Y+3	; 0x03
 878:	88 2f       	mov	r24, r24
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	00 97       	sbiw	r24, 0x00	; 0
 87e:	09 f0       	breq	.+2      	; 0x882 <TIMERS_init+0x20>
 880:	45 c0       	rjmp	.+138    	; 0x90c <TIMERS_init+0xaa>
		 * BIT3,6 WGM01:0 => CTC mode => 1,0
		 * Bit 5:4 – COM01:0 => 0,0 non_PWM
		 * Bit 2:0 – CS02:0: Clock Select "prescalers"
		 */
		/*set timer0 to run on the required clock select*/
		TCCR0 = (0x07 & Timer_Config_Ptr->clock);
 882:	a3 e5       	ldi	r26, 0x53	; 83
 884:	b0 e0       	ldi	r27, 0x00	; 0
 886:	e9 81       	ldd	r30, Y+1	; 0x01
 888:	fa 81       	ldd	r31, Y+2	; 0x02
 88a:	80 81       	ld	r24, Z
 88c:	87 70       	andi	r24, 0x07	; 7
 88e:	8c 93       	st	X, r24
		/*set timer0 initial value*/
		TCNT0 = Timer_Config_Ptr->timer_init_value;
 890:	a2 e5       	ldi	r26, 0x52	; 82
 892:	b0 e0       	ldi	r27, 0x00	; 0
 894:	e9 81       	ldd	r30, Y+1	; 0x01
 896:	fa 81       	ldd	r31, Y+2	; 0x02
 898:	82 81       	ldd	r24, Z+2	; 0x02
 89a:	93 81       	ldd	r25, Z+3	; 0x03
 89c:	8c 93       	st	X, r24
		switch(Timer_Config_Ptr->mode)
 89e:	e9 81       	ldd	r30, Y+1	; 0x01
 8a0:	fa 81       	ldd	r31, Y+2	; 0x02
 8a2:	81 81       	ldd	r24, Z+1	; 0x01
 8a4:	28 2f       	mov	r18, r24
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	3d 83       	std	Y+5, r19	; 0x05
 8aa:	2c 83       	std	Y+4, r18	; 0x04
 8ac:	8c 81       	ldd	r24, Y+4	; 0x04
 8ae:	9d 81       	ldd	r25, Y+5	; 0x05
 8b0:	00 97       	sbiw	r24, 0x00	; 0
 8b2:	31 f0       	breq	.+12     	; 0x8c0 <TIMERS_init+0x5e>
 8b4:	2c 81       	ldd	r18, Y+4	; 0x04
 8b6:	3d 81       	ldd	r19, Y+5	; 0x05
 8b8:	21 30       	cpi	r18, 0x01	; 1
 8ba:	31 05       	cpc	r19, r1
 8bc:	89 f0       	breq	.+34     	; 0x8e0 <TIMERS_init+0x7e>
 8be:	26 c0       	rjmp	.+76     	; 0x90c <TIMERS_init+0xaa>
		{
		case OVERFLOW_MODE:
			/*set pin7 FOC0*/
			TCCR0 |= (1<<FOC0);
 8c0:	a3 e5       	ldi	r26, 0x53	; 83
 8c2:	b0 e0       	ldi	r27, 0x00	; 0
 8c4:	e3 e5       	ldi	r30, 0x53	; 83
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
 8ca:	80 68       	ori	r24, 0x80	; 128
 8cc:	8c 93       	st	X, r24
//			TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
			/*enable timer overflow interrupt and disable CTC interrupt*/
			TIMSK = (TIMSK & 0xFC) | (1<<TOIE0);
 8ce:	a9 e5       	ldi	r26, 0x59	; 89
 8d0:	b0 e0       	ldi	r27, 0x00	; 0
 8d2:	e9 e5       	ldi	r30, 0x59	; 89
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	8c 7f       	andi	r24, 0xFC	; 252
 8da:	81 60       	ori	r24, 0x01	; 1
 8dc:	8c 93       	st	X, r24
 8de:	16 c0       	rjmp	.+44     	; 0x90c <TIMERS_init+0xaa>
			break;
		case CTC_MODE:
			/*assign a compare match value to Output Compare Register – OCR0*/
			OCR0 = Timer_Config_Ptr->timer_Compare_value;
 8e0:	ac e5       	ldi	r26, 0x5C	; 92
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
 8e4:	e9 81       	ldd	r30, Y+1	; 0x01
 8e6:	fa 81       	ldd	r31, Y+2	; 0x02
 8e8:	84 81       	ldd	r24, Z+4	; 0x04
 8ea:	95 81       	ldd	r25, Z+5	; 0x05
 8ec:	8c 93       	st	X, r24
			/*set timer0 to operate on CTC mode*/
			TCCR0 |= (1<<FOC0) | (1<<WGM01);
 8ee:	a3 e5       	ldi	r26, 0x53	; 83
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	e3 e5       	ldi	r30, 0x53	; 83
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	88 68       	ori	r24, 0x88	; 136
 8fa:	8c 93       	st	X, r24
			/*disable overflow interrupt and enable CTC interrupt*/
			TIMSK = (TIMSK & 0xFC) | (1<<OCIE0);
 8fc:	a9 e5       	ldi	r26, 0x59	; 89
 8fe:	b0 e0       	ldi	r27, 0x00	; 0
 900:	e9 e5       	ldi	r30, 0x59	; 89
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	8c 7f       	andi	r24, 0xFC	; 252
 908:	82 60       	ori	r24, 0x02	; 2
 90a:	8c 93       	st	X, r24
	case TIMER1_ID:
		break;
	case TIMER2_ID:
		break;
	}
}
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	0f 90       	pop	r0
 916:	cf 91       	pop	r28
 918:	df 91       	pop	r29
 91a:	08 95       	ret

0000091c <TIMERS_setCallBack>:

/*
 * Description: Function to set the Call Back function address for each timer.
 */
void TIMERS_setCallBack(void(*a_ptr)(void), TIMERS_Select timer_no){
 91c:	df 93       	push	r29
 91e:	cf 93       	push	r28
 920:	00 d0       	rcall	.+0      	; 0x922 <TIMERS_setCallBack+0x6>
 922:	0f 92       	push	r0
 924:	cd b7       	in	r28, 0x3d	; 61
 926:	de b7       	in	r29, 0x3e	; 62
 928:	9a 83       	std	Y+2, r25	; 0x02
 92a:	89 83       	std	Y+1, r24	; 0x01
 92c:	6b 83       	std	Y+3, r22	; 0x03
	if (timer_no == TIMER0_ID)
 92e:	8b 81       	ldd	r24, Y+3	; 0x03
 930:	88 23       	and	r24, r24
 932:	39 f4       	brne	.+14     	; 0x942 <TIMERS_setCallBack+0x26>
		g_timer0CallBackPtr = a_ptr;
 934:	89 81       	ldd	r24, Y+1	; 0x01
 936:	9a 81       	ldd	r25, Y+2	; 0x02
 938:	90 93 67 00 	sts	0x0067, r25
 93c:	80 93 66 00 	sts	0x0066, r24
 940:	13 c0       	rjmp	.+38     	; 0x968 <TIMERS_setCallBack+0x4c>
	else if(timer_no == TIMER1_ID)
 942:	8b 81       	ldd	r24, Y+3	; 0x03
 944:	81 30       	cpi	r24, 0x01	; 1
 946:	39 f4       	brne	.+14     	; 0x956 <TIMERS_setCallBack+0x3a>
		g_timer1CallBackPtr = a_ptr;
 948:	89 81       	ldd	r24, Y+1	; 0x01
 94a:	9a 81       	ldd	r25, Y+2	; 0x02
 94c:	90 93 69 00 	sts	0x0069, r25
 950:	80 93 68 00 	sts	0x0068, r24
 954:	09 c0       	rjmp	.+18     	; 0x968 <TIMERS_setCallBack+0x4c>
	else if(timer_no == TIMER2_ID)
 956:	8b 81       	ldd	r24, Y+3	; 0x03
 958:	82 30       	cpi	r24, 0x02	; 2
 95a:	31 f4       	brne	.+12     	; 0x968 <TIMERS_setCallBack+0x4c>
		g_timer2CallBackPtr = a_ptr;
 95c:	89 81       	ldd	r24, Y+1	; 0x01
 95e:	9a 81       	ldd	r25, Y+2	; 0x02
 960:	90 93 6b 00 	sts	0x006B, r25
 964:	80 93 6a 00 	sts	0x006A, r24
}
 968:	0f 90       	pop	r0
 96a:	0f 90       	pop	r0
 96c:	0f 90       	pop	r0
 96e:	cf 91       	pop	r28
 970:	df 91       	pop	r29
 972:	08 95       	ret

00000974 <clearTimerValue>:

/*
 * Description: Function to clear a timer Value to start count from ZERO
 */
void clearTimerValue(TIMERS_Select timer_no){
 974:	df 93       	push	r29
 976:	cf 93       	push	r28
 978:	0f 92       	push	r0
 97a:	cd b7       	in	r28, 0x3d	; 61
 97c:	de b7       	in	r29, 0x3e	; 62
 97e:	89 83       	std	Y+1, r24	; 0x01
	if (timer_no == TIMER0_ID)
 980:	89 81       	ldd	r24, Y+1	; 0x01
 982:	88 23       	and	r24, r24
 984:	21 f4       	brne	.+8      	; 0x98e <clearTimerValue+0x1a>
		TCNT0 = 0;
 986:	e2 e5       	ldi	r30, 0x52	; 82
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	10 82       	st	Z, r1
 98c:	0e c0       	rjmp	.+28     	; 0x9aa <clearTimerValue+0x36>
	else if(timer_no == TIMER1_ID)
 98e:	89 81       	ldd	r24, Y+1	; 0x01
 990:	81 30       	cpi	r24, 0x01	; 1
 992:	29 f4       	brne	.+10     	; 0x99e <clearTimerValue+0x2a>
		TCNT1 = 0;
 994:	ec e4       	ldi	r30, 0x4C	; 76
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	11 82       	std	Z+1, r1	; 0x01
 99a:	10 82       	st	Z, r1
 99c:	06 c0       	rjmp	.+12     	; 0x9aa <clearTimerValue+0x36>
	else if(timer_no == TIMER2_ID)
 99e:	89 81       	ldd	r24, Y+1	; 0x01
 9a0:	82 30       	cpi	r24, 0x02	; 2
 9a2:	19 f4       	brne	.+6      	; 0x9aa <clearTimerValue+0x36>
		TCNT2 = 0;
 9a4:	e4 e4       	ldi	r30, 0x44	; 68
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	10 82       	st	Z, r1

}
 9aa:	0f 90       	pop	r0
 9ac:	cf 91       	pop	r28
 9ae:	df 91       	pop	r29
 9b0:	08 95       	ret

000009b2 <TIMERS_DeInit>:

/*
 * Description: Function to disable a timer
 */
void TIMERS_DeInit(TIMERS_Select timer_no){
 9b2:	df 93       	push	r29
 9b4:	cf 93       	push	r28
 9b6:	0f 92       	push	r0
 9b8:	cd b7       	in	r28, 0x3d	; 61
 9ba:	de b7       	in	r29, 0x3e	; 62
 9bc:	89 83       	std	Y+1, r24	; 0x01
	if (timer_no == TIMER0_ID){
 9be:	89 81       	ldd	r24, Y+1	; 0x01
 9c0:	88 23       	and	r24, r24
 9c2:	59 f4       	brne	.+22     	; 0x9da <TIMERS_DeInit+0x28>
		TCCR0 = 0;
 9c4:	e3 e5       	ldi	r30, 0x53	; 83
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	10 82       	st	Z, r1
		TIMSK &= 0xFC;
 9ca:	a9 e5       	ldi	r26, 0x59	; 89
 9cc:	b0 e0       	ldi	r27, 0x00	; 0
 9ce:	e9 e5       	ldi	r30, 0x59	; 89
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	80 81       	ld	r24, Z
 9d4:	8c 7f       	andi	r24, 0xFC	; 252
 9d6:	8c 93       	st	X, r24
 9d8:	1e c0       	rjmp	.+60     	; 0xa16 <TIMERS_DeInit+0x64>
	}
	else if(timer_no == TIMER1_ID){
 9da:	89 81       	ldd	r24, Y+1	; 0x01
 9dc:	81 30       	cpi	r24, 0x01	; 1
 9de:	71 f4       	brne	.+28     	; 0x9fc <TIMERS_DeInit+0x4a>
		TCCR1A = 0;
 9e0:	ef e4       	ldi	r30, 0x4F	; 79
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	10 82       	st	Z, r1
		TCCR1B = 0;
 9e6:	ee e4       	ldi	r30, 0x4E	; 78
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	10 82       	st	Z, r1
		TIMSK &= 0xC3;
 9ec:	a9 e5       	ldi	r26, 0x59	; 89
 9ee:	b0 e0       	ldi	r27, 0x00	; 0
 9f0:	e9 e5       	ldi	r30, 0x59	; 89
 9f2:	f0 e0       	ldi	r31, 0x00	; 0
 9f4:	80 81       	ld	r24, Z
 9f6:	83 7c       	andi	r24, 0xC3	; 195
 9f8:	8c 93       	st	X, r24
 9fa:	0d c0       	rjmp	.+26     	; 0xa16 <TIMERS_DeInit+0x64>
	}
	else if(timer_no == TIMER2_ID)
 9fc:	89 81       	ldd	r24, Y+1	; 0x01
 9fe:	82 30       	cpi	r24, 0x02	; 2
 a00:	51 f4       	brne	.+20     	; 0xa16 <TIMERS_DeInit+0x64>
	{
		TCCR2 = 0;
 a02:	e5 e4       	ldi	r30, 0x45	; 69
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	10 82       	st	Z, r1
		TIMSK &= 0x3F;
 a08:	a9 e5       	ldi	r26, 0x59	; 89
 a0a:	b0 e0       	ldi	r27, 0x00	; 0
 a0c:	e9 e5       	ldi	r30, 0x59	; 89
 a0e:	f0 e0       	ldi	r31, 0x00	; 0
 a10:	80 81       	ld	r24, Z
 a12:	8f 73       	andi	r24, 0x3F	; 63
 a14:	8c 93       	st	X, r24
	}

}
 a16:	0f 90       	pop	r0
 a18:	cf 91       	pop	r28
 a1a:	df 91       	pop	r29
 a1c:	08 95       	ret

00000a1e <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate){
 a1e:	df 93       	push	r29
 a20:	cf 93       	push	r28
 a22:	00 d0       	rcall	.+0      	; 0xa24 <UART_init+0x6>
 a24:	00 d0       	rcall	.+0      	; 0xa26 <UART_init+0x8>
 a26:	00 d0       	rcall	.+0      	; 0xa28 <UART_init+0xa>
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	6b 83       	std	Y+3, r22	; 0x03
 a2e:	7c 83       	std	Y+4, r23	; 0x04
 a30:	8d 83       	std	Y+5, r24	; 0x05
 a32:	9e 83       	std	Y+6, r25	; 0x06
	uint16 a_ubrrValue = 0; /*to select the baud rate*/
 a34:	1a 82       	std	Y+2, r1	; 0x02
 a36:	19 82       	std	Y+1, r1	; 0x01
	 * 7    6   5   4   3  2   1   0
	 * RXC TXC UDRE FE DOR PE U2X MPCM
	 * most of those bits are flags
	 **********************************************************************/
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
 a38:	eb e2       	ldi	r30, 0x2B	; 43
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	82 e0       	ldi	r24, 0x02	; 2
 a3e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
 a40:	ea e2       	ldi	r30, 0x2A	; 42
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	88 e1       	ldi	r24, 0x18	; 24
 a46:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ1) |(1<<UCSZ0);
 a48:	e0 e4       	ldi	r30, 0x40	; 64
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	86 e8       	ldi	r24, 0x86	; 134
 a4e:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	a_ubrrValue = F_CPU/16/baud_rate-1;
 a50:	84 e2       	ldi	r24, 0x24	; 36
 a52:	94 ef       	ldi	r25, 0xF4	; 244
 a54:	a0 e0       	ldi	r26, 0x00	; 0
 a56:	b0 e0       	ldi	r27, 0x00	; 0
 a58:	2b 81       	ldd	r18, Y+3	; 0x03
 a5a:	3c 81       	ldd	r19, Y+4	; 0x04
 a5c:	4d 81       	ldd	r20, Y+5	; 0x05
 a5e:	5e 81       	ldd	r21, Y+6	; 0x06
 a60:	bc 01       	movw	r22, r24
 a62:	cd 01       	movw	r24, r26
 a64:	0e 94 8b 05 	call	0xb16	; 0xb16 <__udivmodsi4>
 a68:	da 01       	movw	r26, r20
 a6a:	c9 01       	movw	r24, r18
 a6c:	01 97       	sbiw	r24, 0x01	; 1
 a6e:	9a 83       	std	Y+2, r25	; 0x02
 a70:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (unsigned char)(a_ubrrValue>>8);
 a72:	e0 e4       	ldi	r30, 0x40	; 64
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	89 81       	ldd	r24, Y+1	; 0x01
 a78:	9a 81       	ldd	r25, Y+2	; 0x02
 a7a:	89 2f       	mov	r24, r25
 a7c:	99 27       	eor	r25, r25
 a7e:	80 83       	st	Z, r24
	UBRRL = (unsigned char)a_ubrrValue;
 a80:	e9 e2       	ldi	r30, 0x29	; 41
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	89 81       	ldd	r24, Y+1	; 0x01
 a86:	80 83       	st	Z, r24

}
 a88:	26 96       	adiw	r28, 0x06	; 6
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	f8 94       	cli
 a8e:	de bf       	out	0x3e, r29	; 62
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	cd bf       	out	0x3d, r28	; 61
 a94:	cf 91       	pop	r28
 a96:	df 91       	pop	r29
 a98:	08 95       	ret

00000a9a <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
 a9a:	df 93       	push	r29
 a9c:	cf 93       	push	r28
 a9e:	0f 92       	push	r0
 aa0:	cd b7       	in	r28, 0x3d	; 61
 aa2:	de b7       	in	r29, 0x3e	; 62
 aa4:	89 83       	std	Y+1, r24	; 0x01

	/* Wait for empty transmit buffer */
	while(BIT_IS_CLEAR(UCSRA, UDRE));
 aa6:	eb e2       	ldi	r30, 0x2B	; 43
 aa8:	f0 e0       	ldi	r31, 0x00	; 0
 aaa:	80 81       	ld	r24, Z
 aac:	88 2f       	mov	r24, r24
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	80 72       	andi	r24, 0x20	; 32
 ab2:	90 70       	andi	r25, 0x00	; 0
 ab4:	00 97       	sbiw	r24, 0x00	; 0
 ab6:	b9 f3       	breq	.-18     	; 0xaa6 <UART_sendByte+0xc>
	/*another method found in ATMEGA16 data sheet example*/
	/*	while ( !( UCSRA & (1<<UDRE)) ); */
	/* Put data into buffer, sends the data */
	UDR = data;
 ab8:	ec e2       	ldi	r30, 0x2C	; 44
 aba:	f0 e0       	ldi	r31, 0x00	; 0
 abc:	89 81       	ldd	r24, Y+1	; 0x01
 abe:	80 83       	st	Z, r24
}
 ac0:	0f 90       	pop	r0
 ac2:	cf 91       	pop	r28
 ac4:	df 91       	pop	r29
 ac6:	08 95       	ret

00000ac8 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void){
 ac8:	df 93       	push	r29
 aca:	cf 93       	push	r28
 acc:	cd b7       	in	r28, 0x3d	; 61
 ace:	de b7       	in	r29, 0x3e	; 62
	/* Wait for data to be received */
	/*busy loop*/
	while ( !(UCSRA & (1<<RXC)) )
 ad0:	eb e2       	ldi	r30, 0x2B	; 43
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	80 81       	ld	r24, Z
 ad6:	88 23       	and	r24, r24
 ad8:	dc f7       	brge	.-10     	; 0xad0 <UART_recieveByte+0x8>
		;
	/* Get and return received data from buffer */
	return UDR;
 ada:	ec e2       	ldi	r30, 0x2C	; 44
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	80 81       	ld	r24, Z

}
 ae0:	cf 91       	pop	r28
 ae2:	df 91       	pop	r29
 ae4:	08 95       	ret

00000ae6 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
 ae6:	df 93       	push	r29
 ae8:	cf 93       	push	r28
 aea:	00 d0       	rcall	.+0      	; 0xaec <UART_sendString+0x6>
 aec:	cd b7       	in	r28, 0x3d	; 61
 aee:	de b7       	in	r29, 0x3e	; 62
 af0:	9a 83       	std	Y+2, r25	; 0x02
 af2:	89 83       	std	Y+1, r24	; 0x01

}
 af4:	0f 90       	pop	r0
 af6:	0f 90       	pop	r0
 af8:	cf 91       	pop	r28
 afa:	df 91       	pop	r29
 afc:	08 95       	ret

00000afe <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str){
 afe:	df 93       	push	r29
 b00:	cf 93       	push	r28
 b02:	00 d0       	rcall	.+0      	; 0xb04 <UART_receiveString+0x6>
 b04:	cd b7       	in	r28, 0x3d	; 61
 b06:	de b7       	in	r29, 0x3e	; 62
 b08:	9a 83       	std	Y+2, r25	; 0x02
 b0a:	89 83       	std	Y+1, r24	; 0x01
	/*Receive until # */
}
 b0c:	0f 90       	pop	r0
 b0e:	0f 90       	pop	r0
 b10:	cf 91       	pop	r28
 b12:	df 91       	pop	r29
 b14:	08 95       	ret

00000b16 <__udivmodsi4>:
 b16:	a1 e2       	ldi	r26, 0x21	; 33
 b18:	1a 2e       	mov	r1, r26
 b1a:	aa 1b       	sub	r26, r26
 b1c:	bb 1b       	sub	r27, r27
 b1e:	fd 01       	movw	r30, r26
 b20:	0d c0       	rjmp	.+26     	; 0xb3c <__udivmodsi4_ep>

00000b22 <__udivmodsi4_loop>:
 b22:	aa 1f       	adc	r26, r26
 b24:	bb 1f       	adc	r27, r27
 b26:	ee 1f       	adc	r30, r30
 b28:	ff 1f       	adc	r31, r31
 b2a:	a2 17       	cp	r26, r18
 b2c:	b3 07       	cpc	r27, r19
 b2e:	e4 07       	cpc	r30, r20
 b30:	f5 07       	cpc	r31, r21
 b32:	20 f0       	brcs	.+8      	; 0xb3c <__udivmodsi4_ep>
 b34:	a2 1b       	sub	r26, r18
 b36:	b3 0b       	sbc	r27, r19
 b38:	e4 0b       	sbc	r30, r20
 b3a:	f5 0b       	sbc	r31, r21

00000b3c <__udivmodsi4_ep>:
 b3c:	66 1f       	adc	r22, r22
 b3e:	77 1f       	adc	r23, r23
 b40:	88 1f       	adc	r24, r24
 b42:	99 1f       	adc	r25, r25
 b44:	1a 94       	dec	r1
 b46:	69 f7       	brne	.-38     	; 0xb22 <__udivmodsi4_loop>
 b48:	60 95       	com	r22
 b4a:	70 95       	com	r23
 b4c:	80 95       	com	r24
 b4e:	90 95       	com	r25
 b50:	9b 01       	movw	r18, r22
 b52:	ac 01       	movw	r20, r24
 b54:	bd 01       	movw	r22, r26
 b56:	cf 01       	movw	r24, r30
 b58:	08 95       	ret

00000b5a <_exit>:
 b5a:	f8 94       	cli

00000b5c <__stop_program>:
 b5c:	ff cf       	rjmp	.-2      	; 0xb5c <__stop_program>
